******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: a9 7f     -         lda #CIA_IRQ_MASK
0805: 8d 0d dc  -         sta REG_CIA_ICR
0808: ad 13 d0  -         lda DISCR   // Set the auto adjust 
080b: 09 0c     -         ora #$0C    // and wrap flag
080d: 8d 13 d0  -         sta DISCR                
0810: a9 29     -         lda #color 
0812: 8d 15 d0  -         sta DIS00
0815: 20 c2 e3  -         jsr GFX.fill_screen_
0818: a9 2e     -         lda #color
081a: 20 09 e2  -         jsr set_fg_color_
081d: a9 02     -         lda #xpos
081f: 20 d9 e1  -         jsr set_cursor_x_
0822: a9 01     -         lda #ypos
0824: 20 f1 e1  -         jsr set_cursor_y_    
0827: a9 2e     -         lda #<addr
0829: 85 e0     -         sta zpRegE0
082b: a9 f0     -         lda #>addr
082d: 85 e1     -         sta zpRegE1
082f: 20 7d e2  -         jsr print_text_
0832: a9 1f     -         lda #color
0834: 20 09 e2  -         jsr set_fg_color_
0837: a9 3f     -         lda #xlo
0839: 8d 15 d0  -         sta DIS00
083c: a9 00     -         lda #xhi
083e: 8d 16 d0  -         sta DIS01
0841: a9 54     -         lda #y
0843: 8d 17 d0  -         sta DIS02
0846: a9 08     -         lda #rad
0848: 8d 18 d0  -         sta DIS03
084b: a9 1b     -         lda #color 
084d: 8d 19 d0  -         sta DIS04 
0850: 20 63 e3  -         jsr GFX.fill_circle_ 
0853: a9 0a     -         lda #xpos
0855: 20 d9 e1  -         jsr set_cursor_x_
0858: a9 0a     -         lda #ypos
085a: 20 f1 e1  -         jsr set_cursor_y_    
085d: a9 64     -         lda #<addr
085f: 85 e0     -         sta zpRegE0
0861: a9 f0     -         lda #>addr
0863: 85 e1     -         sta zpRegE1
0865: 20 7d e2  -         jsr print_text_
0868: a9 0a     -         lda #xpos
086a: 20 d9 e1  -         jsr set_cursor_x_
086d: a9 0c     -         lda #ypos
086f: 20 f1 e1  -         jsr set_cursor_y_    
0872: a9 74     -         lda #<addr
0874: 85 e0     -         sta zpRegE0
0876: a9 f0     -         lda #>addr
0878: 85 e1     -         sta zpRegE1
087a: 20 7d e2  -         jsr print_text_
087d: 78        -         sei
087e: a9 ad     -         lda #<label
0880: 8d fa ff  -         sta $fffa 
0883: a9 08     -         lda #>label
0885: 8d fb ff  -         sta $fffb
0888: 58        -         cli
0889: 78        -         sei
088a: a9 ad     -         lda #<label
088c: 8d fe ff  -         sta $fffe 
088f: a9 08     -         lda #>label
0891: 8d ff ff  -         sta $ffff
0894: 58        -         cli
0895: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0897: 8d 0d dc  -         sta $dc0d
089a: ad ac 08  - endless:lda PROGRAM_ADR_CR
089d: 10 fb     -         bpl endless
089f: a9 7f     -         lda #CIA_IRQ_MASK
08a1: 8d 0d dc  -         sta REG_CIA_ICR
08a4: 20 8b 10  -         jsr SpaceInvaders.run
08a7: 4c a7 08  -         jmp *
08aa: 00        - PROGRAM_ADR_LO:.byte 0
08ab: 00        - PROGRAM_ADR_HI:.byte 0
08ac: 00        - PROGRAM_ADR_CR:.byte 0
08ad: 48        - test_isr:pha
08ae: da        -         phx
08af: 5a        -         phy
08b0: ad 0d dc  -         lda REG_CIA_ICR
08b3: 48        -         pha
08b4: a9 00     -         lda #xlo
08b6: 8d 15 d0  -         sta DIS00
08b9: a9 00     -         lda #xhi 
08bb: 8d 16 d0  -         sta DIS01
08be: a9 b0     -         lda #y 
08c0: 8d 17 d0  -         sta DIS02
08c3: a9 00     -         lda #width_lo 
08c5: 8d 18 d0  -         sta DIS03
08c8: a9 64     -         lda #width_hi
08ca: 8d 19 d0  -         sta DIS04
08cd: a9 18     -         lda #height
08cf: 8d 1a d0  -         sta DIS05
08d2: a9 04     -         lda #col 
08d4: 8d 1b d0  -         sta DIS06
08d7: 20 04 e3  -         jsr GFX.fill_rect_
08da: 68        -         pla 
08db: a9 09     -         lda #xpos
08dd: 20 d9 e1  -         jsr set_cursor_x_
08e0: a9 17     -         lda #ypos
08e2: 20 f1 e1  -         jsr set_cursor_y_    
08e5: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
08e8: 85 e0     -         sta zpRegE0
08ea: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
08ed: 85 e1     -         sta zpRegE1
08ef: 20 3f e1  -         jsr Math.bcd_convert_word_
08f2: a5 e4     -         lda zpRegE4
08f4: 20 95 e2  -         jsr print_hex_
08f7: a5 e3     -         lda zpRegE3
08f9: 20 95 e2  -         jsr print_hex_
08fc: a5 e2     -         lda zpRegE2
08fe: 20 95 e2  -         jsr print_hex_
0901: a9 02     -         lda #xpos
0903: 20 d9 e1  -         jsr set_cursor_x_
0906: a9 1a     -         lda #ypos
0908: 20 f1 e1  -         jsr set_cursor_y_    
090b: a9 51     -         lda #<addr
090d: 85 e0     -         sta zpRegE0
090f: a9 f0     -         lda #>addr
0911: 85 e1     -         sta zpRegE1
0913: 20 7d e2  -         jsr print_text_
0916: ce 44 09  -         dec GAME_COUNTDOWN
0919: d0 0f     -         bne exit
091b: a9 8b     -         lda #<SpaceInvaders.run
091d: 8d aa 08  -         sta PROGRAM_ADR_LO
0920: a9 10     -         lda #>SpaceInvaders.run
0922: 8d ab 08  -         sta PROGRAM_ADR_HI
0925: a9 80     -         lda #$80
0927: 8d ac 08  -         sta PROGRAM_ADR_CR
092a: 7a        - exit:   ply 
092b: fa        -         plx 
092c: 68        -         pla 
092d: 40        -         rti
092e: a9 f0     - setup_timer:lda #$f0
0930: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
0933: a9 00     -         lda #$00
0935: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
0938: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
093a: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
093d: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
093f: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0942: 60        -         rts
0943: 00        - IRQ_DATA:.byte $00
0944: ff        - GAME_COUNTDOWN:.byte $ff
0945: 48        - kernel_isr:pha
0946: da        -         phx
0947: 5a        -         phy
0948: ad 0d dc  -         lda REG_CIA_ICR
094b: ce 44 09  -         dec GAME_COUNTDOWN
094e: d0 36     -         bne exit
0950: a9 80     -         lda #$80
0952: 8d ac 08  -         sta PROGRAM_ADR_CR
0955: 4c 86 09  -         jmp exit
0958: 8d 43 09  - start_isr:sta IRQ_DATA
095b: 8d ff d0  -         sta DEBUG
095e: a9 04     - test_frame_irq:lda #FRAME_INTERRUPT_FLAG
0960: 2c 43 09  -         bit IRQ_DATA
0963: f0 03     -         beq test_keyboard
0965: 4c 86 09  -         jmp exit
0968: a9 08     - test_keyboard:lda #KBD_INTERRUPT_FLAG
096a: 2c 43 09  -         bit IRQ_DATA
096d: f0 06     -         beq test_timer_a 
096f: 20 8a 09  -         jsr handle_key_event
0972: 4c 86 09  -         jmp exit
0975: a9 01     - test_timer_a:lda #TIMER_A_INTERRUPT_FLAG
0977: 2c 43 09  -         bit IRQ_DATA
097a: f0 03     -         beq test_timer_b
097c: 4c 86 09  -         jmp exit
097f: a9 02     - test_timer_b:lda #TIMER_B_INTERRUPT_FLAG
0981: 2c 43 09  -         bit IRQ_DATA
0984: f0 00     -         beq exit
0986: 7a        - exit:   ply 
0987: fa        -         plx 
0988: 68        -         pla 
0989: 40        -         rti
098a: ad 10 d0  - handle_key_event:lda KBD
098d: c9 32     -         cmp #$32    // Key 2
098f: d0 1f     -         bne exit
0991: a9 ea     -         lda #code
0993: 8d ff d0  -         sta DEBUG
0996: a9 7f     -         lda #CIA_IRQ_MASK
0998: 8d 0d dc  -         sta REG_CIA_ICR
099b: a9 20     -         lda #color 
099d: 8d 15 d0  -         sta DIS00
09a0: 20 c2 e3  -         jsr GFX.fill_screen_
09a3: a9 3f     -         lda #color 
09a5: 8d 15 d0  -         sta DIS00
09a8: 20 c2 e3  -         jsr GFX.fill_screen_
09ab: a9 80     -         lda #$80
09ad: 8d ac 08  -         sta PROGRAM_ADR_CR
09b0: 60        - exit:   rts

[Space Invaders]
1000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     - GS_JUMPTABLE_LO:.fill 15,0
100f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     - GS_JUMPTABLE_HI:.fill 15,0
101e: 48        - dummy_isr:pha
101f: da        -         phx
1020: 5a        -         phy
1021: 48        -         pha
1022: a9 00     -         lda #xlo
1024: 8d 15 d0  -         sta DIS00
1027: a9 00     -         lda #xhi 
1029: 8d 16 d0  -         sta DIS01
102c: a9 b0     -         lda #y 
102e: 8d 17 d0  -         sta DIS02
1031: a9 00     -         lda #width_lo 
1033: 8d 18 d0  -         sta DIS03
1036: a9 64     -         lda #width_hi
1038: 8d 19 d0  -         sta DIS04
103b: a9 18     -         lda #height
103d: 8d 1a d0  -         sta DIS05
1040: a9 04     -         lda #col 
1042: 8d 1b d0  -         sta DIS06
1045: 20 04 e3  -         jsr GFX.fill_rect_
1048: 68        -         pla 
1049: a9 09     -         lda #xpos
104b: 20 d9 e1  -         jsr set_cursor_x_
104e: a9 17     -         lda #ypos
1050: 20 f1 e1  -         jsr set_cursor_y_    
1053: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
1056: 85 e0     -         sta zpRegE0
1058: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
105b: 85 e1     -         sta zpRegE1
105d: 20 3f e1  -         jsr Math.bcd_convert_word_
1060: a5 e4     -         lda zpRegE4
1062: 20 95 e2  -         jsr print_hex_
1065: a5 e3     -         lda zpRegE3
1067: 20 95 e2  -         jsr print_hex_
106a: a5 e2     -         lda zpRegE2
106c: 20 95 e2  -         jsr print_hex_
106f: a9 02     -         lda #xpos
1071: 20 d9 e1  -         jsr set_cursor_x_
1074: a9 1a     -         lda #ypos
1076: 20 f1 e1  -         jsr set_cursor_y_    
1079: a9 51     -         lda #<addr
107b: 85 e0     -         sta zpRegE0
107d: a9 f0     -         lda #>addr
107f: 85 e1     -         sta zpRegE1
1081: 20 7d e2  -         jsr print_text_
1084: ad 0d dc  -         lda REG_CIA_ICR
1087: 7a        -         ply 
1088: fa        -         plx 
1089: 68        -         pla 
108a: 40        -         rti
108b: a9 7f     - run:    lda #CIA_IRQ_MASK
108d: 8d 0d dc  -         sta REG_CIA_ICR
1090: a9 2a     -         lda #color 
1092: 8d 15 d0  -         sta DIS00
1095: 20 c2 e3  -         jsr GFX.fill_screen_
1098: a9 d5     -         lda #<label
109a: 8d 00 10  -         sta GS_JUMPTABLE_LO+state
109d: a9 11     -         lda #>label
109f: 8d 0f 10  -         sta GS_JUMPTABLE_HI+state
10a2: a9 77     -         lda #<label
10a4: 8d 02 10  -         sta GS_JUMPTABLE_LO+state
10a7: a9 13     -         lda #>label
10a9: 8d 11 10  -         sta GS_JUMPTABLE_HI+state
10ac: a9 14     -         lda #<label
10ae: 8d 03 10  -         sta GS_JUMPTABLE_LO+state
10b1: a9 17     -         lda #>label
10b3: 8d 12 10  -         sta GS_JUMPTABLE_HI+state
10b6: a9 15     -         lda #<label
10b8: 8d 04 10  -         sta GS_JUMPTABLE_LO+state
10bb: a9 17     -         lda #>label
10bd: 8d 13 10  -         sta GS_JUMPTABLE_HI+state
10c0: a9 14     -         lda #<label
10c2: 8d 01 10  -         sta GS_JUMPTABLE_LO+state
10c5: a9 13     -         lda #>label
10c7: 8d 10 10  -         sta GS_JUMPTABLE_HI+state
10ca: a9 5c     -         lda #<label
10cc: 8d 05 10  -         sta GS_JUMPTABLE_LO+state
10cf: a9 15     -         lda #>label
10d1: 8d 14 10  -         sta GS_JUMPTABLE_HI+state
10d4: 20 69 1a  -         jsr init_alien_animation
10d7: 20 37 18  -         jsr initialize_sprite_definition_block
10da: a9 00     -         lda #state
10dc: 20 e2 10  -         jsr switch_game_state
10df: 4c df 10  -         jmp *
10e2: 85 04     - switch_game_state:sta ZP_GAME_STATE
10e4: aa        -         tax 
10e5: bd 00 10  -         lda GS_JUMPTABLE_LO,x 
10e8: 8d f2 10  -         sta jump+1
10eb: bd 0f 10  -         lda GS_JUMPTABLE_HI,x // Self modified code
10ee: 8d f3 10  -         sta jump+2
10f1: 4c 00 00  - jump:   jmp 0000    
10f4: 60        -         rts
10f5: a6 06     - animate_aliens:ldx ALIEN_ANIM_FRAME_HI // Why ???
10f7: bd 17 18  -         lda ALIEN_A_SPRITE_ANIMATION_LO,x
10fa: 8d d7 17  -         sta SPRITE_DATA_LO+i    
10fd: 8d d8 17  -         sta SPRITE_DATA_LO+i    
1100: 8d d9 17  -         sta SPRITE_DATA_LO+i    
1103: 8d da 17  -         sta SPRITE_DATA_LO+i    
1106: 8d db 17  -         sta SPRITE_DATA_LO+i    
1109: 8d dc 17  -         sta SPRITE_DATA_LO+i    
110c: 8d dd 17  -         sta SPRITE_DATA_LO+i    
110f: 8d de 17  -         sta SPRITE_DATA_LO+i    
1112: bd 1b 18  -         lda ALIEN_A_SPRITE_ANIMATION_HI,x
1115: 8d f7 17  -         sta SPRITE_DATA_HI+i    
1118: 8d f8 17  -         sta SPRITE_DATA_HI+i    
111b: 8d f9 17  -         sta SPRITE_DATA_HI+i    
111e: 8d fa 17  -         sta SPRITE_DATA_HI+i    
1121: 8d fb 17  -         sta SPRITE_DATA_HI+i    
1124: 8d fc 17  -         sta SPRITE_DATA_HI+i    
1127: 8d fd 17  -         sta SPRITE_DATA_HI+i    
112a: 8d fe 17  -         sta SPRITE_DATA_HI+i    
112d: bd 1f 18  -         lda ALIEN_B_SPRITE_ANIMATION_LO,x
1130: 8d df 17  -         sta SPRITE_DATA_LO+i    
1133: 8d e0 17  -         sta SPRITE_DATA_LO+i    
1136: 8d e1 17  -         sta SPRITE_DATA_LO+i    
1139: 8d e2 17  -         sta SPRITE_DATA_LO+i    
113c: 8d e3 17  -         sta SPRITE_DATA_LO+i    
113f: 8d e4 17  -         sta SPRITE_DATA_LO+i    
1142: 8d e5 17  -         sta SPRITE_DATA_LO+i    
1145: 8d e6 17  -         sta SPRITE_DATA_LO+i    
1148: bd 23 18  -         lda ALIEN_B_SPRITE_ANIMATION_HI,x
114b: 8d ff 17  -         sta SPRITE_DATA_HI+i    
114e: 8d 00 18  -         sta SPRITE_DATA_HI+i    
1151: 8d 01 18  -         sta SPRITE_DATA_HI+i    
1154: 8d 02 18  -         sta SPRITE_DATA_HI+i    
1157: 8d 03 18  -         sta SPRITE_DATA_HI+i    
115a: 8d 04 18  -         sta SPRITE_DATA_HI+i    
115d: 8d 05 18  -         sta SPRITE_DATA_HI+i    
1160: 8d 06 18  -         sta SPRITE_DATA_HI+i    
1163: 60        -         rts
1164: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
1166: 07 e0     -         .byte %00000111, %11100000
1168: 0f f0     -         .byte %00001111, %11110000
116a: 1d b8     -         .byte %00011101, %10111000
116c: 17 e8     -         .byte %00010111, %11101000
116e: 17 e8     -         .byte %00010111, %11101000
1170: 02 40     -         .byte %00000010, %01000000
1172: 06 60     -         .byte %00000110, %01100000
1174: 02 40     - SPACE_ALIEN_A1:.byte %00000010, %01000000
1176: 07 e0     -         .byte %00000111, %11100000
1178: 0f f0     -         .byte %00001111, %11110000
117a: 1d b8     -         .byte %00011101, %10111000
117c: 17 e8     -         .byte %00010111, %11101000
117e: 07 c0     -         .byte %00000111, %11000000
1180: 02 60     -         .byte %00000010, %01100000
1182: 06 00     -         .byte %00000110, %00000000
1184: 02 40     - SPACE_ALIEN_A2:.byte %00000010, %01000000
1186: 07 e0     -         .byte %00000111, %11100000
1188: 0f f0     -         .byte %00001111, %11110000
118a: 1d b8     -         .byte %00011101, %10111000
118c: 17 e8     -         .byte %00010111, %11101000
118e: 03 e0     -         .byte %00000011, %11100000
1190: 06 40     -         .byte %00000110, %01000000
1192: 00 60     -         .byte %00000000, %01100000
1194: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
1196: 04 40     -         .byte %00000100, %01000000
1198: 03 80     -         .byte %00000011, %10000000
119a: 07 c0     -         .byte %00000111, %11000000
119c: 05 40     -         .byte %00000101, %01000000
119e: 07 c0     -         .byte %00000111, %11000000
11a0: 0a a0     -         .byte %00001010, %10100000
11a2: 0a a0     -         .byte %00001010, %10100000
11a4: 00 00     - SPACE_ALIEN_B1:.byte %00000000, %00000000
11a6: 04 40     -         .byte %00000100, %01000000
11a8: 03 80     -         .byte %00000011, %10000000
11aa: 07 c0     -         .byte %00000111, %11000000
11ac: 05 40     -         .byte %00000101, %01000000
11ae: 07 c0     -         .byte %00000111, %11000000
11b0: 0a a0     -         .byte %00001010, %10100000
11b2: 15 40     -         .byte %00010101, %01000000
11b4: 00 00     - SPACE_ALIEN_B2:.byte %00000000, %00000000
11b6: 04 40     -         .byte %00000100, %01000000
11b8: 03 80     -         .byte %00000011, %10000000
11ba: 07 c0     -         .byte %00000111, %11000000
11bc: 05 40     -         .byte %00000101, %01000000
11be: 07 c0     -         .byte %00000111, %11000000
11c0: 0a a0     -         .byte %00001010, %10100000
11c2: 05 50     -         .byte %00000101, %01010000
11c4: 00 00     - SPACE_ALIEN_C:.byte %00000000, %00000000
11c6: 04 40     -         .byte %00000100, %01000000
11c8: 0f e0     -         .byte %00001111, %11100000
11ca: 19 30     -         .byte %00011001, %00110000
11cc: 1f f0     -         .byte %00011111, %11110000
11ce: 1f f0     -         .byte %00011111, %11110000
11d0: 15 50     -         .byte %00010101, %01010000
11d2: 0a a0     -         .byte %00001010, %10100000
11d4: 00        - START_DELAY:.byte 00
11d5: a9 04     - init:   lda #FRAME_INTERRUPT_FLAG
11d7: 8d 0d dc  -         sta $dc0d
11da: a9 26     -         lda #color 
11dc: 8d 15 d0  -         sta DIS00
11df: 20 c2 e3  -         jsr GFX.fill_screen_
11e2: a9 0a     -         lda #color
11e4: 20 09 e2  -         jsr set_fg_color_
11e7: a9 0a     -         lda #xpos
11e9: 20 d9 e1  -         jsr set_cursor_x_
11ec: a9 02     -         lda #ypos
11ee: 20 f1 e1  -         jsr set_cursor_y_    
11f1: 78        -         sei
11f2: a9 08     -         lda #<label
11f4: 8d fa ff  -         sta $fffa 
11f7: a9 12     -         lda #>label
11f9: 8d fb ff  -         sta $fffb
11fc: 58        -         cli
11fd: a9 64     -         lda #100
11ff: 8d d4 11  -         sta START_DELAY
1202: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
1204: 8d 0d dc  -         sta $dc0d
1207: 60        -         rts
1208: 48        - run:    pha 
1209: da        -         phx
120a: 5a        -         phy  
120b: a9 26     -         lda #color 
120d: 8d 15 d0  -         sta DIS00
1210: 20 c2 e3  -         jsr GFX.fill_screen_
1213: a9 20     -         lda #color
1215: 20 09 e2  -         jsr set_fg_color_
1218: a9 0a     -         lda #xpos
121a: 20 d9 e1  -         jsr set_cursor_x_
121d: a9 06     -         lda #ypos
121f: 20 f1 e1  -         jsr set_cursor_y_    
1222: a9 ce     -         lda #<addr
1224: 85 e0     -         sta zpRegE0
1226: a9 12     -         lda #>addr
1228: 85 e1     -         sta zpRegE1
122a: 20 7d e2  -         jsr print_text_
122d: a9 0a     -         lda #xpos
122f: 20 d9 e1  -         jsr set_cursor_x_
1232: a9 09     -         lda #ypos
1234: 20 f1 e1  -         jsr set_cursor_y_    
1237: a9 e9     -         lda #<addr
1239: 85 e0     -         sta zpRegE0
123b: a9 12     -         lda #>addr
123d: 85 e1     -         sta zpRegE1
123f: 20 7d e2  -         jsr print_text_
1242: a9 0a     -         lda #xpos
1244: 20 d9 e1  -         jsr set_cursor_x_
1247: a9 0b     -         lda #ypos
1249: 20 f1 e1  -         jsr set_cursor_y_    
124c: a9 fb     -         lda #<addr
124e: 85 e0     -         sta zpRegE0
1250: a9 12     -         lda #>addr
1252: 85 e1     -         sta zpRegE1
1254: 20 7d e2  -         jsr print_text_
1257: 48        -         pha
1258: a9 3c     -         lda #xlo
125a: 8d 15 d0  -         sta DIS00
125d: a9 00     -         lda #xhi 
125f: 8d 16 d0  -         sta DIS01
1262: a9 68     -         lda #y 
1264: 8d 17 d0  -         sta DIS02
1267: a9 3c     -         lda #width_lo 
1269: 8d 18 d0  -         sta DIS03
126c: a9 00     -         lda #width_hi
126e: 8d 19 d0  -         sta DIS04
1271: a9 08     -         lda #height
1273: 8d 1a d0  -         sta DIS05
1276: a9 27     -         lda #col 
1278: 8d 1b d0  -         sta DIS06
127b: 20 04 e3  -         jsr GFX.fill_rect_
127e: 68        -         pla 
127f: a9 0b     -         lda #color
1281: 20 09 e2  -         jsr set_fg_color_
1284: a9 0a     -         lda #xpos
1286: 20 d9 e1  -         jsr set_cursor_x_
1289: a9 0d     -         lda #ypos
128b: 20 f1 e1  -         jsr set_cursor_y_    
128e: ad d4 11  -         lda addr
1291: 20 95 e2  -         jsr print_hex_
1294: a9 0e     -         lda #xpos
1296: 20 d9 e1  -         jsr set_cursor_x_
1299: a9 0d     -         lda #ypos
129b: 20 f1 e1  -         jsr set_cursor_y_    
129e: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
12a1: 85 e0     -         sta zpRegE0
12a3: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
12a6: 85 e1     -         sta zpRegE1
12a8: 20 3f e1  -         jsr Math.bcd_convert_word_
12ab: a5 e4     -         lda zpRegE4
12ad: 20 95 e2  -         jsr print_hex_
12b0: a5 e3     -         lda zpRegE3
12b2: 20 95 e2  -         jsr print_hex_
12b5: a5 e2     -         lda zpRegE2
12b7: 20 95 e2  -         jsr print_hex_
12ba: ce d4 11  -         dec START_DELAY
12bd: d0 08     -         bne !exit_isr+
12bf: a9 05     -         lda #state
12c1: 20 e2 10  -         jsr switch_game_state
12c4: 4c c7 12  -         jmp !exit_isr+
12c7: ad 0d dc  -         lda REG_CIA_ICR
12ca: 7a        -         ply 
12cb: fa        -         plx 
12cc: 68        -         pla 
12cd: 40        -         rti
12ce: 53 50 41 43 45 20 49 4e 56 41 44 45 52 20 4f 4e  - intro_message:.text "SPACE INVADER ON NEOS65C02"
12de: 20 4e 45 4f 53 36 35 43 30 32                   
12e8: 00        -         .byte 0
12e9: 41 20 20 53 54 41 52 54 20 4e 45 57 20 47 41 4d  - men_start_game:.text "A  START NEW GAME"
12f9: 45                                              
12fa: 00        -         .byte 0       
12fb: 42 20 20 42 41 43 4b 20 54 4f 20 4d 41 49 4e 20  - men_sback_to_main:.text "B  BACK TO MAIN MENU"
130b: 4d 45 4e 55                                     
130f: 00        -         .byte 0       
1310: 00 00     - CURRENT_VELOCITY:.word $0000
1312: 00 00     - TARGET_VELOCITY:.word $0000
1314: a9 04     - init:   lda #FRAME_INTERRUPT_FLAG
1316: 8d 0d dc  -         sta $dc0d
1319: 78        -         sei
131a: a9 77     -         lda #<label
131c: 8d fa ff  -         sta $fffa 
131f: a9 13     -         lda #>label
1321: 8d fb ff  -         sta $fffb
1324: 58        -         cli
1325: a2 1f     -         ldx #31
1327: a9 80     -         lda #$80
1329: 9d 17 17  -         sta SPRITE_FLAGS,x 
132c: ca        -         dex 
132d: 10 fa     -         bpl !loop- 
132f: a2 07     -         ldx #7
1331: a9 00     -         lda #0
1333: 9d 57 17  -         sta SPRITE_YPOS,x 
1336: 9d 47 17  -         sta SPRITE_XPOS+16,x 
1339: ca        -         dex 
133a: 10 f7     -         bpl !loop- 
133c: a2 07     -         ldx #7
133e: a9 ff     -         lda #255
1340: 9d 5f 17  -         sta SPRITE_YPOS+8,x 
1343: 9d 4f 17  -         sta SPRITE_XPOS+24,x 
1346: ca        -         dex 
1347: 10 f7     -         bpl !loop- 
1349: a2 07     -         ldx #7
134b: a9 20     -         lda #$20
134d: 9d 57 17  -         sta SPRITE_YPOS,x 
1350: ca        -         dex 
1351: 10 fa     -         bpl !loop-
1353: a2 07     -         ldx #7
1355: a9 30     -         lda #$30
1357: 9d 5f 17  -         sta SPRITE_YPOS+8,x 
135a: ca        -         dex 
135b: 10 fa     -         bpl !loop-
135d: a2 07     -         ldx #7
135f: a9 40     -         lda #$40
1361: 9d 67 17  -         sta SPRITE_YPOS+16,x 
1364: ca        -         dex 
1365: 10 fa     -         bpl !loop-
1367: a2 07     -         ldx #7
1369: a9 50     -         lda #$50
136b: 9d 67 17  -         sta SPRITE_YPOS+16,x 
136e: ca        -         dex 
136f: 10 fa     -         bpl !loop-
1371: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
1373: 8d 0d dc  -         sta $dc0d
1376: 60        -         rts
1377: a9 7f     - animate,init:lda #CIA_IRQ_MASK
1379: 8d 0d dc  -         sta REG_CIA_ICR
137c: 78        -         sei
137d: a9 8f     -         lda #<label
137f: 8d fa ff  -         sta $fffa 
1382: a9 13     -         lda #>label
1384: 8d fb ff  -         sta $fffb
1387: 58        -         cli
1388: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
138a: 8d 0d dc  -         sta $dc0d
138d: 60        -         rts
138e: 04        - shot_delay:.byte $04
138f: 48        - run:    pha
1390: da        -         phx 
1391: 5a        -         phy 
1392: ad 0d dc  -         lda REG_CIA_ICR
1395: a9 29     -         lda #color 
1397: 8d 15 d0  -         sta DIS00
139a: 20 c2 e3  -         jsr GFX.fill_screen_
139d: 48        -         pha
139e: a9 05     -         lda #xlo
13a0: 8d 15 d0  -         sta DIS00
13a3: a9 00     -         lda #xhi 
13a5: 8d 16 d0  -         sta DIS01
13a8: a9 14     -         lda #y 
13aa: 8d 17 d0  -         sta DIS02
13ad: a9 fa     -         lda #width_lo 
13af: 8d 18 d0  -         sta DIS03
13b2: a9 00     -         lda #width_hi
13b4: 8d 19 d0  -         sta DIS04
13b7: a9 a0     -         lda #height
13b9: 8d 1a d0  -         sta DIS05
13bc: a9 37     -         lda #col 
13be: 8d 1b d0  -         sta DIS06
13c1: 20 04 e3  -         jsr GFX.fill_rect_
13c4: 68        -         pla 
13c5: a5 05     -         lda ALIEN_ANIM_FRAME_LO
13c7: 18        -         clc
13c8: 69 40     -         adc #%01000000
13ca: 85 05     -         sta ALIEN_ANIM_FRAME_LO
13cc: a5 06     -         lda ALIEN_ANIM_FRAME_HI
13ce: 69 00     -         adc #00
13d0: 29 03     -         and #3
13d2: 85 06     -         sta ALIEN_ANIM_FRAME_HI
13d4: 20 f5 10  -         jsr SpaceInvaders.animate_aliens
13d7: 20 17 e3  -         jsr GFX.draw_sprites_
13da: 48        -         pha
13db: a9 05     -         lda #xlo
13dd: 8d 15 d0  -         sta DIS00
13e0: a9 00     -         lda #xhi 
13e2: 8d 16 d0  -         sta DIS01
13e5: a9 b4     -         lda #y 
13e7: 8d 17 d0  -         sta DIS02
13ea: a9 fa     -         lda #width_lo 
13ec: 8d 18 d0  -         sta DIS03
13ef: a9 00     -         lda #width_hi
13f1: 8d 19 d0  -         sta DIS04
13f4: a9 3c     -         lda #height
13f6: 8d 1a d0  -         sta DIS05
13f9: a9 2a     -         lda #col 
13fb: 8d 1b d0  -         sta DIS06
13fe: 20 04 e3  -         jsr GFX.fill_rect_
1401: 68        -         pla 
1402: 48        -         pha
1403: a9 05     -         lda #xlo
1405: 8d 15 d0  -         sta DIS00
1408: a9 00     -         lda #xhi 
140a: 8d 16 d0  -         sta DIS01
140d: a9 14     -         lda #y 
140f: 8d 17 d0  -         sta DIS02
1412: a9 fa     -         lda #width_lo 
1414: 8d 18 d0  -         sta DIS03
1417: a9 00     -         lda #width_hi
1419: 8d 19 d0  -         sta DIS04
141c: a9 a0     -         lda #height
141e: 8d 1a d0  -         sta DIS05
1421: a9 17     -         lda #col 
1423: 8d 1b d0  -         sta DIS06
1426: 20 f1 e2  -         jsr GFX.draw_rect_
1429: 68        -         pla 
142a: a9 2b     -         lda #color
142c: 20 09 e2  -         jsr set_fg_color_
142f: a9 02     -         lda #xpos
1431: 20 d9 e1  -         jsr set_cursor_x_
1434: a9 1a     -         lda #ypos
1436: 20 f1 e1  -         jsr set_cursor_y_    
1439: a9 51     -         lda #<addr
143b: 85 e0     -         sta zpRegE0
143d: a9 f0     -         lda #>addr
143f: 85 e1     -         sta zpRegE1
1441: 20 7d e2  -         jsr print_text_
1444: a9 09     -         lda #xpos
1446: 20 d9 e1  -         jsr set_cursor_x_
1449: a9 17     -         lda #ypos
144b: 20 f1 e1  -         jsr set_cursor_y_    
144e: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
1451: 85 e0     -         sta zpRegE0
1453: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
1456: 85 e1     -         sta zpRegE1
1458: 20 3f e1  -         jsr Math.bcd_convert_word_
145b: a5 e4     -         lda zpRegE4
145d: 20 95 e2  -         jsr print_hex_
1460: a5 e3     -         lda zpRegE3
1462: 20 95 e2  -         jsr print_hex_
1465: a5 e2     -         lda zpRegE2
1467: 20 95 e2  -         jsr print_hex_
146a: a9 02     -         lda #xpos
146c: 20 d9 e1  -         jsr set_cursor_x_
146f: a9 17     -         lda #ypos
1471: 20 f1 e1  -         jsr set_cursor_y_    
1474: a9 58     -         lda #<addr
1476: 85 e0     -         sta zpRegE0
1478: a9 f0     -         lda #>addr
147a: 85 e1     -         sta zpRegE1
147c: 20 7d e2  -         jsr print_text_
147f: a9 02     -         lda #xpos
1481: 20 d9 e1  -         jsr set_cursor_x_
1484: a9 18     -         lda #ypos
1486: 20 f1 e1  -         jsr set_cursor_y_    
1489: a9 5e     -         lda #<addr
148b: 85 e0     -         sta zpRegE0
148d: a9 f0     -         lda #>addr
148f: 85 e1     -         sta zpRegE1
1491: 20 7d e2  -         jsr print_text_
1494: a9 09     -         lda #xpos
1496: 20 d9 e1  -         jsr set_cursor_x_
1499: a9 18     -         lda #ypos
149b: 20 f1 e1  -         jsr set_cursor_y_    
149e: a5 02     -         lda SCORE_LO       
14a0: 85 e0     -         sta zpRegE0
14a2: a5 03     -         lda SCORE_HI       
14a4: 85 e1     -         sta zpRegE1
14a6: 20 3f e1  -         jsr Math.bcd_convert_word_
14a9: a5 e4     -         lda zpRegE4
14ab: 20 95 e2  -         jsr print_hex_
14ae: a5 e3     -         lda zpRegE3
14b0: 20 95 e2  -         jsr print_hex_
14b3: a5 e2     -         lda zpRegE2
14b5: 20 95 e2  -         jsr print_hex_
14b8: ce 8e 13  -         dec shot_delay      // Shot delay countdown
14bb: d0 27     -         bne draw_bullets    // Still positive. No Shot
14bd: 20 71 e1  -         jsr Math.rand8           // New delay in frames ( 0..255)
14c0: 29 07     -         and #7
14c2: 69 07     -         adc #7              // Increase to at least 7 frames. 
14c4: 8d 8e 13  -         sta shot_delay      // Store new delay
14c7: 20 ba 1a  -         jsr find_next_invisible_bullet
14ca: 90 18     -         bcc draw_bullets    // We couln't find any free slot. So just draw.    
14cc: 20 71 e1  -         jsr Math.rand8  // Random value to accu
14cf: 29 0f     -         and #15    // One of the first sixteen aliens
14d1: a8        -         tay        // Using y as alien index
14d2: b9 37 17  -         lda SPRITE_XPOS,y
14d5: 18        -         clc
14d6: 69 08     -         adc #8
14d8: 9d 3b 1b  -         sta ALIEN_BULLETS_X,x
14db: b9 57 17  -         lda SPRITE_YPOS,y
14de: 18        -         clc
14df: 69 04     -         adc #4
14e1: 9d 40 1b  -         sta ALIEN_BULLETS_Y,x
14e4: 20 cf 1a  - draw_bullets:jsr update_alien_bullets
14e7: ad 37 17  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
14ea: c9 0a     -         cmp #10             // 10 is the minimum x position
14ec: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
14ee: a9 01     - left_underflow:lda #$01
14f0: 8d 3f 15  -         sta operation+1
14f3: 4c 02 15  -         jmp go_down 
14f6: ad 3e 17  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
14f9: c9 ef     -         cmp #$ef            // Max xpos = 239
14fb: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
14fd: a9 ff     - right_overflow:lda #$ff            // By adding -1, we move left.
14ff: 8d 3f 15  -         sta operation+1     // Write the new speed to the code (self modified)    
1502: ad 57 17  - go_down:lda SPRITE_YPOS
1505: c9 96     -         cmp #150
1507: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
1509: a0 07     - reset_ypos:ldy #7
150b: a9 20     -         lda #$20              // Start Y position
150d: 99 57 17  -         sta SPRITE_YPOS,y 
1510: 88        -         dey
1511: 10 fa     -         bpl !loop-
1513: a0 07     -         ldy #7
1515: a9 30     -         lda #$30              // Start Y position
1517: 99 5f 17  -         sta SPRITE_YPOS+8,y 
151a: 88        -         dey
151b: 10 fa     -         bpl !loop-
151d: a0 07     -         ldy #7
151f: a9 40     -         lda #$40              // Start Y position
1521: 99 67 17  -         sta SPRITE_YPOS+16,y 
1524: 88        -         dey
1525: 10 fa     -         bpl !loop-
1527: 4c 38 15  -         jmp move
152a: a0 17     - decrease:ldy #23             // Calculate position fpr 24 sprites
152c: b9 57 17  -         lda SPRITE_YPOS,y 
152f: 18        -         clc
1530: 69 04     -         adc #4
1532: 99 57 17  -         sta SPRITE_YPOS,y 
1535: 88        -         dey
1536: 10 f4     -         bpl !loop-
1538: a0 07     - move:   ldy #7               // Y is the sprite index. We have 8 sprites in a row 
153a: b9 37 17  -         lda SPRITE_XPOS,y    // Load current x position of the sprite   
153d: 18        -         clc
153e: 69 01     - operation:adc #1               // Add the speed
1540: 99 37 17  -         sta SPRITE_XPOS,y    // save the new xpos 
1543: 99 3f 17  -         sta SPRITE_XPOS+8,y  // Also for the second row
1546: 99 47 17  -         sta SPRITE_XPOS+16,y // Also for the second row
1549: 88        -         dey
154a: 10 ee     -         bpl !loop-
154c: ad 0d dc  - exit:   lda $dc0d            // Acknowledge the IRQ            
154f: 7a        -         ply
1550: fa        -         plx  
1551: 68        -         pla
1552: 40        -         rti
1553: 00        - COLOR_OFFSET:.byte 0
1554: 00 00 00 00                                      - WORST_TIME:.fill 4,0
1558: 00 00 00 00                                      - TS:     .fill 4,0
155c: a9 7f     - init:   lda #CIA_IRQ_MASK
155e: 8d 0d dc  -         sta REG_CIA_ICR
1561: 78        -         sei
1562: a9 73     -         lda #<label
1564: 8d fa ff  -         sta $fffa 
1567: a9 15     -         lda #>label
1569: 8d fb ff  -         sta $fffb
156c: 58        -         cli
156d: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
156f: 8d 0d dc  -         sta $dc0d
1572: 60        -         rts
1573: 48        - run_debug:pha 
1574: da        -         phx 
1575: 5a        -         phy
1576: 20 0e e4  -         jsr GFX.get_millis
1579: ad 15 d0  -         lda DIS00
157c: 8d 58 15  -         sta TS 
157f: ad 16 d0  -         lda DIS01
1582: 8d 59 15  -         sta TS+1
1585: ad 17 d0  -         lda DIS02
1588: 8d 5a 15  -         sta TS+2
158b: ad 18 d0  -         lda DIS03
158e: 8d 5b 15  -         sta TS+3
1591: 20 fb e3  -         jsr GFX.get_clock_cycle
1594: a2 03     -         ldx #3
1596: bd 15 d0  -         lda DIS00,x 
1599: 95 fc     -         sta zpRegFC,x
159b: ca        -         dex 
159c: 10 f8     -         bpl !ccl-
159e: a0 ef     -         ldy #239 // # of Lines
15a0: ae 53 15  -         ldx COLOR_OFFSET
15a3: a9 00     -         lda #0
15a5: 8d 15 d0  -         sta DIS00       // Xpos Low
15a8: 8d 16 d0  -         sta DIS01       // Xpos High
15ab: 98        -         tya 
15ac: 8d 17 d0  -         sta DIS02       // Ypos 
15af: a9 01     -         lda #1
15b1: 8d 18 d0  -         sta DIS03       // Width low
15b4: a9 40     -         lda #64
15b6: 8d 19 d0  -         sta DIS04       // Width high
15b9: 8a        -         txa 
15ba: 29 3f     -         and #%00111111  // Only 64 colors (0..63)
15bc: 8d 1a d0  -         sta DIS05       // Color
15bf: 20 b8 e2  -         jsr GFX.draw_horizonal_line_
15c2: e8        -         inx             // Next line next color
15c3: 88        -         dey             // Next line ypos
15c4: d0 dd     -         bne !loop-
15c6: ee 53 15  -         inc COLOR_OFFSET // Next frame we start with a higher index
15c9: 48        -         pha
15ca: a9 00     -         lda #xlo
15cc: 8d 15 d0  -         sta DIS00
15cf: a9 00     -         lda #xhi 
15d1: 8d 16 d0  -         sta DIS01
15d4: a9 00     -         lda #y 
15d6: 8d 17 d0  -         sta DIS02
15d9: a9 32     -         lda #width_lo 
15db: 8d 18 d0  -         sta DIS03
15de: a9 00     -         lda #width_hi
15e0: 8d 19 d0  -         sta DIS04
15e3: a9 f0     -         lda #height
15e5: 8d 1a d0  -         sta DIS05
15e8: a9 29     -         lda #col 
15ea: 8d 1b d0  -         sta DIS06
15ed: 20 04 e3  -         jsr GFX.fill_rect_
15f0: 68        -         pla 
15f1: a9 00     -         lda #xpos
15f3: 20 d9 e1  -         jsr set_cursor_x_
15f6: a9 00     -         lda #ypos
15f8: 20 f1 e1  -         jsr set_cursor_y_    
15fb: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
15fe: 85 e0     -         sta zpRegE0
1600: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
1603: 85 e1     -         sta zpRegE1
1605: 20 3f e1  -         jsr Math.bcd_convert_word_
1608: a5 e4     -         lda zpRegE4
160a: 20 95 e2  -         jsr print_hex_
160d: a5 e3     -         lda zpRegE3
160f: 20 95 e2  -         jsr print_hex_
1612: a5 e2     -         lda zpRegE2
1614: 20 95 e2  -         jsr print_hex_
1617: 20 fb e3  -         jsr GFX.get_clock_cycle
161a: 38        -         sec 
161b: ad 15 d0  -         lda DIS00
161e: e5 fc     -         sbc zpRegFC
1620: 85 fc     -         sta zpRegFC
1622: ad 16 d0  -         lda DIS01
1625: e5 fd     -         sbc zpRegFD 
1627: 85 fd     -         sta zpRegFD
1629: ad 17 d0  -         lda DIS02 
162c: e5 fe     -         sbc zpRegFE 
162e: 85 fe     -         sta zpRegFE 
1630: ad 18 d0  -         lda DIS03 
1633: e5 ff     -         sbc zpRegFF
1635: 85 ff     -         sta zpRegFF 
1637: ad 54 15  -         lda WORST_TIME
163a: 85 e0     -         sta zpRegE0
163c: ad 55 15  -         lda WORST_TIME+1
163f: 85 e1     -         sta zpRegE1
1641: ad 56 15  -         lda WORST_TIME+2
1644: 85 e2     -         sta zpRegE2
1646: ad 57 15  -         lda WORST_TIME+3
1649: 85 e3     -         sta zpRegE3
164b: a5 fc     -         lda zpRegFC
164d: 85 e4     -         sta zpRegE4
164f: a5 fd     -         lda zpRegFD
1651: 85 e5     -         sta zpRegE5
1653: a5 fe     -         lda zpRegFE
1655: 85 e6     -         sta zpRegE6
1657: a5 ff     -         lda zpRegFF
1659: 85 e5     -         sta zpRegE5
165b: 20 92 e1  -         jsr Math.compare_long
165e: 10 14     -         bpl print_delta  // No bigger  value. Just print.
1660: a5 fc     -         lda zpRegFC
1662: 8d 54 15  -         sta WORST_TIME 
1665: a5 fd     -         lda zpRegFD
1667: 8d 55 15  -         sta WORST_TIME+1 
166a: a5 fe     -         lda zpRegFE
166c: 8d 56 15  -         sta WORST_TIME+2 
166f: a5 ff     -         lda zpRegFF
1671: 8d 57 15  -         sta WORST_TIME+3 
1674: a9 00     - print_delta:lda #xpos
1676: 20 d9 e1  -         jsr set_cursor_x_
1679: a9 03     -         lda #ypos
167b: 20 f1 e1  -         jsr set_cursor_y_    
167e: ad 57 15  -         lda addr
1681: 20 95 e2  -         jsr print_hex_
1684: ad 56 15  -         lda addr
1687: 20 95 e2  -         jsr print_hex_
168a: ad 55 15  -         lda addr
168d: 20 95 e2  -         jsr print_hex_
1690: ad 54 15  -         lda addr
1693: 20 95 e2  -         jsr print_hex_
1696: 20 0e e4  -         jsr GFX.get_millis
1699: 38        -         sec 
169a: ad 15 d0  -         lda DIS00 
169d: ed 58 15  -         sbc TS
16a0: 8d 58 15  -         sta TS 
16a3: ad 16 d0  -         lda DIS01 
16a6: ed 59 15  -         sbc TS+1
16a9: 8d 59 15  -         sta TS+1
16ac: ad 17 d0  -         lda DIS02
16af: ed 5a 15  -         sbc TS+2
16b2: 8d 5a 15  -         sta TS+2 
16b5: ad 18 d0  -         lda DIS03  
16b8: ed 5b 15  -         sbc TS+3 
16bb: 8d 5b 15  -         sta TS+3 
16be: a9 00     -         lda #xpos
16c0: 20 d9 e1  -         jsr set_cursor_x_
16c3: a9 04     -         lda #ypos
16c5: 20 f1 e1  -         jsr set_cursor_y_    
16c8: ad 5b 15  -         lda addr
16cb: 20 95 e2  -         jsr print_hex_
16ce: ad 5a 15  -         lda addr
16d1: 20 95 e2  -         jsr print_hex_
16d4: ad 59 15  -         lda addr
16d7: 20 95 e2  -         jsr print_hex_
16da: ad 58 15  -         lda addr
16dd: 20 95 e2  -         jsr print_hex_
16e0: 20 21 e4  -         jsr GFX.get_frame_time
16e3: a9 00     -         lda #xpos
16e5: 20 d9 e1  -         jsr set_cursor_x_
16e8: a9 05     -         lda #ypos
16ea: 20 f1 e1  -         jsr set_cursor_y_    
16ed: ad 18 d0  -         lda addr
16f0: 20 95 e2  -         jsr print_hex_
16f3: ad 17 d0  -         lda addr
16f6: 20 95 e2  -         jsr print_hex_
16f9: ad 16 d0  -         lda addr
16fc: 20 95 e2  -         jsr print_hex_
16ff: ad 15 d0  -         lda addr
1702: 20 95 e2  -         jsr print_hex_
1705: ad 0d dc  -         lda REG_CIA_ICR
1708: 7a        -         ply 
1709: fa        -         plx 
170a: 68        -         pla
170b: 40        -         rti
170c: 59 4f 55 20 57 4f 4e                             - txt_you_won:.text "YOU WON"
1713: 00        -         .byte 0
1714: 60        - init:   rts
1715: 60        - init:   rts
1716: 60        - init:   rts
1717: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
171f: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
1727: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 16-23
172f: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1737: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
173f: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
1747: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 16-23
174f: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1757: 20 20 20 20 20 20 20 20                          - SPRITE_YPOS:.byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 00-07
175f: 30 30 30 30 30 30 30 30                          -         .byte $30, $30, $30, $30, $30, $30, $30, $30  // Sprite 08-15
1767: 40 40 40 40 40 40 40 40                          -         .byte $40, $40, $40, $40, $40, $40, $40, $40  // Sprite 16-23
176f: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1777: 1f 1f 1f 1f 1f 1f 1f 1f                          - SPRITE_COLOR:.byte $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f  // Sprite 00-07
177f: 23 23 23 23 23 23 23 23                          -         .byte $23, $23, $23, $23, $23, $23, $23, $23  // Sprite 08-15
1787: 2c 2c 2c 2c 2c 2c 2c 2c                          -         .byte $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2c  // Sprite 16-23
178f: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1797: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
179f: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
17a7: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 16-23
17af: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
17b7: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
17bf: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
17c7: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 16-23
17cf: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
17d7: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
17e7: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
17f7: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
1807: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
1817: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_LO:.fill 4, 0
181b: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_HI:.fill 4, 0
181f: 00 00 00 00                                      - ALIEN_B_SPRITE_ANIMATION_LO:.fill 4, 0
1823: 00 00 00 00                                      - ALIEN_B_SPRITE_ANIMATION_HI:.fill 4, 0
1827: 00 00 00 00                                      - ALIEN_C_SPRITE_ANIMATION_LO:.fill 4, 0
182b: 00 00 00 00                                      - ALIEN_C_SPRITE_ANIMATION_HI:.fill 4, 0
182f: 00 00 00 00                                      - ALIEN_D_SPRITE_ANIMATION_LO:.fill 4, 0
1833: 00 00 00 00                                      - ALIEN_D_SPRITE_ANIMATION_HI:.fill 4, 0
1837: a2 00     - initialize_sprite_definition_block:ldx #index
1839: a9 64     -         lda #<address
183b: 9d d7 17  -         sta SPRITE_DATA_LO, x
183e: a9 11     -         lda #>address
1840: 9d f7 17  -         sta SPRITE_DATA_HI, x                
1843: a2 08     -         ldx #index
1845: a9 94     -         lda #<address
1847: 9d d7 17  -         sta SPRITE_DATA_LO, x
184a: a9 11     -         lda #>address
184c: 9d f7 17  -         sta SPRITE_DATA_HI, x                
184f: a2 10     -         ldx #index
1851: a9 c4     -         lda #<address
1853: 9d d7 17  -         sta SPRITE_DATA_LO, x
1856: a9 11     -         lda #>address
1858: 9d f7 17  -         sta SPRITE_DATA_HI, x                
185b: a2 01     -         ldx #index
185d: a9 64     -         lda #<address
185f: 9d d7 17  -         sta SPRITE_DATA_LO, x
1862: a9 11     -         lda #>address
1864: 9d f7 17  -         sta SPRITE_DATA_HI, x                
1867: a2 09     -         ldx #index
1869: a9 94     -         lda #<address
186b: 9d d7 17  -         sta SPRITE_DATA_LO, x
186e: a9 11     -         lda #>address
1870: 9d f7 17  -         sta SPRITE_DATA_HI, x                
1873: a2 11     -         ldx #index
1875: a9 c4     -         lda #<address
1877: 9d d7 17  -         sta SPRITE_DATA_LO, x
187a: a9 11     -         lda #>address
187c: 9d f7 17  -         sta SPRITE_DATA_HI, x                
187f: a2 02     -         ldx #index
1881: a9 64     -         lda #<address
1883: 9d d7 17  -         sta SPRITE_DATA_LO, x
1886: a9 11     -         lda #>address
1888: 9d f7 17  -         sta SPRITE_DATA_HI, x                
188b: a2 0a     -         ldx #index
188d: a9 94     -         lda #<address
188f: 9d d7 17  -         sta SPRITE_DATA_LO, x
1892: a9 11     -         lda #>address
1894: 9d f7 17  -         sta SPRITE_DATA_HI, x                
1897: a2 12     -         ldx #index
1899: a9 c4     -         lda #<address
189b: 9d d7 17  -         sta SPRITE_DATA_LO, x
189e: a9 11     -         lda #>address
18a0: 9d f7 17  -         sta SPRITE_DATA_HI, x                
18a3: a2 03     -         ldx #index
18a5: a9 64     -         lda #<address
18a7: 9d d7 17  -         sta SPRITE_DATA_LO, x
18aa: a9 11     -         lda #>address
18ac: 9d f7 17  -         sta SPRITE_DATA_HI, x                
18af: a2 0b     -         ldx #index
18b1: a9 94     -         lda #<address
18b3: 9d d7 17  -         sta SPRITE_DATA_LO, x
18b6: a9 11     -         lda #>address
18b8: 9d f7 17  -         sta SPRITE_DATA_HI, x                
18bb: a2 13     -         ldx #index
18bd: a9 c4     -         lda #<address
18bf: 9d d7 17  -         sta SPRITE_DATA_LO, x
18c2: a9 11     -         lda #>address
18c4: 9d f7 17  -         sta SPRITE_DATA_HI, x                
18c7: a2 04     -         ldx #index
18c9: a9 64     -         lda #<address
18cb: 9d d7 17  -         sta SPRITE_DATA_LO, x
18ce: a9 11     -         lda #>address
18d0: 9d f7 17  -         sta SPRITE_DATA_HI, x                
18d3: a2 0c     -         ldx #index
18d5: a9 94     -         lda #<address
18d7: 9d d7 17  -         sta SPRITE_DATA_LO, x
18da: a9 11     -         lda #>address
18dc: 9d f7 17  -         sta SPRITE_DATA_HI, x                
18df: a2 14     -         ldx #index
18e1: a9 c4     -         lda #<address
18e3: 9d d7 17  -         sta SPRITE_DATA_LO, x
18e6: a9 11     -         lda #>address
18e8: 9d f7 17  -         sta SPRITE_DATA_HI, x                
18eb: a2 05     -         ldx #index
18ed: a9 64     -         lda #<address
18ef: 9d d7 17  -         sta SPRITE_DATA_LO, x
18f2: a9 11     -         lda #>address
18f4: 9d f7 17  -         sta SPRITE_DATA_HI, x                
18f7: a2 0d     -         ldx #index
18f9: a9 94     -         lda #<address
18fb: 9d d7 17  -         sta SPRITE_DATA_LO, x
18fe: a9 11     -         lda #>address
1900: 9d f7 17  -         sta SPRITE_DATA_HI, x                
1903: a2 15     -         ldx #index
1905: a9 c4     -         lda #<address
1907: 9d d7 17  -         sta SPRITE_DATA_LO, x
190a: a9 11     -         lda #>address
190c: 9d f7 17  -         sta SPRITE_DATA_HI, x                
190f: a2 06     -         ldx #index
1911: a9 64     -         lda #<address
1913: 9d d7 17  -         sta SPRITE_DATA_LO, x
1916: a9 11     -         lda #>address
1918: 9d f7 17  -         sta SPRITE_DATA_HI, x                
191b: a2 0e     -         ldx #index
191d: a9 94     -         lda #<address
191f: 9d d7 17  -         sta SPRITE_DATA_LO, x
1922: a9 11     -         lda #>address
1924: 9d f7 17  -         sta SPRITE_DATA_HI, x                
1927: a2 16     -         ldx #index
1929: a9 c4     -         lda #<address
192b: 9d d7 17  -         sta SPRITE_DATA_LO, x
192e: a9 11     -         lda #>address
1930: 9d f7 17  -         sta SPRITE_DATA_HI, x                
1933: a2 07     -         ldx #index
1935: a9 64     -         lda #<address
1937: 9d d7 17  -         sta SPRITE_DATA_LO, x
193a: a9 11     -         lda #>address
193c: 9d f7 17  -         sta SPRITE_DATA_HI, x                
193f: a2 0f     -         ldx #index
1941: a9 94     -         lda #<address
1943: 9d d7 17  -         sta SPRITE_DATA_LO, x
1946: a9 11     -         lda #>address
1948: 9d f7 17  -         sta SPRITE_DATA_HI, x                
194b: a2 17     -         ldx #index
194d: a9 c4     -         lda #<address
194f: 9d d7 17  -         sta SPRITE_DATA_LO, x
1952: a9 11     -         lda #>address
1954: 9d f7 17  -         sta SPRITE_DATA_HI, x                
1957: a2 00     -         ldx #index
1959: bd 17 17  -         lda SPRITE_FLAGS, x
195c: 05 c0     -         ora SPRITE_ENABLE_FLAG
195e: 9d 17 17  -         sta SPRITE_FLAGS, x
1961: a2 01     -         ldx #index
1963: bd 17 17  -         lda SPRITE_FLAGS, x
1966: 05 c0     -         ora SPRITE_ENABLE_FLAG
1968: 9d 17 17  -         sta SPRITE_FLAGS, x
196b: a2 02     -         ldx #index
196d: bd 17 17  -         lda SPRITE_FLAGS, x
1970: 05 c0     -         ora SPRITE_ENABLE_FLAG
1972: 9d 17 17  -         sta SPRITE_FLAGS, x
1975: a2 03     -         ldx #index
1977: bd 17 17  -         lda SPRITE_FLAGS, x
197a: 05 c0     -         ora SPRITE_ENABLE_FLAG
197c: 9d 17 17  -         sta SPRITE_FLAGS, x
197f: a2 04     -         ldx #index
1981: bd 17 17  -         lda SPRITE_FLAGS, x
1984: 05 c0     -         ora SPRITE_ENABLE_FLAG
1986: 9d 17 17  -         sta SPRITE_FLAGS, x
1989: a2 05     -         ldx #index
198b: bd 17 17  -         lda SPRITE_FLAGS, x
198e: 05 c0     -         ora SPRITE_ENABLE_FLAG
1990: 9d 17 17  -         sta SPRITE_FLAGS, x
1993: a2 06     -         ldx #index
1995: bd 17 17  -         lda SPRITE_FLAGS, x
1998: 05 c0     -         ora SPRITE_ENABLE_FLAG
199a: 9d 17 17  -         sta SPRITE_FLAGS, x
199d: a2 07     -         ldx #index
199f: bd 17 17  -         lda SPRITE_FLAGS, x
19a2: 05 c0     -         ora SPRITE_ENABLE_FLAG
19a4: 9d 17 17  -         sta SPRITE_FLAGS, x
19a7: a2 08     -         ldx #index
19a9: bd 17 17  -         lda SPRITE_FLAGS, x
19ac: 05 c0     -         ora SPRITE_ENABLE_FLAG
19ae: 9d 17 17  -         sta SPRITE_FLAGS, x
19b1: a2 09     -         ldx #index
19b3: bd 17 17  -         lda SPRITE_FLAGS, x
19b6: 05 c0     -         ora SPRITE_ENABLE_FLAG
19b8: 9d 17 17  -         sta SPRITE_FLAGS, x
19bb: a2 0a     -         ldx #index
19bd: bd 17 17  -         lda SPRITE_FLAGS, x
19c0: 05 c0     -         ora SPRITE_ENABLE_FLAG
19c2: 9d 17 17  -         sta SPRITE_FLAGS, x
19c5: a2 0b     -         ldx #index
19c7: bd 17 17  -         lda SPRITE_FLAGS, x
19ca: 05 c0     -         ora SPRITE_ENABLE_FLAG
19cc: 9d 17 17  -         sta SPRITE_FLAGS, x
19cf: a2 0c     -         ldx #index
19d1: bd 17 17  -         lda SPRITE_FLAGS, x
19d4: 05 c0     -         ora SPRITE_ENABLE_FLAG
19d6: 9d 17 17  -         sta SPRITE_FLAGS, x
19d9: a2 0d     -         ldx #index
19db: bd 17 17  -         lda SPRITE_FLAGS, x
19de: 05 c0     -         ora SPRITE_ENABLE_FLAG
19e0: 9d 17 17  -         sta SPRITE_FLAGS, x
19e3: a2 0e     -         ldx #index
19e5: bd 17 17  -         lda SPRITE_FLAGS, x
19e8: 05 c0     -         ora SPRITE_ENABLE_FLAG
19ea: 9d 17 17  -         sta SPRITE_FLAGS, x
19ed: a2 0f     -         ldx #index
19ef: bd 17 17  -         lda SPRITE_FLAGS, x
19f2: 05 c0     -         ora SPRITE_ENABLE_FLAG
19f4: 9d 17 17  -         sta SPRITE_FLAGS, x
19f7: a2 10     -         ldx #index
19f9: bd 17 17  -         lda SPRITE_FLAGS, x
19fc: 05 c0     -         ora SPRITE_ENABLE_FLAG
19fe: 9d 17 17  -         sta SPRITE_FLAGS, x
1a01: a2 11     -         ldx #index
1a03: bd 17 17  -         lda SPRITE_FLAGS, x
1a06: 05 c0     -         ora SPRITE_ENABLE_FLAG
1a08: 9d 17 17  -         sta SPRITE_FLAGS, x
1a0b: a2 12     -         ldx #index
1a0d: bd 17 17  -         lda SPRITE_FLAGS, x
1a10: 05 c0     -         ora SPRITE_ENABLE_FLAG
1a12: 9d 17 17  -         sta SPRITE_FLAGS, x
1a15: a2 13     -         ldx #index
1a17: bd 17 17  -         lda SPRITE_FLAGS, x
1a1a: 05 c0     -         ora SPRITE_ENABLE_FLAG
1a1c: 9d 17 17  -         sta SPRITE_FLAGS, x
1a1f: a2 14     -         ldx #index
1a21: bd 17 17  -         lda SPRITE_FLAGS, x
1a24: 05 c0     -         ora SPRITE_ENABLE_FLAG
1a26: 9d 17 17  -         sta SPRITE_FLAGS, x
1a29: a2 15     -         ldx #index
1a2b: bd 17 17  -         lda SPRITE_FLAGS, x
1a2e: 05 c0     -         ora SPRITE_ENABLE_FLAG
1a30: 9d 17 17  -         sta SPRITE_FLAGS, x
1a33: a2 16     -         ldx #index
1a35: bd 17 17  -         lda SPRITE_FLAGS, x
1a38: 05 c0     -         ora SPRITE_ENABLE_FLAG
1a3a: 9d 17 17  -         sta SPRITE_FLAGS, x
1a3d: a2 17     -         ldx #index
1a3f: bd 17 17  -         lda SPRITE_FLAGS, x
1a42: 05 c0     -         ora SPRITE_ENABLE_FLAG
1a44: 9d 17 17  -         sta SPRITE_FLAGS, x
1a47: a9 17     -         lda #<data
1a49: 8d 15 d0  -         sta DIS00
1a4c: a9 17     -         lda #>data
1a4e: 8d 16 d0  -         sta DIS01
1a51: a9 20     -         lda #count                 // Set number of sprites
1a53: 8d 17 d0  -         sta DIS02
1a56: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
1a58: 8d 14 d0  -         sta DISCMD              //                                          
1a5b: ad 13 d0  -         lda DISCR               // Load Display command register
1a5e: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
1a60: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
1a63: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
1a66: 30 fb     -         bmi !wait-              // No! Let's wait
1a68: 60        -         rts
1a69: a9 64     - init_alien_animation:lda #<sprite
1a6b: 8d 17 18  -         sta target+frame
1a6e: a9 11     -         lda #>sprite
1a70: 8d 1b 18  -         sta target+frame+4
1a73: a9 74     -         lda #<sprite
1a75: 8d 18 18  -         sta target+frame
1a78: a9 11     -         lda #>sprite
1a7a: 8d 1c 18  -         sta target+frame+4
1a7d: a9 64     -         lda #<sprite
1a7f: 8d 19 18  -         sta target+frame
1a82: a9 11     -         lda #>sprite
1a84: 8d 1d 18  -         sta target+frame+4
1a87: a9 84     -         lda #<sprite
1a89: 8d 1a 18  -         sta target+frame
1a8c: a9 11     -         lda #>sprite
1a8e: 8d 1e 18  -         sta target+frame+4
1a91: a9 94     -         lda #<sprite
1a93: 8d 1f 18  -         sta target+frame
1a96: a9 11     -         lda #>sprite
1a98: 8d 23 18  -         sta target+frame+4
1a9b: a9 a4     -         lda #<sprite
1a9d: 8d 20 18  -         sta target+frame
1aa0: a9 11     -         lda #>sprite
1aa2: 8d 24 18  -         sta target+frame+4
1aa5: a9 94     -         lda #<sprite
1aa7: 8d 21 18  -         sta target+frame
1aaa: a9 11     -         lda #>sprite
1aac: 8d 25 18  -         sta target+frame+4
1aaf: a9 b4     -         lda #<sprite
1ab1: 8d 22 18  -         sta target+frame
1ab4: a9 11     -         lda #>sprite
1ab6: 8d 26 18  -         sta target+frame+4
1ab9: 60        -         rts
1aba: a2 04     - find_next_invisible_bullet:ldx #(BULLET_COUNT-1)
1abc: bd 36 1b  -         lda ALIEN_BULLETS_STAT,x 
1abf: 30 09     -         bmi !next+ // Visible. Next.
1ac1: 09 80     -         ora #BULLET_ENABLE_FLAG
1ac3: 9d 36 1b  -         sta ALIEN_BULLETS_STAT,x
1ac6: 38        -         sec // Set carry flag (inicating we found a slot)
1ac7: 4c ce 1a  -         jmp !end+
1aca: ca        -         dex
1acb: 10 ef     -         bpl !loop-
1acd: 18        -         clc // Clear carry to indicate, we didn't found a free slot.
1ace: 60        -         rts
1acf: 20 d9 1a  - update_alien_bullets:jsr move_bullets
1ad2: 20 ee 1a  -         jsr check_bullets
1ad5: 20 08 1b  -         jsr draw_bullets
1ad8: 60        -         rts
1ad9: a2 05     - move_bullets:ldx #(BULLET_COUNT)
1adb: bd 36 1b  -         lda ALIEN_BULLETS_STAT,x
1ade: 10 0a     -         bpl !next+
1ae0: bd 40 1b  -         lda ALIEN_BULLETS_Y,x 
1ae3: 18        -         clc 
1ae4: 7d 45 1b  -         adc ALIEN_BULLETS_SPEED,x
1ae7: 9d 40 1b  -         sta ALIEN_BULLETS_Y,x
1aea: ca        -         dex
1aeb: 10 ee     -         bpl !loop- 
1aed: 60        -         rts
1aee: a2 04     - check_bullets:ldx #(BULLET_COUNT-1)
1af0: bd 36 1b  -         lda ALIEN_BULLETS_STAT,x
1af3: 10 0f     -         bpl !next+
1af5: bd 40 1b  -         lda ALIEN_BULLETS_Y,x
1af8: c9 aa     -         cmp #BULLET_MAX_HEIGHT    // if ypos > BULLET_MAX_HEIGHT hide bullet 
1afa: 30 08     -         bmi !next+
1afc: bd 36 1b  - hide_bullet:lda ALIEN_BULLETS_STAT,x 
1aff: 29 7f     -         and #(~BULLET_ENABLE_FLAG)
1b01: 9d 36 1b  -         sta ALIEN_BULLETS_STAT,x
1b04: ca        -         dex
1b05: 10 e9     -         bpl !loop-
1b07: 60        -         rts
1b08: a9 00     - draw_bullets:lda #0
1b0a: 8d 16 d0  -         sta DIS01                   // xpos high
1b0d: a9 04     -         lda #BULLET_LENGTH          // Length Low
1b0f: 8d 18 d0  -         sta DIS03
1b12: a9 00     -         lda #0                      // Length High
1b14: 8d 19 d0  -         sta DIS04   
1b17: a9 17     -         lda #BULLET_COLOR           // Color
1b19: 8d 1a d0  -         sta DIS05
1b1c: a2 04     -         ldx #(BULLET_COUNT-1)
1b1e: bd 36 1b  -         lda ALIEN_BULLETS_STAT,x 
1b21: 10 0f     -         bpl !next+                  // If bit 7 is set (also negative), the
1b23: bd 3b 1b  -         lda ALIEN_BULLETS_X,x       // X-Pos low
1b26: 8d 15 d0  -         sta DIS00
1b29: bd 40 1b  -         lda ALIEN_BULLETS_Y,x 
1b2c: 8d 17 d0  -         sta DIS02                   // ypos 
1b2f: 20 cb e2  -         jsr GFX.draw_vertical_line_
1b32: ca        -         dex 
1b33: 10 e9     -         bpl !loop-
1b35: 60        -         rts
1b36: 04 04 04 04 04                                   - ALIEN_BULLETS_STAT:.fill BULLET_COUNT, $04  // Bit 0: High Bit Xpos: 1 = Xpos > 255
1b3b: 00 00 00 00 00                                   - ALIEN_BULLETS_X:.fill BULLET_COUNT, $00  // xpos. If xpos > 255; stat bit 6 = 1
1b40: 20 20 20 20 20                                   - ALIEN_BULLETS_Y:.fill BULLET_COUNT, $20  // ypos of the top
1b45: 02 02 02 02 02                                   - ALIEN_BULLETS_SPEED:.fill BULLET_COUNT, $02

[Kernel Routines Entry Points]
e000: 4c cd e1  - get_key:jmp get_key_
e003: 4c d9 e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c f1 e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 65 e2  - print_char:jmp print_char_
e00c: 4c 2a e3  - draw_pixel:jmp GFX.draw_pixel_
e00f: 4c d5 e3  - draw_line:jmp GFX.draw_line_
e012: 4c b8 e2  - draw_hline:jmp GFX.draw_horizonal_line_ 
e015: 4c cb e2  - draw_vline:jmp GFX.draw_vertical_line_
e018: 4c f1 e2  - draw_rect:jmp GFX.draw_rect_
e01b: 4c 04 e3  - fill_rect:jmp GFX.fill_rect_
e01e: 4c 50 e3  - draw_circle:jmp GFX.draw_circle_
e021: 4c 63 e3  - fill_circle:jmp GFX.fill_circle_
e024: 4c 76 e3  - draw_triangle:jmp GFX.draw_triangle_
e027: 4c 89 e3  - fill_triangle:jmp GFX.fill_triangle_
e02a: 4c 9c e3  - draw_round_rect:jmp GFX.draw_round_rect_
e02d: 4c af e3  - fill_round_rect:jmp GFX.fill_round_rect_
e030: 4c e8 e3  - draw_char:jmp GFX.draw_char_

[Kernel Routines]
e100: 00 00 01 00 00 02 00 00 04 00 00 08              - BCD_LOOKUP_TABLE:.byte    $00, $00, $01, $00, $00, $02, $00, $00, $04, $00, $00, $08
e10c: 00 00 16 00 00 32 00 00 64 00 01 28              -         .byte    $00, $00, $16, $00, $00, $32, $00, $00, $64, $00, $01, $28
e118: 00 02 56 00 05 12 00 10 24 00 20 48              -         .byte    $00, $02, $56, $00, $05, $12, $00, $10, $24, $00, $20, $48
e124: 00 40 96 00 81 92 01 63 84 03 27 68              -         .byte    $00, $40, $96, $00, $81, $92, $01, $63, $84, $03, $27, $68
e130: 48        - byte_to_hex:pha                     // Save value to stack.
e131: 29 0f     -         and #%00001111
e133: 85 e0     -         sta zpRegE0             // store the lower nibble
e135: 68        -         pla                     // Load the original value
e136: 48        -         pha                     // and save it again
e137: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e138: 4a        -         lsr
e139: 4a        -         lsr
e13a: 4a        -         lsr
e13b: 85 e1     -         sta zpRegE1             // store the higher nibble
e13d: 68        -         pla                     // restore the accu
e13e: 60        -         rts
e13f: f8        - bcd_convert_word_:sed
e140: da        -         phx
e141: 48        -         pha
e142: a9 00     -         lda #0
e144: 85 e2     -         sta zpRegE2
e146: 85 e3     -         sta zpRegE3
e148: 85 e4     -         sta zpRegE4
e14a: a2 2d     -         ldx #$2d
e14c: 06 e0     -         asl zpRegE0 
e14e: 26 e1     -         rol zpRegE1
e150: 90 16     -         bcc htd1
e152: a5 e2     -         lda zpRegE2
e154: 18        -         clc 
e155: 7d 02 e1  -         adc BCD_LOOKUP_TABLE+2,x
e158: 85 e2     -         sta zpRegE2
e15a: a5 e3     -         lda zpRegE3
e15c: 7d 01 e1  -         adc BCD_LOOKUP_TABLE+1,x
e15f: 85 e3     -         sta zpRegE3
e161: a5 e4     -         lda zpRegE4
e163: 7d 00 e1  -         adc BCD_LOOKUP_TABLE,x
e166: 85 e4     -         sta zpRegE4
e168: ca        - htd1:   dex
e169: ca        -         dex 
e16a: ca        -         dex 
e16b: 10 df     -         bpl !loop- 
e16d: d8        -         cld
e16e: 68        -         pla
e16f: fa        -         plx 
e170: 60        -         rts
e171: a9 1f     - rand8,rand8b1-1:lda rand8b1:#31
e173: 0a        -         asl
e174: 49 35     - rand8a1-1:eor rand8a1:#53
e176: 8d 72 e1  -         sta rand8b1
e179: 6d 75 e1  -         adc rand8a1
e17c: 8d 75 e1  -         sta rand8a1
e17f: 60        -         rts
e180: 48        - set_seed:pha
e181: 29 d9     -         and #217
e183: 18        -         clc
e184: 69 0f     -         adc #<21263
e186: 8d 75 e1  -         sta rand8a1
e189: 68        -         pla
e18a: 29 26     -         and #255-217
e18c: 69 53     -         adc #>21263
e18e: 8d 72 e1  -         sta rand8b1
e191: 60        -         rts
e192: a5 e3     - compare_long:lda zpRegE3
e194: c5 e7     -         cmp zpRegE7
e196: d0 10     -         bne exit 
e198: a5 e2     -         lda zpRegE2
e19a: c5 e6     -         cmp zpRegE6
e19c: d0 0a     -         bne exit 
e19e: a5 e1     -         lda zpRegE1
e1a0: c5 e5     -         cmp zpRegE5
e1a2: d0 04     -         bne exit 
e1a4: a5 e0     -         lda zpRegE0
e1a6: c5 e4     -         cmp zpRegE4
e1a8: 60        - exit:   rts
e1a9: a5 e0     - convert565:lda zpRegE0             // red value
e1ab: 0a        -         asl                     // shift three to the left as we
e1ac: 0a        -         asl                     // need to move the lower 5 bits of red
e1ad: 0a        -         asl                     // to the bits 7-5
e1ae: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e1b0: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e1b2: 4a        -         lsr                     // lower bits of the output highbyte
e1b3: 4a        -         lsr
e1b4: 4a        -         lsr
e1b5: 29 07     -         and #%00000111          // Only the lower three bits.
e1b7: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e1b9: 85 e0     -         sta zpRegE0             // Store the final high byte
e1bb: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e1bd: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e1be: 0a        -         asl                     // it with zeros
e1bf: 0a        -         asl
e1c0: 0a        -         asl
e1c1: 0a        -         asl
e1c2: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e1c4: a5 e2     -         lda zpRegE2             // Load blue
e1c6: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e1c8: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e1ca: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e1cc: 60        -         rts
e1cd: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e1d0: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e1d2: 29 70     -         and #KEY_MOD_MASK
e1d4: aa        -         tax                     // Save modifiers
e1d5: ad 10 d0  -         lda KBD                 // Current key code to accu
e1d8: 60        -         rts                     // Return
e1d9: 48        - set_cursor_x_:pha                     // Save accu
e1da: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1dd: a9 03     -         lda #CMD_SET_CURSOR_X
e1df: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e1e2: ad 13 d0  -         lda DISCR
e1e5: 09 80     -         ora #$80
e1e7: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1ea: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1ed: 30 fb     -         bmi !wait-              // No! Let's wait
e1ef: 68        -         pla                     // Restore input parameter in accu
e1f0: 60        -         rts                     // Return
e1f1: 48        - set_cursor_y_:pha                     // Save accu
e1f2: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1f5: a9 04     -         lda #CMD_SET_CURSOR_Y
e1f7: 8d 14 d0  -         sta DISCMD
e1fa: ad 13 d0  -         lda DISCR
e1fd: 09 80     -         ora #$80
e1ff: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e202: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e205: 30 fb     -         bmi !wait-              // No! Let's wait
e207: 68        -         pla                     // Restore input parameter in accu
e208: 60        -         rts                     // Return
e209: 48        - set_fg_color_:pha                     // Save accu
e20a: 8d 15 d0  -         sta DIS00              // Save the color to the 
e20d: a9 07     -         lda #CMD_SET_FG_COLOR
e20f: 8d 14 d0  -         sta DISCMD
e212: ad 13 d0  -         lda DISCR
e215: 09 80     -         ora #$80
e217: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e21a: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e21d: 30 fb     -         bmi !wait-              // No! Let's wait
e21f: 68        -         pla                     // Restore input parameter in accu
e220: 60        -         rts                     // Return
e221: 48        - set_bg_color_:pha                     // Save accu
e222: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e225: a9 08     -         lda #CMD_SET_BG_COLOR
e227: 8d 14 d0  -         sta DISCMD
e22a: ad 13 d0  -         lda DISCR
e22d: 09 80     -         ora #$80
e22f: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e232: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e235: 30 fb     -         bmi !wait-              // No! Let's wait
e237: 68        -         pla                     // Restore input parameter in accu
e238: 60        -         rts                     // Return
e239: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e23b: 8d 14 d0  -         sta DISCMD
e23e: ad 13 d0  -         lda DISCR
e241: 09 80     -         ora #$80
e243: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e246: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e249: 30 fb     -         bmi !wait-              // No! Let's wait
e24b: ad 15 d0  -         lda DIS00
e24e: 60        -         rts                     // Return
e24f: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e251: 8d 14 d0  -         sta DISCMD
e254: ad 13 d0  -         lda DISCR
e257: 09 80     -         ora #$80
e259: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e25c: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e25f: 30 fb     -         bmi !wait-              // No! Let's wait
e261: ad 15 d0  -         lda DIS00
e264: 60        -         rts                     // Return
e265: 48        - print_char_:pha                     // Save accu
e266: 8d 15 d0  -         sta DIS00              // Save the char to the 
e269: a9 0d     -         lda #CMD_WRITE_CHAR
e26b: 8d 14 d0  -         sta DISCMD
e26e: ad 13 d0  -         lda DISCR
e271: 09 80     -         ora #$80
e273: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e276: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e279: 30 fb     -         bmi !wait-              // No! Let's wait
e27b: 68        -         pla                     // Restore input parameter in accu
e27c: 60        -         rts                     // Return
e27d: 8c 91 e2  - print_text_:sty (!end+)+1       // Save y register
e280: 8d 93 e2  -         sta (!end+)+3
e283: a0 00     -         ldy #0              // Index for the char within the string
e285: b1 e0     -         lda (zpRegE0),y     // load character
e287: f0 07     -         beq !end+
e289: 20 65 e2  -         jsr print_char_
e28c: c8        -         iny
e28d: 4c 85 e2  -         jmp !next-
e290: a0 00     -         ldy #0
e292: a9 00     -         lda #0
e294: 60        -         rts
e295: 48        - print_hex_:pha
e296: a9 00     -         lda #<hex_chars
e298: 85 e0     -         sta zpRegE0
e29a: a9 f0     -         lda #>hex_chars
e29c: 85 e1     -         sta zpRegE1
e29e: 68        -         pla
e29f: 48        -         pha
e2a0: 4a        -         lsr
e2a1: 4a        -         lsr
e2a2: 4a        -         lsr
e2a3: 4a        -         lsr
e2a4: 29 0f     -         and #$0f
e2a6: a8        -         tay
e2a7: b1 e0     -         lda (zpRegE0),y
e2a9: 20 65 e2  -         jsr print_char_
e2ac: 68        -         pla
e2ad: 48        -         pha
e2ae: 29 0f     -         and #$0f
e2b0: a8        -         tay
e2b1: b1 e0     -         lda (zpRegE0),y
e2b3: 20 65 e2  -         jsr print_char_
e2b6: 68        -         pla
e2b7: 60        -         rts
e2b8: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e2ba: 8d 14 d0  -         sta DISCMD
e2bd: ad 13 d0  -         lda DISCR
e2c0: 09 80     -         ora #$80
e2c2: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2c5: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2c8: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2ca: 60        -         rts
e2cb: a9 16     - draw_vertical_line_:lda #CMD_DRAW_VLINE
e2cd: 8d 14 d0  -         sta DISCMD
e2d0: ad 13 d0  -         lda DISCR
e2d3: 09 80     -         ora #$80
e2d5: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2d8: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2db: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2dd: 60        -         rts
e2de: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e2e0: 8d 14 d0  -         sta DISCMD
e2e3: ad 13 d0  -         lda DISCR
e2e6: 09 80     -         ora #$80
e2e8: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2eb: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2ee: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2f0: 60        -         rts
e2f1: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e2f3: 8d 14 d0  -         sta DISCMD
e2f6: ad 13 d0  -         lda DISCR
e2f9: 09 80     -         ora #$80
e2fb: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2fe: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e301: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e303: 60        -         rts
e304: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e306: 8d 14 d0  -         sta DISCMD
e309: ad 13 d0  -         lda DISCR
e30c: 09 80     -         ora #$80
e30e: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e311: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e314: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e316: 60        -         rts
e317: a9 1e     - draw_sprites_:lda #CMD_DrawSprites
e319: 8d 14 d0  -         sta DISCMD
e31c: ad 13 d0  -         lda DISCR
e31f: 09 80     -         ora #$80
e321: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e324: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e327: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e329: 60        -         rts
e32a: a9 20     - draw_pixel_:lda #CMD_DRAW_PIXEL
e32c: 8d 14 d0  -         sta DISCMD
e32f: ad 13 d0  -         lda DISCR
e332: 09 80     -         ora #$80
e334: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e337: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e33a: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e33c: 60        -         rts
e33d: a9 1f     - draw_bitmap_:lda #CMD_DRAW_BITMAP
e33f: 8d 14 d0  -         sta DISCMD
e342: ad 13 d0  -         lda DISCR
e345: 09 80     -         ora #$80
e347: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e34a: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e34d: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e34f: 60        -         rts
e350: a9 1c     - draw_circle_:lda #CMD_DRAW_CIRCLE
e352: 8d 14 d0  -         sta DISCMD
e355: ad 13 d0  -         lda DISCR
e358: 09 80     -         ora #$80
e35a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e35d: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e360: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e362: 60        -         rts
e363: a9 1d     - fill_circle_:lda #CMD_FILL_CIRCLE
e365: 8d 14 d0  -         sta DISCMD
e368: ad 13 d0  -         lda DISCR
e36b: 09 80     -         ora #$80
e36d: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e370: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e373: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e375: 60        -         rts
e376: a9 21     - draw_triangle_:lda #CMD_DRAW_TRIANGLE
e378: 8d 14 d0  -         sta DISCMD
e37b: ad 13 d0  -         lda DISCR
e37e: 09 80     -         ora #$80
e380: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e383: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e386: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e388: 60        -         rts
e389: a9 22     - fill_triangle_:lda #CMD_FILL_TRIANGLE
e38b: 8d 14 d0  -         sta DISCMD
e38e: ad 13 d0  -         lda DISCR
e391: 09 80     -         ora #$80
e393: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e396: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e399: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e39b: 60        -         rts
e39c: a9 23     - draw_round_rect_:lda #CMD_DRAW_ROUND_RECT
e39e: 8d 14 d0  -         sta DISCMD
e3a1: ad 13 d0  -         lda DISCR
e3a4: 09 80     -         ora #$80
e3a6: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3a9: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3ac: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3ae: 60        -         rts
e3af: a9 24     - fill_round_rect_:lda #CMD_FILL_ROUND_RECT
e3b1: 8d 14 d0  -         sta DISCMD
e3b4: ad 13 d0  -         lda DISCR
e3b7: 09 80     -         ora #$80
e3b9: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3bc: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3bf: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3c1: 60        -         rts
e3c2: a9 0e     - fill_screen_:lda #CMD_FILL_SCREEN
e3c4: 8d 14 d0  -         sta DISCMD
e3c7: ad 13 d0  -         lda DISCR
e3ca: 09 80     -         ora #$80
e3cc: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3cf: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3d2: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3d4: 60        -         rts
e3d5: a9 14     - draw_line_:lda #CMD_DRAW_LINE 
e3d7: 8d 14 d0  -         sta DISCMD
e3da: ad 13 d0  -         lda DISCR
e3dd: 09 80     -         ora #$80
e3df: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3e2: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3e5: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3e7: 60        -         rts
e3e8: a9 25     - draw_char_:lda #CMD_DRAW_CHAR
e3ea: 8d 14 d0  -         sta DISCMD
e3ed: ad 13 d0  -         lda DISCR
e3f0: 09 80     -         ora #$80
e3f2: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3f5: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3f8: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3fa: 60        -         rts
e3fb: a9 30     - get_clock_cycle:lda #CMD_GET_CLOCK_CYCLE
e3fd: 8d 14 d0  -         sta DISCMD
e400: ad 13 d0  -         lda DISCR
e403: 09 80     -         ora #$80
e405: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e408: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e40b: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e40d: 60        -         rts
e40e: a9 31     - get_millis:lda #CMD_GET_MILLIS
e410: 8d 14 d0  -         sta DISCMD
e413: ad 13 d0  -         lda DISCR
e416: 09 80     -         ora #$80
e418: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e41b: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e41e: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e420: 60        -         rts
e421: a9 32     - get_frame_time:lda #CMD_GET_FRAME_TIME
e423: 8d 14 d0  -         sta DISCMD
e426: ad 13 d0  -         lda DISCR
e429: 09 80     -         ora #$80
e42b: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e42e: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e431: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e433: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 4e 45 2f 4f 53 20 76 30 2e 32 20 62 79 20 46 69  - msg_01: .text "NE/OS v0.2 by FirstKlaas 2023"
f020: 72 73 74 4b 6c 61 61 73 20 32 30 32 33          
f02d: 00        -         .byte 0
f02e: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 46 69 72  - welcome:.text "NE/OS v0.1 - FirstKlaas Experience"
f03e: 73 74 4b 6c 61 61 73 20 45 78 70 65 72 69 65 6e 
f04e: 63 65                                           
f050: 00        -         .byte 0
f051: 46 52 41 4d 45 3a                                - txt_frame:.text "FRAME:"
f057: 00        -         .byte 0
f058: 4c 45 56 45 4c                                   - txt_level:.text "LEVEL"
f05d: 00        -         .byte 0
f05e: 53 43 4f 52 45                                   - txt_score:.text "SCORE"
f063: 00        -         .byte 0
f064: 31 20 20 4c 6f 61 64 20 70 72 6f 67 72 61 6d     - txt_menue_1:.text "1  Load program"
f073: 00        -         .byte 0
f074: 32 20 20 50 6c 61 79 20 53 70 61 63 65 20 49 6e  - txt_menue_2:.text "2  Play Space Invaders"
f084: 76 61 64 65 72 73                               
f08a: 00        -         .byte 0
