******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: a9 7f     -         lda #CIA_IRQ_MASK
0805: 8d 0d dc  -         sta REG_CIA_ICR
0808: ad 13 d0  -         lda DISCR   // Set the auto adjust 
080b: 09 0c     -         ora #$0C    // and wrap flag
080d: 8d 13 d0  -         sta DISCR                
0810: a9 29     -         lda #color 
0812: 8d 15 d0  -         sta DIS00
0815: 20 d2 e3  -         jsr GFX.fill_screen_
0818: a9 2e     -         lda #color
081a: 20 19 e2  -         jsr set_fg_color_
081d: a9 02     -         lda #xpos
081f: 20 e9 e1  -         jsr set_cursor_x_
0822: a9 01     -         lda #ypos
0824: 20 01 e2  -         jsr set_cursor_y_    
0827: a9 79     -         lda #<addr
0829: 85 e0     -         sta zpRegE0
082b: a9 0a     -         lda #>addr
082d: 85 e1     -         sta zpRegE1
082f: 20 8d e2  -         jsr print_text_
0832: a9 1f     -         lda #color
0834: 20 19 e2  -         jsr set_fg_color_
0837: a9 3f     -         lda #xlo
0839: 8d 15 d0  -         sta DIS00
083c: a9 00     -         lda #xhi
083e: 8d 16 d0  -         sta DIS01
0841: a9 54     -         lda #y
0843: 8d 17 d0  -         sta DIS02
0846: a9 08     -         lda #rad
0848: 8d 18 d0  -         sta DIS03
084b: a9 1b     -         lda #color 
084d: 8d 19 d0  -         sta DIS04 
0850: 20 73 e3  -         jsr GFX.fill_circle_ 
0853: a9 0a     -         lda #xpos
0855: 20 e9 e1  -         jsr set_cursor_x_
0858: a9 0a     -         lda #ypos
085a: 20 01 e2  -         jsr set_cursor_y_    
085d: a9 af     -         lda #<addr
085f: 85 e0     -         sta zpRegE0
0861: a9 0a     -         lda #>addr
0863: 85 e1     -         sta zpRegE1
0865: 20 8d e2  -         jsr print_text_
0868: a9 0a     -         lda #xpos
086a: 20 e9 e1  -         jsr set_cursor_x_
086d: a9 0c     -         lda #ypos
086f: 20 01 e2  -         jsr set_cursor_y_    
0872: a9 bf     -         lda #<addr
0874: 85 e0     -         sta zpRegE0
0876: a9 0a     -         lda #>addr
0878: 85 e1     -         sta zpRegE1
087a: 20 8d e2  -         jsr print_text_
087d: 78        -         sei
087e: a9 70     -         lda #<label
0880: 8d fa ff  -         sta $fffa 
0883: a9 09     -         lda #>label
0885: 8d fb ff  -         sta $fffb
0888: 58        -         cli
0889: 78        -         sei
088a: a9 70     -         lda #<label
088c: 8d fe ff  -         sta $fffe 
088f: a9 09     -         lda #>label
0891: 8d ff ff  -         sta $ffff
0894: 58        -         cli
0895: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0897: 8d 0d dc  -         sta $dc0d
089a: ad ac 08  - endless:lda PROGRAM_ADR_CR
089d: 10 fb     -         bpl endless
089f: a9 7f     -         lda #CIA_IRQ_MASK
08a1: 8d 0d dc  -         sta REG_CIA_ICR
08a4: 20 72 10  -         jsr SpaceInvaders.run
08a7: 4c a7 08  -         jmp *
08aa: 00        - PROGRAM_ADR_LO:.byte 0
08ab: 00        - PROGRAM_ADR_HI:.byte 0
08ac: 00        - PROGRAM_ADR_CR:.byte 0
08ad: 20 bd 08  - all:    jsr drawLine
08b0: 20 de 08  -         jsr drawHLine
08b3: 20 00 09  -         jsr drawVLine
08b6: 20 49 09  -         jsr fillRect
08b9: 20 22 09  -         jsr drawRect
08bc: 60        -         rts
08bd: a9 00     - drawLine:lda #0     
08bf: 8d 15 d0  -         sta DIS00   // XPOS1 LO
08c2: 8d 16 d0  -         sta DIS01   // XPOS1 HI
08c5: 8d 17 d0  -         sta DIS02   // YPOS1
08c8: 8d 19 d0  -         sta DIS04   // XPOS2 HI
08cb: a9 ff     -         lda #255    
08cd: 8d 18 d0  -         sta DIS03   // XPOS2 LO
08d0: a9 f0     -         lda #240
08d2: 8d 1a d0  -         sta DIS05   // YPOS2
08d5: a9 20     -         lda #32
08d7: 8d 1b d0  -         sta DIS06   // COLOR
08da: 20 e5 e3  -         jsr GFX.draw_line_
08dd: 60        -         rts
08de: a9 0a     - drawHLine:lda #10
08e0: 8d 15 d0  -         sta DIS00   // XPOS LO
08e3: a9 00     -         lda #0  
08e5: 8d 16 d0  -         sta DIS01   // XPOS HI
08e8: a9 19     -         lda #25
08ea: 8d 17 d0  -         sta DIS02   // YPOS
08ed: a9 64     -         lda #100  
08ef: 8d 18 d0  -         sta DIS03   // LENGTH LO
08f2: a9 00     -         lda #0
08f4: 8d 19 d0  -         sta DIS04   // LENGTH HI
08f7: a9 21     -         lda #33
08f9: 8d 1a d0  -         sta DIS05   // COLOR
08fc: 20 c8 e2  -         jsr GFX.draw_horizonal_line_
08ff: 60        -         rts
0900: a9 0a     - drawVLine:lda #10
0902: 8d 15 d0  -         sta DIS00   // XPOS LO
0905: a9 00     -         lda #0  
0907: 8d 16 d0  -         sta DIS01   // XPOS HI
090a: a9 19     -         lda #25
090c: 8d 17 d0  -         sta DIS02   // YPOS
090f: a9 64     -         lda #100  
0911: 8d 18 d0  -         sta DIS03   // LENGTH LO
0914: a9 00     -         lda #0
0916: 8d 19 d0  -         sta DIS04   // LENGTH HI
0919: a9 22     -         lda #34
091b: 8d 1a d0  -         sta DIS05   // COLOR
091e: 20 db e2  -         jsr GFX.draw_vertical_line_
0921: 60        -         rts
0922: a9 1e     - drawRect:lda #30
0924: 8d 15 d0  -         sta DIS00   // XPOS LO
0927: a9 00     -         lda #0
0929: 8d 16 d0  -         sta DIS01   // XPOS HI
092c: a9 50     -         lda #80
092e: 8d 17 d0  -         sta DIS02   // YPOS
0931: a9 00     -         lda #0
0933: 8d 18 d0  -         sta DIS03   // WIDTH LO
0936: a9 64     -         lda #100    
0938: 8d 19 d0  -         sta DIS04   // WIDTH HI
093b: a9 64     -         lda #100    
093d: 8d 1a d0  -         sta DIS05   // HEIGHT
0940: a9 20     -         lda #32
0942: 8d 1b d0  -         sta DIS06   // COLOR
0945: 20 01 e3  -         jsr GFX.draw_rect_
0948: 60        -         rts
0949: a9 28     - fillRect:lda #40
094b: 8d 15 d0  -         sta DIS00   // XPOS LO
094e: a9 00     -         lda #0
0950: 8d 16 d0  -         sta DIS01   // XPOS HI
0953: a9 14     -         lda #20
0955: 8d 17 d0  -         sta DIS02   // YPOS
0958: a9 00     -         lda #0
095a: 8d 18 d0  -         sta DIS03   // WIDTH LO
095d: a9 64     -         lda #100    
095f: 8d 19 d0  -         sta DIS04   // WIDTH HI
0962: a9 64     -         lda #100    
0964: 8d 1a d0  -         sta DIS05   // HEIGHT
0967: a9 23     -         lda #35
0969: 8d 1b d0  -         sta DIS06   // COLOR
096c: 20 14 e3  -         jsr GFX.fill_rect_
096f: 60        -         rts
0970: 48        - test_isr:pha
0971: da        -         phx
0972: 5a        -         phy
0973: ad 0d dc  -         lda REG_CIA_ICR
0976: 48        -         pha
0977: a9 00     -         lda #xlo
0979: 8d 15 d0  -         sta DIS00
097c: a9 00     -         lda #xhi 
097e: 8d 16 d0  -         sta DIS01
0981: a9 b0     -         lda #y 
0983: 8d 17 d0  -         sta DIS02
0986: a9 00     -         lda #width_lo 
0988: 8d 18 d0  -         sta DIS03
098b: a9 64     -         lda #width_hi
098d: 8d 19 d0  -         sta DIS04
0990: a9 18     -         lda #height
0992: 8d 1a d0  -         sta DIS05
0995: a9 04     -         lda #col 
0997: 8d 1b d0  -         sta DIS06
099a: 20 14 e3  -         jsr GFX.fill_rect_
099d: 68        -         pla 
099e: a9 09     -         lda #xpos
09a0: 20 e9 e1  -         jsr set_cursor_x_
09a3: a9 17     -         lda #ypos
09a5: 20 01 e2  -         jsr set_cursor_y_    
09a8: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
09ab: 8d 30 e1  -         sta Math.HTD_IN
09ae: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
09b1: 8d 31 e1  -         sta Math.HTD_IN+1
09b4: 20 44 e1  -         jsr Math.bcd_convert_word_
09b7: ad 34 e1  -         lda Math.HTD_OUT+2
09ba: 20 a5 e2  -         jsr print_hex_
09bd: ad 33 e1  -         lda Math.HTD_OUT+1
09c0: 20 a5 e2  -         jsr print_hex_
09c3: ad 32 e1  -         lda Math.HTD_OUT
09c6: 20 a5 e2  -         jsr print_hex_
09c9: a9 02     -         lda #xpos
09cb: 20 e9 e1  -         jsr set_cursor_x_
09ce: a9 1a     -         lda #ypos
09d0: 20 01 e2  -         jsr set_cursor_y_    
09d3: a9 9c     -         lda #<addr
09d5: 85 e0     -         sta zpRegE0
09d7: a9 0a     -         lda #>addr
09d9: 85 e1     -         sta zpRegE1
09db: 20 8d e2  -         jsr print_text_
09de: ce 0c 0a  -         dec GAME_COUNTDOWN
09e1: d0 0f     -         bne exit
09e3: a9 72     -         lda #<SpaceInvaders.run
09e5: 8d aa 08  -         sta PROGRAM_ADR_LO
09e8: a9 10     -         lda #>SpaceInvaders.run
09ea: 8d ab 08  -         sta PROGRAM_ADR_HI
09ed: a9 80     -         lda #$80
09ef: 8d ac 08  -         sta PROGRAM_ADR_CR
09f2: 7a        - exit:   ply 
09f3: fa        -         plx 
09f4: 68        -         pla 
09f5: 40        -         rti
09f6: a9 f0     - setup_timer:lda #$f0
09f8: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
09fb: a9 00     -         lda #$00
09fd: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
0a00: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
0a02: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
0a05: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
0a07: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0a0a: 60        -         rts
0a0b: 00        - IRQ_DATA:.byte $00
0a0c: ff        - GAME_COUNTDOWN:.byte $ff
0a0d: 48        - kernel_isr:pha
0a0e: da        -         phx
0a0f: 5a        -         phy
0a10: ad 0d dc  -         lda REG_CIA_ICR
0a13: ce 0c 0a  -         dec GAME_COUNTDOWN
0a16: d0 36     -         bne exit
0a18: a9 80     -         lda #$80
0a1a: 8d ac 08  -         sta PROGRAM_ADR_CR
0a1d: 4c 4e 0a  -         jmp exit
0a20: 8d 0b 0a  - start_isr:sta IRQ_DATA
0a23: 8d ff d0  -         sta DEBUG
0a26: a9 04     - test_frame_irq:lda #FRAME_INTERRUPT_FLAG
0a28: 2c 0b 0a  -         bit IRQ_DATA
0a2b: f0 03     -         beq test_keyboard
0a2d: 4c 4e 0a  -         jmp exit
0a30: a9 08     - test_keyboard:lda #KBD_INTERRUPT_FLAG
0a32: 2c 0b 0a  -         bit IRQ_DATA
0a35: f0 06     -         beq test_timer_a 
0a37: 20 52 0a  -         jsr handle_key_event
0a3a: 4c 4e 0a  -         jmp exit
0a3d: a9 01     - test_timer_a:lda #TIMER_A_INTERRUPT_FLAG
0a3f: 2c 0b 0a  -         bit IRQ_DATA
0a42: f0 03     -         beq test_timer_b
0a44: 4c 4e 0a  -         jmp exit
0a47: a9 02     - test_timer_b:lda #TIMER_B_INTERRUPT_FLAG
0a49: 2c 0b 0a  -         bit IRQ_DATA
0a4c: f0 00     -         beq exit
0a4e: 7a        - exit:   ply 
0a4f: fa        -         plx 
0a50: 68        -         pla 
0a51: 40        -         rti
0a52: ad 10 d0  - handle_key_event:lda KBD
0a55: c9 32     -         cmp #$32    // Key 2
0a57: d0 1f     -         bne exit
0a59: a9 ea     -         lda #code
0a5b: 8d ff d0  -         sta DEBUG
0a5e: a9 7f     -         lda #CIA_IRQ_MASK
0a60: 8d 0d dc  -         sta REG_CIA_ICR
0a63: a9 20     -         lda #color 
0a65: 8d 15 d0  -         sta DIS00
0a68: 20 d2 e3  -         jsr GFX.fill_screen_
0a6b: a9 3f     -         lda #color 
0a6d: 8d 15 d0  -         sta DIS00
0a70: 20 d2 e3  -         jsr GFX.fill_screen_
0a73: a9 80     -         lda #$80
0a75: 8d ac 08  -         sta PROGRAM_ADR_CR
0a78: 60        - exit:   rts
0a79: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 46 69 72  - welcome:.text "NE/OS v0.1 - FirstKlaas Experience"
0a89: 73 74 4b 6c 61 61 73 20 45 78 70 65 72 69 65 6e 
0a99: 63 65                                           
0a9b: 00        -         .byte 0
0a9c: 46 52 41 4d 45 3a                                - txt_frame:.text "FRAME:"
0aa2: 00        -         .byte 0
0aa3: 4c 45 56 45 4c                                   - txt_level:.text "LEVEL"
0aa8: 00        -         .byte 0
0aa9: 53 43 4f 52 45                                   - txt_score:.text "SCORE"
0aae: 00        -         .byte 0
0aaf: 31 20 20 4c 6f 61 64 20 70 72 6f 67 72 61 6d     - txt_menue_1:.text "1  Load program"
0abe: 00        -         .byte 0
0abf: 32 20 20 50 6c 61 79 20 53 70 61 63 65 20 49 6e  - txt_menue_2:.text "2  Play Space Invaders"
0acf: 76 61 64 65 72 73                               
0ad5: 00        -         .byte 0

[Space Invaders]
1000: 48        - dummy_isr:pha
1001: da        -         phx
1002: 5a        -         phy
1003: 48        -         pha
1004: a9 00     -         lda #xlo
1006: 8d 15 d0  -         sta DIS00
1009: a9 00     -         lda #xhi 
100b: 8d 16 d0  -         sta DIS01
100e: a9 b0     -         lda #y 
1010: 8d 17 d0  -         sta DIS02
1013: a9 00     -         lda #width_lo 
1015: 8d 18 d0  -         sta DIS03
1018: a9 64     -         lda #width_hi
101a: 8d 19 d0  -         sta DIS04
101d: a9 18     -         lda #height
101f: 8d 1a d0  -         sta DIS05
1022: a9 04     -         lda #col 
1024: 8d 1b d0  -         sta DIS06
1027: 20 14 e3  -         jsr GFX.fill_rect_
102a: 68        -         pla 
102b: a9 09     -         lda #xpos
102d: 20 e9 e1  -         jsr set_cursor_x_
1030: a9 17     -         lda #ypos
1032: 20 01 e2  -         jsr set_cursor_y_    
1035: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
1038: 8d 30 e1  -         sta Math.HTD_IN
103b: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
103e: 8d 31 e1  -         sta Math.HTD_IN+1
1041: 20 44 e1  -         jsr Math.bcd_convert_word_
1044: ad 34 e1  -         lda Math.HTD_OUT+2
1047: 20 a5 e2  -         jsr print_hex_
104a: ad 33 e1  -         lda Math.HTD_OUT+1
104d: 20 a5 e2  -         jsr print_hex_
1050: ad 32 e1  -         lda Math.HTD_OUT
1053: 20 a5 e2  -         jsr print_hex_
1056: a9 02     -         lda #xpos
1058: 20 e9 e1  -         jsr set_cursor_x_
105b: a9 1a     -         lda #ypos
105d: 20 01 e2  -         jsr set_cursor_y_    
1060: a9 9c     -         lda #<addr
1062: 85 e0     -         sta zpRegE0
1064: a9 0a     -         lda #>addr
1066: 85 e1     -         sta zpRegE1
1068: 20 8d e2  -         jsr print_text_
106b: ad 0d dc  -         lda REG_CIA_ICR
106e: 7a        -         ply 
106f: fa        -         plx 
1070: 68        -         pla 
1071: 40        -         rti
1072: a9 7f     - run:    lda #CIA_IRQ_MASK
1074: 8d 0d dc  -         sta REG_CIA_ICR
1077: a9 2a     -         lda #color 
1079: 8d 15 d0  -         sta DIS00
107c: 20 d2 e3  -         jsr GFX.fill_screen_
107f: 20 f1 19  -         jsr init_alien_animation
1082: 20 bf 17  -         jsr initialize_sprite_definition_block
1085: a9 00     -         lda #state
1087: 20 8b 10  -         jsr switch_game_state
108a: 60        -         rts
108b: 85 04     - switch_game_state:sta ZP_GAME_STATE
108d: c9 00     - gs_intro:cmp #GAME_STATE_INTRO
108f: d0 06     -         bne gs_level_start
1091: 20 9b 11  -         jsr Intro.init
1094: 4c ba 10  -         jmp exit
1097: c9 01     - gs_level_start:cmp #GAME_STATE_LEVEL_START
1099: d0 03     -         bne gs_fight
109b: 4c ba 10  -         jmp exit
109e: c9 02     - gs_fight:cmp #GAME_STATE_FIGHT
10a0: d0 06     -         bne gs_won
10a2: 20 fb 12  -         jsr Fight.init
10a5: 4c ba 10  -         jmp exit
10a8: c9 03     - gs_won: cmp #GAME_STATE_WON 
10aa: d0 03     -         bne gs_lost
10ac: 4c ba 10  -         jmp exit
10af: c9 04     - gs_lost:cmp #GAME_STATE_LOST
10b1: d0 00     -         bne gs_debug 
10b3: c9 05     - gs_debug:cmp #GAME_STATE_DEBUG 
10b5: d0 03     -         bne exit
10b7: 20 ea 14  -         jsr Debug.init
10ba: 60        - exit:   rts
10bb: a6 07     - animate_aliens:ldx ALIEN_ANIM_FRAME_HI
10bd: bd 9f 17  -         lda ALIEN_A_SPRITE_ANIMATION_LO,x
10c0: 8d 5f 17  -         sta SPRITE_DATA_LO+i    
10c3: 8d 60 17  -         sta SPRITE_DATA_LO+i    
10c6: 8d 61 17  -         sta SPRITE_DATA_LO+i    
10c9: 8d 62 17  -         sta SPRITE_DATA_LO+i    
10cc: 8d 63 17  -         sta SPRITE_DATA_LO+i    
10cf: 8d 64 17  -         sta SPRITE_DATA_LO+i    
10d2: 8d 65 17  -         sta SPRITE_DATA_LO+i    
10d5: 8d 66 17  -         sta SPRITE_DATA_LO+i    
10d8: bd a3 17  -         lda ALIEN_A_SPRITE_ANIMATION_HI,x
10db: 8d 7f 17  -         sta SPRITE_DATA_HI+i    
10de: 8d 80 17  -         sta SPRITE_DATA_HI+i    
10e1: 8d 81 17  -         sta SPRITE_DATA_HI+i    
10e4: 8d 82 17  -         sta SPRITE_DATA_HI+i    
10e7: 8d 83 17  -         sta SPRITE_DATA_HI+i    
10ea: 8d 84 17  -         sta SPRITE_DATA_HI+i    
10ed: 8d 85 17  -         sta SPRITE_DATA_HI+i    
10f0: 8d 86 17  -         sta SPRITE_DATA_HI+i    
10f3: bd a7 17  -         lda ALIEN_B_SPRITE_ANIMATION_LO,x
10f6: 8d 67 17  -         sta SPRITE_DATA_LO+i    
10f9: 8d 68 17  -         sta SPRITE_DATA_LO+i    
10fc: 8d 69 17  -         sta SPRITE_DATA_LO+i    
10ff: 8d 6a 17  -         sta SPRITE_DATA_LO+i    
1102: 8d 6b 17  -         sta SPRITE_DATA_LO+i    
1105: 8d 6c 17  -         sta SPRITE_DATA_LO+i    
1108: 8d 6d 17  -         sta SPRITE_DATA_LO+i    
110b: 8d 6e 17  -         sta SPRITE_DATA_LO+i    
110e: bd ab 17  -         lda ALIEN_B_SPRITE_ANIMATION_HI,x
1111: 8d 87 17  -         sta SPRITE_DATA_HI+i    
1114: 8d 88 17  -         sta SPRITE_DATA_HI+i    
1117: 8d 89 17  -         sta SPRITE_DATA_HI+i    
111a: 8d 8a 17  -         sta SPRITE_DATA_HI+i    
111d: 8d 8b 17  -         sta SPRITE_DATA_HI+i    
1120: 8d 8c 17  -         sta SPRITE_DATA_HI+i    
1123: 8d 8d 17  -         sta SPRITE_DATA_HI+i    
1126: 8d 8e 17  -         sta SPRITE_DATA_HI+i    
1129: 60        -         rts
112a: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
112c: 07 e0     -         .byte %00000111, %11100000
112e: 0f f0     -         .byte %00001111, %11110000
1130: 1d b8     -         .byte %00011101, %10111000
1132: 17 e8     -         .byte %00010111, %11101000
1134: 17 e8     -         .byte %00010111, %11101000
1136: 02 40     -         .byte %00000010, %01000000
1138: 06 60     -         .byte %00000110, %01100000
113a: 02 40     - SPACE_ALIEN_A1:.byte %00000010, %01000000
113c: 07 e0     -         .byte %00000111, %11100000
113e: 0f f0     -         .byte %00001111, %11110000
1140: 1d b8     -         .byte %00011101, %10111000
1142: 17 e8     -         .byte %00010111, %11101000
1144: 07 c0     -         .byte %00000111, %11000000
1146: 02 60     -         .byte %00000010, %01100000
1148: 06 00     -         .byte %00000110, %00000000
114a: 02 40     - SPACE_ALIEN_A2:.byte %00000010, %01000000
114c: 07 e0     -         .byte %00000111, %11100000
114e: 0f f0     -         .byte %00001111, %11110000
1150: 1d b8     -         .byte %00011101, %10111000
1152: 17 e8     -         .byte %00010111, %11101000
1154: 03 e0     -         .byte %00000011, %11100000
1156: 06 40     -         .byte %00000110, %01000000
1158: 00 60     -         .byte %00000000, %01100000
115a: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
115c: 04 40     -         .byte %00000100, %01000000
115e: 03 80     -         .byte %00000011, %10000000
1160: 07 c0     -         .byte %00000111, %11000000
1162: 05 40     -         .byte %00000101, %01000000
1164: 07 c0     -         .byte %00000111, %11000000
1166: 0a a0     -         .byte %00001010, %10100000
1168: 0a a0     -         .byte %00001010, %10100000
116a: 00 00     - SPACE_ALIEN_B1:.byte %00000000, %00000000
116c: 04 40     -         .byte %00000100, %01000000
116e: 03 80     -         .byte %00000011, %10000000
1170: 07 c0     -         .byte %00000111, %11000000
1172: 05 40     -         .byte %00000101, %01000000
1174: 07 c0     -         .byte %00000111, %11000000
1176: 0a a0     -         .byte %00001010, %10100000
1178: 15 40     -         .byte %00010101, %01000000
117a: 00 00     - SPACE_ALIEN_B2:.byte %00000000, %00000000
117c: 04 40     -         .byte %00000100, %01000000
117e: 03 80     -         .byte %00000011, %10000000
1180: 07 c0     -         .byte %00000111, %11000000
1182: 05 40     -         .byte %00000101, %01000000
1184: 07 c0     -         .byte %00000111, %11000000
1186: 0a a0     -         .byte %00001010, %10100000
1188: 05 50     -         .byte %00000101, %01010000
118a: 00 00     - SPACE_ALIEN_C:.byte %00000000, %00000000
118c: 04 40     -         .byte %00000100, %01000000
118e: 0f e0     -         .byte %00001111, %11100000
1190: 19 30     -         .byte %00011001, %00110000
1192: 1f f0     -         .byte %00011111, %11110000
1194: 1f f0     -         .byte %00011111, %11110000
1196: 15 50     -         .byte %00010101, %01010000
1198: 0a a0     -         .byte %00001010, %10100000
119a: 00        - START_DELAY:.byte 00
119b: a9 04     - init:   lda #FRAME_INTERRUPT_FLAG
119d: 8d 0d dc  -         sta $dc0d
11a0: a9 0a     -         lda #xpos
11a2: 20 e9 e1  -         jsr set_cursor_x_
11a5: a9 02     -         lda #ypos
11a7: 20 01 e2  -         jsr set_cursor_y_    
11aa: 78        -         sei
11ab: a9 c1     -         lda #<label
11ad: 8d fa ff  -         sta $fffa 
11b0: a9 11     -         lda #>label
11b2: 8d fb ff  -         sta $fffb
11b5: 58        -         cli
11b6: a9 64     -         lda #100
11b8: 8d 9a 11  -         sta START_DELAY
11bb: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
11bd: 8d 0d dc  -         sta $dc0d
11c0: 60        -         rts
11c1: 48        - run:    pha 
11c2: da        -         phx
11c3: 5a        -         phy  
11c4: ad 0d dc  -         lda REG_CIA_ICR
11c7: a9 0a     -         lda #xpos
11c9: 20 e9 e1  -         jsr set_cursor_x_
11cc: a9 06     -         lda #ypos
11ce: 20 01 e2  -         jsr set_cursor_y_    
11d1: a9 52     -         lda #<addr
11d3: 85 e0     -         sta zpRegE0
11d5: a9 12     -         lda #>addr
11d7: 85 e1     -         sta zpRegE1
11d9: 20 8d e2  -         jsr print_text_
11dc: a9 0a     -         lda #xpos
11de: 20 e9 e1  -         jsr set_cursor_x_
11e1: a9 09     -         lda #ypos
11e3: 20 01 e2  -         jsr set_cursor_y_    
11e6: a9 6d     -         lda #<addr
11e8: 85 e0     -         sta zpRegE0
11ea: a9 12     -         lda #>addr
11ec: 85 e1     -         sta zpRegE1
11ee: 20 8d e2  -         jsr print_text_
11f1: a9 0a     -         lda #xpos
11f3: 20 e9 e1  -         jsr set_cursor_x_
11f6: a9 0b     -         lda #ypos
11f8: 20 01 e2  -         jsr set_cursor_y_    
11fb: a9 7f     -         lda #<addr
11fd: 85 e0     -         sta zpRegE0
11ff: a9 12     -         lda #>addr
1201: 85 e1     -         sta zpRegE1
1203: 20 8d e2  -         jsr print_text_
1206: a9 0a     -         lda #xpos
1208: 20 e9 e1  -         jsr set_cursor_x_
120b: a9 0d     -         lda #ypos
120d: 20 01 e2  -         jsr set_cursor_y_    
1210: ad 9a 11  -         lda addr
1213: 20 a5 e2  -         jsr print_hex_
1216: a9 0e     -         lda #xpos
1218: 20 e9 e1  -         jsr set_cursor_x_
121b: a9 0d     -         lda #ypos
121d: 20 01 e2  -         jsr set_cursor_y_    
1220: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
1223: 8d 30 e1  -         sta Math.HTD_IN
1226: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
1229: 8d 31 e1  -         sta Math.HTD_IN+1
122c: 20 44 e1  -         jsr Math.bcd_convert_word_
122f: ad 34 e1  -         lda Math.HTD_OUT+2
1232: 20 a5 e2  -         jsr print_hex_
1235: ad 33 e1  -         lda Math.HTD_OUT+1
1238: 20 a5 e2  -         jsr print_hex_
123b: ad 32 e1  -         lda Math.HTD_OUT
123e: 20 a5 e2  -         jsr print_hex_
1241: ce 9a 11  -         dec START_DELAY
1244: d0 08     -         bne !exit_isr+
1246: a9 05     -         lda #state
1248: 20 8b 10  -         jsr switch_game_state
124b: 4c 4e 12  -         jmp !exit_isr+
124e: 7a        -         ply 
124f: fa        -         plx 
1250: 68        -         pla 
1251: 40        -         rti
1252: 53 50 41 43 45 20 49 4e 56 41 44 45 52 20 4f 4e  - intro_message:.text "SPACE INVADER ON NEOS65C02"
1262: 20 4e 45 4f 53 36 35 43 30 32                   
126c: 00        -         .byte 0
126d: 41 20 20 53 54 41 52 54 20 4e 45 57 20 47 41 4d  - men_start_game:.text "A  START NEW GAME"
127d: 45                                              
127e: 00        -         .byte 0       
127f: 42 20 20 42 41 43 4b 20 54 4f 20 4d 41 49 4e 20  - men_sback_to_main:.text "B  BACK TO MAIN MENU"
128f: 4d 45 4e 55                                     
1293: 00        -         .byte 0       
1294: 00 00     - CURRENT_VELOCITY:.word $0000
1296: 00 00     - TARGET_VELOCITY:.word $0000
1298: a9 04     - init:   lda #FRAME_INTERRUPT_FLAG
129a: 8d 0d dc  -         sta $dc0d
129d: 78        -         sei
129e: a9 fb     -         lda #<label
12a0: 8d fa ff  -         sta $fffa 
12a3: a9 12     -         lda #>label
12a5: 8d fb ff  -         sta $fffb
12a8: 58        -         cli
12a9: a2 1f     -         ldx #31
12ab: a9 80     -         lda #$80
12ad: 9d 9f 16  -         sta SPRITE_FLAGS,x 
12b0: ca        -         dex 
12b1: 10 fa     -         bpl !loop- 
12b3: a2 07     -         ldx #7
12b5: a9 00     -         lda #0
12b7: 9d df 16  -         sta SPRITE_YPOS,x 
12ba: 9d cf 16  -         sta SPRITE_XPOS+16,x 
12bd: ca        -         dex 
12be: 10 f7     -         bpl !loop- 
12c0: a2 07     -         ldx #7
12c2: a9 ff     -         lda #255
12c4: 9d e7 16  -         sta SPRITE_YPOS+8,x 
12c7: 9d d7 16  -         sta SPRITE_XPOS+24,x 
12ca: ca        -         dex 
12cb: 10 f7     -         bpl !loop- 
12cd: a2 07     -         ldx #7
12cf: a9 20     -         lda #$20
12d1: 9d df 16  -         sta SPRITE_YPOS,x 
12d4: ca        -         dex 
12d5: 10 fa     -         bpl !loop-
12d7: a2 07     -         ldx #7
12d9: a9 30     -         lda #$30
12db: 9d e7 16  -         sta SPRITE_YPOS+8,x 
12de: ca        -         dex 
12df: 10 fa     -         bpl !loop-
12e1: a2 07     -         ldx #7
12e3: a9 40     -         lda #$40
12e5: 9d ef 16  -         sta SPRITE_YPOS+16,x 
12e8: ca        -         dex 
12e9: 10 fa     -         bpl !loop-
12eb: a2 07     -         ldx #7
12ed: a9 50     -         lda #$50
12ef: 9d ef 16  -         sta SPRITE_YPOS+16,x 
12f2: ca        -         dex 
12f3: 10 fa     -         bpl !loop-
12f5: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
12f7: 8d 0d dc  -         sta $dc0d
12fa: 60        -         rts
12fb: a9 7f     - animate,init:lda #CIA_IRQ_MASK
12fd: 8d 0d dc  -         sta REG_CIA_ICR
1300: 78        -         sei
1301: a9 13     -         lda #<label
1303: 8d fa ff  -         sta $fffa 
1306: a9 13     -         lda #>label
1308: 8d fb ff  -         sta $fffb
130b: 58        -         cli
130c: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
130e: 8d 0d dc  -         sta $dc0d
1311: 60        -         rts
1312: 04        - shot_delay:.byte $04
1313: 48        - run:    pha
1314: da        -         phx 
1315: 5a        -         phy 
1316: ad 0d dc  -         lda REG_CIA_ICR
1319: a9 29     -         lda #color 
131b: 8d 15 d0  -         sta DIS00
131e: 20 d2 e3  -         jsr GFX.fill_screen_
1321: 48        -         pha
1322: a9 05     -         lda #xlo
1324: 8d 15 d0  -         sta DIS00
1327: a9 00     -         lda #xhi 
1329: 8d 16 d0  -         sta DIS01
132c: a9 14     -         lda #y 
132e: 8d 17 d0  -         sta DIS02
1331: a9 fa     -         lda #width_lo 
1333: 8d 18 d0  -         sta DIS03
1336: a9 00     -         lda #width_hi
1338: 8d 19 d0  -         sta DIS04
133b: a9 a0     -         lda #height
133d: 8d 1a d0  -         sta DIS05
1340: a9 37     -         lda #col 
1342: 8d 1b d0  -         sta DIS06
1345: 20 14 e3  -         jsr GFX.fill_rect_
1348: 68        -         pla 
1349: a5 06     -         lda ALIEN_ANIM_FRAME_LO
134b: 18        -         clc
134c: 69 40     -         adc #%01000000
134e: 85 06     -         sta ALIEN_ANIM_FRAME_LO
1350: a5 07     -         lda ALIEN_ANIM_FRAME_HI
1352: 69 00     -         adc #00
1354: 29 03     -         and #3
1356: 85 07     -         sta ALIEN_ANIM_FRAME_HI
1358: 20 bb 10  -         jsr SpaceInvaders.animate_aliens
135b: 20 27 e3  -         jsr GFX.draw_sprites_
135e: 48        -         pha
135f: a9 05     -         lda #xlo
1361: 8d 15 d0  -         sta DIS00
1364: a9 00     -         lda #xhi 
1366: 8d 16 d0  -         sta DIS01
1369: a9 b4     -         lda #y 
136b: 8d 17 d0  -         sta DIS02
136e: a9 fa     -         lda #width_lo 
1370: 8d 18 d0  -         sta DIS03
1373: a9 00     -         lda #width_hi
1375: 8d 19 d0  -         sta DIS04
1378: a9 3c     -         lda #height
137a: 8d 1a d0  -         sta DIS05
137d: a9 2a     -         lda #col 
137f: 8d 1b d0  -         sta DIS06
1382: 20 14 e3  -         jsr GFX.fill_rect_
1385: 68        -         pla 
1386: 48        -         pha
1387: a9 05     -         lda #xlo
1389: 8d 15 d0  -         sta DIS00
138c: a9 00     -         lda #xhi 
138e: 8d 16 d0  -         sta DIS01
1391: a9 14     -         lda #y 
1393: 8d 17 d0  -         sta DIS02
1396: a9 fa     -         lda #width_lo 
1398: 8d 18 d0  -         sta DIS03
139b: a9 00     -         lda #width_hi
139d: 8d 19 d0  -         sta DIS04
13a0: a9 a0     -         lda #height
13a2: 8d 1a d0  -         sta DIS05
13a5: a9 17     -         lda #col 
13a7: 8d 1b d0  -         sta DIS06
13aa: 20 01 e3  -         jsr GFX.draw_rect_
13ad: 68        -         pla 
13ae: a9 2b     -         lda #color
13b0: 20 19 e2  -         jsr set_fg_color_
13b3: a9 02     -         lda #xpos
13b5: 20 e9 e1  -         jsr set_cursor_x_
13b8: a9 1a     -         lda #ypos
13ba: 20 01 e2  -         jsr set_cursor_y_    
13bd: a9 9c     -         lda #<addr
13bf: 85 e0     -         sta zpRegE0
13c1: a9 0a     -         lda #>addr
13c3: 85 e1     -         sta zpRegE1
13c5: 20 8d e2  -         jsr print_text_
13c8: a9 09     -         lda #xpos
13ca: 20 e9 e1  -         jsr set_cursor_x_
13cd: a9 17     -         lda #ypos
13cf: 20 01 e2  -         jsr set_cursor_y_    
13d2: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
13d5: 8d 30 e1  -         sta Math.HTD_IN
13d8: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
13db: 8d 31 e1  -         sta Math.HTD_IN+1
13de: 20 44 e1  -         jsr Math.bcd_convert_word_
13e1: ad 34 e1  -         lda Math.HTD_OUT+2
13e4: 20 a5 e2  -         jsr print_hex_
13e7: ad 33 e1  -         lda Math.HTD_OUT+1
13ea: 20 a5 e2  -         jsr print_hex_
13ed: ad 32 e1  -         lda Math.HTD_OUT
13f0: 20 a5 e2  -         jsr print_hex_
13f3: a9 02     -         lda #xpos
13f5: 20 e9 e1  -         jsr set_cursor_x_
13f8: a9 17     -         lda #ypos
13fa: 20 01 e2  -         jsr set_cursor_y_    
13fd: a9 a3     -         lda #<addr
13ff: 85 e0     -         sta zpRegE0
1401: a9 0a     -         lda #>addr
1403: 85 e1     -         sta zpRegE1
1405: 20 8d e2  -         jsr print_text_
1408: a9 02     -         lda #xpos
140a: 20 e9 e1  -         jsr set_cursor_x_
140d: a9 18     -         lda #ypos
140f: 20 01 e2  -         jsr set_cursor_y_    
1412: a9 a9     -         lda #<addr
1414: 85 e0     -         sta zpRegE0
1416: a9 0a     -         lda #>addr
1418: 85 e1     -         sta zpRegE1
141a: 20 8d e2  -         jsr print_text_
141d: a9 09     -         lda #xpos
141f: 20 e9 e1  -         jsr set_cursor_x_
1422: a9 18     -         lda #ypos
1424: 20 01 e2  -         jsr set_cursor_y_    
1427: a5 02     -         lda SCORE_LO       
1429: 8d 30 e1  -         sta Math.HTD_IN
142c: a5 03     -         lda SCORE_HI       
142e: 8d 31 e1  -         sta Math.HTD_IN+1
1431: 20 44 e1  -         jsr Math.bcd_convert_word_
1434: ad 34 e1  -         lda Math.HTD_OUT+2
1437: 20 a5 e2  -         jsr print_hex_
143a: ad 33 e1  -         lda Math.HTD_OUT+1
143d: 20 a5 e2  -         jsr print_hex_
1440: ad 32 e1  -         lda Math.HTD_OUT
1443: 20 a5 e2  -         jsr print_hex_
1446: ce 12 13  -         dec shot_delay      // Shot delay countdown
1449: d0 27     -         bne draw_bullets    // Still positive. No Shot
144b: 20 81 e1  -         jsr Math.rand8           // New delay in frames ( 0..255)
144e: 29 07     -         and #7
1450: 69 07     -         adc #7              // Increase to at least 7 frames. 
1452: 8d 12 13  -         sta shot_delay      // Store new delay
1455: 20 3e 1a  -         jsr find_next_invisible_bullet
1458: 90 18     -         bcc draw_bullets    // We couln't find any free slot. So just draw.    
145a: 20 81 e1  -         jsr Math.rand8  // Random value to accu
145d: 29 0f     -         and #15    // One of the first sixteen aliens
145f: a8        -         tay        // Using y as alien index
1460: b9 bf 16  -         lda SPRITE_XPOS,y
1463: 18        -         clc
1464: 69 08     -         adc #8
1466: 9d bf 1a  -         sta ALIEN_BULLETS_X,x
1469: b9 df 16  -         lda SPRITE_YPOS,y
146c: 18        -         clc
146d: 69 04     -         adc #4
146f: 9d c4 1a  -         sta ALIEN_BULLETS_Y,x
1472: 20 53 1a  - draw_bullets:jsr update_alien_bullets
1475: ad bf 16  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
1478: c9 0a     -         cmp #10             // 10 is the minimum x position
147a: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
147c: a9 01     - left_underflow:lda #$01
147e: 8d cd 14  -         sta operation+1
1481: 4c 90 14  -         jmp go_down 
1484: ad c6 16  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
1487: c9 ef     -         cmp #$ef            // Max xpos = 239
1489: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
148b: a9 ff     - right_overflow:lda #$ff            // By adding -1, we move left.
148d: 8d cd 14  -         sta operation+1     // Write the new speed to the code (self modified)    
1490: ad df 16  - go_down:lda SPRITE_YPOS
1493: c9 96     -         cmp #150
1495: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
1497: a0 07     - reset_ypos:ldy #7
1499: a9 20     -         lda #$20              // Start Y position
149b: 99 df 16  -         sta SPRITE_YPOS,y 
149e: 88        -         dey
149f: 10 fa     -         bpl !loop-
14a1: a0 07     -         ldy #7
14a3: a9 30     -         lda #$30              // Start Y position
14a5: 99 e7 16  -         sta SPRITE_YPOS+8,y 
14a8: 88        -         dey
14a9: 10 fa     -         bpl !loop-
14ab: a0 07     -         ldy #7
14ad: a9 40     -         lda #$40              // Start Y position
14af: 99 ef 16  -         sta SPRITE_YPOS+16,y 
14b2: 88        -         dey
14b3: 10 fa     -         bpl !loop-
14b5: 4c c6 14  -         jmp move
14b8: a0 17     - decrease:ldy #23             // Calculate position fpr 24 sprites
14ba: b9 df 16  -         lda SPRITE_YPOS,y 
14bd: 18        -         clc
14be: 69 04     -         adc #4
14c0: 99 df 16  -         sta SPRITE_YPOS,y 
14c3: 88        -         dey
14c4: 10 f4     -         bpl !loop-
14c6: a0 07     - move:   ldy #7               // Y is the sprite index. We have 8 sprites in a row 
14c8: b9 bf 16  -         lda SPRITE_XPOS,y    // Load current x position of the sprite   
14cb: 18        -         clc
14cc: 69 01     - operation:adc #1               // Add the speed
14ce: 99 bf 16  -         sta SPRITE_XPOS,y    // save the new xpos 
14d1: 99 c7 16  -         sta SPRITE_XPOS+8,y  // Also for the second row
14d4: 99 cf 16  -         sta SPRITE_XPOS+16,y // Also for the second row
14d7: 88        -         dey
14d8: 10 ee     -         bpl !loop-
14da: ad 0d dc  - exit:   lda $dc0d            // Acknowledge the IRQ            
14dd: 7a        -         ply
14de: fa        -         plx  
14df: 68        -         pla
14e0: 40        -         rti
14e1: 00        - COLOR_OFFSET:.byte 0
14e2: 00 00 00 00                                      - WORST_TIME:.fill 4,0
14e6: 00 00 00 00                                      - TS:     .fill 4,0
14ea: a9 7f     - init:   lda #CIA_IRQ_MASK
14ec: 8d 0d dc  -         sta REG_CIA_ICR
14ef: 78        -         sei
14f0: a9 01     -         lda #<label
14f2: 8d fa ff  -         sta $fffa 
14f5: a9 15     -         lda #>label
14f7: 8d fb ff  -         sta $fffb
14fa: 58        -         cli
14fb: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
14fd: 8d 0d dc  -         sta $dc0d
1500: 60        -         rts
1501: 48        - run_debug:pha 
1502: da        -         phx 
1503: 5a        -         phy
1504: 20 1e e4  -         jsr GFX.get_millis
1507: ad 15 d0  -         lda DIS00
150a: 8d e6 14  -         sta TS 
150d: ad 16 d0  -         lda DIS01
1510: 8d e7 14  -         sta TS+1
1513: ad 17 d0  -         lda DIS02
1516: 8d e8 14  -         sta TS+2
1519: ad 18 d0  -         lda DIS03
151c: 8d e9 14  -         sta TS+3
151f: 20 0b e4  -         jsr GFX.get_clock_cycle
1522: a2 03     -         ldx #3
1524: bd 15 d0  -         lda DIS00,x 
1527: 95 fc     -         sta zpRegFC,x
1529: ca        -         dex 
152a: 10 f8     -         bpl !ccl-
152c: a0 ef     -         ldy #239 // We 239 Lines
152e: ae e1 14  -         ldx COLOR_OFFSET
1531: a9 00     -         lda #0
1533: 8d 15 d0  -         sta DIS00       // Xpos Low
1536: 8d 16 d0  -         sta DIS01       // Xpos High
1539: 98        -         tya 
153a: 8d 17 d0  -         sta DIS02       // Ypos 
153d: a9 01     -         lda #1
153f: 8d 18 d0  -         sta DIS03       // Width low
1542: a9 40     -         lda #64
1544: 8d 19 d0  -         sta DIS04       // Width high
1547: 8a        -         txa 
1548: 29 3f     -         and #%00111111  // Only 64 colors (0..63)
154a: 8d 1a d0  -         sta DIS05       // Color
154d: 20 c8 e2  -         jsr GFX.draw_horizonal_line_
1550: e8        -         inx             // Next line next color
1551: 88        -         dey             // Next line ypos
1552: d0 dd     -         bne !loop-
1554: ee e1 14  -         inc COLOR_OFFSET // Next frame we start with a higher index
1557: 48        -         pha
1558: a9 00     -         lda #xlo
155a: 8d 15 d0  -         sta DIS00
155d: a9 00     -         lda #xhi 
155f: 8d 16 d0  -         sta DIS01
1562: a9 00     -         lda #y 
1564: 8d 17 d0  -         sta DIS02
1567: a9 32     -         lda #width_lo 
1569: 8d 18 d0  -         sta DIS03
156c: a9 00     -         lda #width_hi
156e: 8d 19 d0  -         sta DIS04
1571: a9 f0     -         lda #height
1573: 8d 1a d0  -         sta DIS05
1576: a9 29     -         lda #col 
1578: 8d 1b d0  -         sta DIS06
157b: 20 14 e3  -         jsr GFX.fill_rect_
157e: 68        -         pla 
157f: a9 00     -         lda #xpos
1581: 20 e9 e1  -         jsr set_cursor_x_
1584: a9 00     -         lda #ypos
1586: 20 01 e2  -         jsr set_cursor_y_    
1589: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
158c: 8d 30 e1  -         sta Math.HTD_IN
158f: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
1592: 8d 31 e1  -         sta Math.HTD_IN+1
1595: 20 44 e1  -         jsr Math.bcd_convert_word_
1598: ad 34 e1  -         lda Math.HTD_OUT+2
159b: 20 a5 e2  -         jsr print_hex_
159e: ad 33 e1  -         lda Math.HTD_OUT+1
15a1: 20 a5 e2  -         jsr print_hex_
15a4: ad 32 e1  -         lda Math.HTD_OUT
15a7: 20 a5 e2  -         jsr print_hex_
15aa: 20 0b e4  -         jsr GFX.get_clock_cycle
15ad: 38        -         sec 
15ae: ad 15 d0  -         lda DIS00
15b1: e5 fc     -         sbc zpRegFC
15b3: 85 fc     -         sta zpRegFC
15b5: ad 16 d0  -         lda DIS01
15b8: e5 fd     -         sbc zpRegFD 
15ba: 85 fd     -         sta zpRegFD
15bc: ad 17 d0  -         lda DIS02 
15bf: e5 fe     -         sbc zpRegFE 
15c1: 85 fe     -         sta zpRegFE 
15c3: ad 18 d0  -         lda DIS03 
15c6: e5 ff     -         sbc zpRegFF
15c8: 85 ff     -         sta zpRegFF 
15ca: ad e2 14  -         lda WORST_TIME
15cd: 85 e0     -         sta zpRegE0
15cf: ad e3 14  -         lda WORST_TIME+1
15d2: 85 e1     -         sta zpRegE1
15d4: ad e4 14  -         lda WORST_TIME+2
15d7: 85 e2     -         sta zpRegE2
15d9: ad e5 14  -         lda WORST_TIME+3
15dc: 85 e3     -         sta zpRegE3
15de: a5 fc     -         lda zpRegFC
15e0: 85 e4     -         sta zpRegE4
15e2: a5 fd     -         lda zpRegFD
15e4: 85 e5     -         sta zpRegE5
15e6: a5 fe     -         lda zpRegFE
15e8: 85 e6     -         sta zpRegE6
15ea: a5 ff     -         lda zpRegFF
15ec: 85 e5     -         sta zpRegE5
15ee: 20 a2 e1  -         jsr Math.compare_long
15f1: 10 14     -         bpl print_delta  // No bigger  value. Just print.
15f3: a5 fc     -         lda zpRegFC
15f5: 8d e2 14  -         sta WORST_TIME 
15f8: a5 fd     -         lda zpRegFD
15fa: 8d e3 14  -         sta WORST_TIME+1 
15fd: a5 fe     -         lda zpRegFE
15ff: 8d e4 14  -         sta WORST_TIME+2 
1602: a5 ff     -         lda zpRegFF
1604: 8d e5 14  -         sta WORST_TIME+3 
1607: a9 00     - print_delta:lda #xpos
1609: 20 e9 e1  -         jsr set_cursor_x_
160c: a9 03     -         lda #ypos
160e: 20 01 e2  -         jsr set_cursor_y_    
1611: ad e5 14  -         lda addr
1614: 20 a5 e2  -         jsr print_hex_
1617: ad e4 14  -         lda addr
161a: 20 a5 e2  -         jsr print_hex_
161d: ad e3 14  -         lda addr
1620: 20 a5 e2  -         jsr print_hex_
1623: ad e2 14  -         lda addr
1626: 20 a5 e2  -         jsr print_hex_
1629: 20 1e e4  -         jsr GFX.get_millis
162c: 38        -         sec 
162d: ad 15 d0  -         lda DIS00 
1630: ed e6 14  -         sbc TS
1633: 8d e6 14  -         sta TS 
1636: ad 16 d0  -         lda DIS01 
1639: ed e7 14  -         sbc TS+1
163c: 8d e7 14  -         sta TS+1
163f: ad 17 d0  -         lda DIS02
1642: ed e8 14  -         sbc TS+2
1645: 8d e8 14  -         sta TS+2 
1648: ad 18 d0  -         lda DIS03  
164b: ed e9 14  -         sbc TS+3 
164e: 8d e9 14  -         sta TS+3 
1651: a9 00     -         lda #xpos
1653: 20 e9 e1  -         jsr set_cursor_x_
1656: a9 04     -         lda #ypos
1658: 20 01 e2  -         jsr set_cursor_y_    
165b: ad e9 14  -         lda addr
165e: 20 a5 e2  -         jsr print_hex_
1661: ad e8 14  -         lda addr
1664: 20 a5 e2  -         jsr print_hex_
1667: ad e7 14  -         lda addr
166a: 20 a5 e2  -         jsr print_hex_
166d: ad e6 14  -         lda addr
1670: 20 a5 e2  -         jsr print_hex_
1673: 20 31 e4  -         jsr GFX.get_frame_time
1676: a9 00     -         lda #xpos
1678: 20 e9 e1  -         jsr set_cursor_x_
167b: a9 05     -         lda #ypos
167d: 20 01 e2  -         jsr set_cursor_y_    
1680: ad 18 d0  -         lda addr
1683: 20 a5 e2  -         jsr print_hex_
1686: ad 17 d0  -         lda addr
1689: 20 a5 e2  -         jsr print_hex_
168c: ad 16 d0  -         lda addr
168f: 20 a5 e2  -         jsr print_hex_
1692: ad 15 d0  -         lda addr
1695: 20 a5 e2  -         jsr print_hex_
1698: ad 0d dc  -         lda REG_CIA_ICR
169b: 7a        -         ply 
169c: fa        -         plx 
169d: 68        -         pla
169e: 40        -         rti
169f: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
16a7: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
16af: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 16-23
16b7: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
16bf: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
16c7: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
16cf: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 16-23
16d7: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
16df: 20 20 20 20 20 20 20 20                          - SPRITE_YPOS:.byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 00-07
16e7: 30 30 30 30 30 30 30 30                          -         .byte $30, $30, $30, $30, $30, $30, $30, $30  // Sprite 08-15
16ef: 40 40 40 40 40 40 40 40                          -         .byte $40, $40, $40, $40, $40, $40, $40, $40  // Sprite 16-23
16f7: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
16ff: 1f 1f 1f 1f 1f 1f 1f 1f                          - SPRITE_COLOR:.byte $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f  // Sprite 00-07
1707: 23 23 23 23 23 23 23 23                          -         .byte $23, $23, $23, $23, $23, $23, $23, $23  // Sprite 08-15
170f: 2c 2c 2c 2c 2c 2c 2c 2c                          -         .byte $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2c  // Sprite 16-23
1717: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
171f: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
1727: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
172f: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 16-23
1737: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
173f: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
1747: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
174f: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 16-23
1757: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
175f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
176f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
177f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
178f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
179f: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_LO:.fill 4, 0
17a3: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_HI:.fill 4, 0
17a7: 00 00 00 00                                      - ALIEN_B_SPRITE_ANIMATION_LO:.fill 4, 0
17ab: 00 00 00 00                                      - ALIEN_B_SPRITE_ANIMATION_HI:.fill 4, 0
17af: 00 00 00 00                                      - ALIEN_C_SPRITE_ANIMATION_LO:.fill 4, 0
17b3: 00 00 00 00                                      - ALIEN_C_SPRITE_ANIMATION_HI:.fill 4, 0
17b7: 00 00 00 00                                      - ALIEN_D_SPRITE_ANIMATION_LO:.fill 4, 0
17bb: 00 00 00 00                                      - ALIEN_D_SPRITE_ANIMATION_HI:.fill 4, 0
17bf: a2 00     - initialize_sprite_definition_block:ldx #index
17c1: a9 2a     -         lda #<address
17c3: 9d 5f 17  -         sta SPRITE_DATA_LO, x
17c6: a9 11     -         lda #>address
17c8: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
17cb: a2 08     -         ldx #index
17cd: a9 5a     -         lda #<address
17cf: 9d 5f 17  -         sta SPRITE_DATA_LO, x
17d2: a9 11     -         lda #>address
17d4: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
17d7: a2 10     -         ldx #index
17d9: a9 8a     -         lda #<address
17db: 9d 5f 17  -         sta SPRITE_DATA_LO, x
17de: a9 11     -         lda #>address
17e0: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
17e3: a2 01     -         ldx #index
17e5: a9 2a     -         lda #<address
17e7: 9d 5f 17  -         sta SPRITE_DATA_LO, x
17ea: a9 11     -         lda #>address
17ec: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
17ef: a2 09     -         ldx #index
17f1: a9 5a     -         lda #<address
17f3: 9d 5f 17  -         sta SPRITE_DATA_LO, x
17f6: a9 11     -         lda #>address
17f8: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
17fb: a2 11     -         ldx #index
17fd: a9 8a     -         lda #<address
17ff: 9d 5f 17  -         sta SPRITE_DATA_LO, x
1802: a9 11     -         lda #>address
1804: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
1807: a2 02     -         ldx #index
1809: a9 2a     -         lda #<address
180b: 9d 5f 17  -         sta SPRITE_DATA_LO, x
180e: a9 11     -         lda #>address
1810: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
1813: a2 0a     -         ldx #index
1815: a9 5a     -         lda #<address
1817: 9d 5f 17  -         sta SPRITE_DATA_LO, x
181a: a9 11     -         lda #>address
181c: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
181f: a2 12     -         ldx #index
1821: a9 8a     -         lda #<address
1823: 9d 5f 17  -         sta SPRITE_DATA_LO, x
1826: a9 11     -         lda #>address
1828: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
182b: a2 03     -         ldx #index
182d: a9 2a     -         lda #<address
182f: 9d 5f 17  -         sta SPRITE_DATA_LO, x
1832: a9 11     -         lda #>address
1834: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
1837: a2 0b     -         ldx #index
1839: a9 5a     -         lda #<address
183b: 9d 5f 17  -         sta SPRITE_DATA_LO, x
183e: a9 11     -         lda #>address
1840: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
1843: a2 13     -         ldx #index
1845: a9 8a     -         lda #<address
1847: 9d 5f 17  -         sta SPRITE_DATA_LO, x
184a: a9 11     -         lda #>address
184c: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
184f: a2 04     -         ldx #index
1851: a9 2a     -         lda #<address
1853: 9d 5f 17  -         sta SPRITE_DATA_LO, x
1856: a9 11     -         lda #>address
1858: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
185b: a2 0c     -         ldx #index
185d: a9 5a     -         lda #<address
185f: 9d 5f 17  -         sta SPRITE_DATA_LO, x
1862: a9 11     -         lda #>address
1864: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
1867: a2 14     -         ldx #index
1869: a9 8a     -         lda #<address
186b: 9d 5f 17  -         sta SPRITE_DATA_LO, x
186e: a9 11     -         lda #>address
1870: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
1873: a2 05     -         ldx #index
1875: a9 2a     -         lda #<address
1877: 9d 5f 17  -         sta SPRITE_DATA_LO, x
187a: a9 11     -         lda #>address
187c: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
187f: a2 0d     -         ldx #index
1881: a9 5a     -         lda #<address
1883: 9d 5f 17  -         sta SPRITE_DATA_LO, x
1886: a9 11     -         lda #>address
1888: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
188b: a2 15     -         ldx #index
188d: a9 8a     -         lda #<address
188f: 9d 5f 17  -         sta SPRITE_DATA_LO, x
1892: a9 11     -         lda #>address
1894: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
1897: a2 06     -         ldx #index
1899: a9 2a     -         lda #<address
189b: 9d 5f 17  -         sta SPRITE_DATA_LO, x
189e: a9 11     -         lda #>address
18a0: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
18a3: a2 0e     -         ldx #index
18a5: a9 5a     -         lda #<address
18a7: 9d 5f 17  -         sta SPRITE_DATA_LO, x
18aa: a9 11     -         lda #>address
18ac: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
18af: a2 16     -         ldx #index
18b1: a9 8a     -         lda #<address
18b3: 9d 5f 17  -         sta SPRITE_DATA_LO, x
18b6: a9 11     -         lda #>address
18b8: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
18bb: a2 07     -         ldx #index
18bd: a9 2a     -         lda #<address
18bf: 9d 5f 17  -         sta SPRITE_DATA_LO, x
18c2: a9 11     -         lda #>address
18c4: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
18c7: a2 0f     -         ldx #index
18c9: a9 5a     -         lda #<address
18cb: 9d 5f 17  -         sta SPRITE_DATA_LO, x
18ce: a9 11     -         lda #>address
18d0: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
18d3: a2 17     -         ldx #index
18d5: a9 8a     -         lda #<address
18d7: 9d 5f 17  -         sta SPRITE_DATA_LO, x
18da: a9 11     -         lda #>address
18dc: 9d 7f 17  -         sta SPRITE_DATA_HI, x                
18df: a2 00     -         ldx #index
18e1: bd 9f 16  -         lda SPRITE_FLAGS, x
18e4: 05 c0     -         ora SPRITE_ENABLE_FLAG
18e6: 9d 9f 16  -         sta SPRITE_FLAGS, x
18e9: a2 01     -         ldx #index
18eb: bd 9f 16  -         lda SPRITE_FLAGS, x
18ee: 05 c0     -         ora SPRITE_ENABLE_FLAG
18f0: 9d 9f 16  -         sta SPRITE_FLAGS, x
18f3: a2 02     -         ldx #index
18f5: bd 9f 16  -         lda SPRITE_FLAGS, x
18f8: 05 c0     -         ora SPRITE_ENABLE_FLAG
18fa: 9d 9f 16  -         sta SPRITE_FLAGS, x
18fd: a2 03     -         ldx #index
18ff: bd 9f 16  -         lda SPRITE_FLAGS, x
1902: 05 c0     -         ora SPRITE_ENABLE_FLAG
1904: 9d 9f 16  -         sta SPRITE_FLAGS, x
1907: a2 04     -         ldx #index
1909: bd 9f 16  -         lda SPRITE_FLAGS, x
190c: 05 c0     -         ora SPRITE_ENABLE_FLAG
190e: 9d 9f 16  -         sta SPRITE_FLAGS, x
1911: a2 05     -         ldx #index
1913: bd 9f 16  -         lda SPRITE_FLAGS, x
1916: 05 c0     -         ora SPRITE_ENABLE_FLAG
1918: 9d 9f 16  -         sta SPRITE_FLAGS, x
191b: a2 06     -         ldx #index
191d: bd 9f 16  -         lda SPRITE_FLAGS, x
1920: 05 c0     -         ora SPRITE_ENABLE_FLAG
1922: 9d 9f 16  -         sta SPRITE_FLAGS, x
1925: a2 07     -         ldx #index
1927: bd 9f 16  -         lda SPRITE_FLAGS, x
192a: 05 c0     -         ora SPRITE_ENABLE_FLAG
192c: 9d 9f 16  -         sta SPRITE_FLAGS, x
192f: a2 08     -         ldx #index
1931: bd 9f 16  -         lda SPRITE_FLAGS, x
1934: 05 c0     -         ora SPRITE_ENABLE_FLAG
1936: 9d 9f 16  -         sta SPRITE_FLAGS, x
1939: a2 09     -         ldx #index
193b: bd 9f 16  -         lda SPRITE_FLAGS, x
193e: 05 c0     -         ora SPRITE_ENABLE_FLAG
1940: 9d 9f 16  -         sta SPRITE_FLAGS, x
1943: a2 0a     -         ldx #index
1945: bd 9f 16  -         lda SPRITE_FLAGS, x
1948: 05 c0     -         ora SPRITE_ENABLE_FLAG
194a: 9d 9f 16  -         sta SPRITE_FLAGS, x
194d: a2 0b     -         ldx #index
194f: bd 9f 16  -         lda SPRITE_FLAGS, x
1952: 05 c0     -         ora SPRITE_ENABLE_FLAG
1954: 9d 9f 16  -         sta SPRITE_FLAGS, x
1957: a2 0c     -         ldx #index
1959: bd 9f 16  -         lda SPRITE_FLAGS, x
195c: 05 c0     -         ora SPRITE_ENABLE_FLAG
195e: 9d 9f 16  -         sta SPRITE_FLAGS, x
1961: a2 0d     -         ldx #index
1963: bd 9f 16  -         lda SPRITE_FLAGS, x
1966: 05 c0     -         ora SPRITE_ENABLE_FLAG
1968: 9d 9f 16  -         sta SPRITE_FLAGS, x
196b: a2 0e     -         ldx #index
196d: bd 9f 16  -         lda SPRITE_FLAGS, x
1970: 05 c0     -         ora SPRITE_ENABLE_FLAG
1972: 9d 9f 16  -         sta SPRITE_FLAGS, x
1975: a2 0f     -         ldx #index
1977: bd 9f 16  -         lda SPRITE_FLAGS, x
197a: 05 c0     -         ora SPRITE_ENABLE_FLAG
197c: 9d 9f 16  -         sta SPRITE_FLAGS, x
197f: a2 10     -         ldx #index
1981: bd 9f 16  -         lda SPRITE_FLAGS, x
1984: 05 c0     -         ora SPRITE_ENABLE_FLAG
1986: 9d 9f 16  -         sta SPRITE_FLAGS, x
1989: a2 11     -         ldx #index
198b: bd 9f 16  -         lda SPRITE_FLAGS, x
198e: 05 c0     -         ora SPRITE_ENABLE_FLAG
1990: 9d 9f 16  -         sta SPRITE_FLAGS, x
1993: a2 12     -         ldx #index
1995: bd 9f 16  -         lda SPRITE_FLAGS, x
1998: 05 c0     -         ora SPRITE_ENABLE_FLAG
199a: 9d 9f 16  -         sta SPRITE_FLAGS, x
199d: a2 13     -         ldx #index
199f: bd 9f 16  -         lda SPRITE_FLAGS, x
19a2: 05 c0     -         ora SPRITE_ENABLE_FLAG
19a4: 9d 9f 16  -         sta SPRITE_FLAGS, x
19a7: a2 14     -         ldx #index
19a9: bd 9f 16  -         lda SPRITE_FLAGS, x
19ac: 05 c0     -         ora SPRITE_ENABLE_FLAG
19ae: 9d 9f 16  -         sta SPRITE_FLAGS, x
19b1: a2 15     -         ldx #index
19b3: bd 9f 16  -         lda SPRITE_FLAGS, x
19b6: 05 c0     -         ora SPRITE_ENABLE_FLAG
19b8: 9d 9f 16  -         sta SPRITE_FLAGS, x
19bb: a2 16     -         ldx #index
19bd: bd 9f 16  -         lda SPRITE_FLAGS, x
19c0: 05 c0     -         ora SPRITE_ENABLE_FLAG
19c2: 9d 9f 16  -         sta SPRITE_FLAGS, x
19c5: a2 17     -         ldx #index
19c7: bd 9f 16  -         lda SPRITE_FLAGS, x
19ca: 05 c0     -         ora SPRITE_ENABLE_FLAG
19cc: 9d 9f 16  -         sta SPRITE_FLAGS, x
19cf: a9 9f     -         lda #<SPRITE_DEFINITON_BLOCK
19d1: 8d 15 d0  -         sta DIS00
19d4: a9 16     -         lda #>SPRITE_DEFINITON_BLOCK
19d6: 8d 16 d0  -         sta DIS01
19d9: a9 20     -         lda #32                 // Set number of sprites
19db: 8d 17 d0  -         sta DIS02
19de: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
19e0: 8d 14 d0  -         sta DISCMD              //                                          
19e3: ad 13 d0  -         lda DISCR               // Load Display command register
19e6: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
19e8: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
19eb: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
19ee: 30 fb     -         bmi !wait-              // No! Let's wait
19f0: 60        -         rts
19f1: a9 2a     - init_alien_animation:lda #<SPACE_ALIEN_A
19f3: 8d 9f 17  -         sta ALIEN_A_SPRITE_ANIMATION_LO
19f6: 8d a1 17  -         sta ALIEN_A_SPRITE_ANIMATION_LO+2
19f9: a9 11     -         lda #>SPACE_ALIEN_A
19fb: 8d a3 17  -         sta ALIEN_A_SPRITE_ANIMATION_HI
19fe: 8d a5 17  -         sta ALIEN_A_SPRITE_ANIMATION_HI+2
1a01: a9 00     -         lda #GAME_STATE_INTRO
1a03: 85 04     -         sta ZP_GAME_STATE
1a05: a9 3a     -         lda #<SPACE_ALIEN_A1
1a07: 8d a0 17  -         sta ALIEN_A_SPRITE_ANIMATION_LO+1
1a0a: a9 11     -         lda #>SPACE_ALIEN_A1
1a0c: 8d a4 17  -         sta ALIEN_A_SPRITE_ANIMATION_HI+1
1a0f: a9 4a     -         lda #<SPACE_ALIEN_A2
1a11: 8d a2 17  -         sta ALIEN_A_SPRITE_ANIMATION_LO+3
1a14: a9 11     -         lda #>SPACE_ALIEN_A2
1a16: 8d a6 17  -         sta ALIEN_A_SPRITE_ANIMATION_HI+3
1a19: a9 5a     -         lda #<SPACE_ALIEN_B
1a1b: 8d a7 17  -         sta ALIEN_B_SPRITE_ANIMATION_LO
1a1e: 8d a9 17  -         sta ALIEN_B_SPRITE_ANIMATION_LO+2
1a21: a9 11     -         lda #>SPACE_ALIEN_B
1a23: 8d ab 17  -         sta ALIEN_B_SPRITE_ANIMATION_HI
1a26: 8d ad 17  -         sta ALIEN_B_SPRITE_ANIMATION_HI+2
1a29: a9 6a     -         lda #<SPACE_ALIEN_B1
1a2b: 8d a8 17  -         sta ALIEN_B_SPRITE_ANIMATION_LO+1
1a2e: a9 11     -         lda #>SPACE_ALIEN_B1
1a30: 8d ac 17  -         sta ALIEN_B_SPRITE_ANIMATION_HI+1
1a33: a9 7a     -         lda #<SPACE_ALIEN_B2
1a35: 8d aa 17  -         sta ALIEN_B_SPRITE_ANIMATION_LO+3
1a38: a9 11     -         lda #>SPACE_ALIEN_B2
1a3a: 8d ae 17  -         sta ALIEN_B_SPRITE_ANIMATION_HI+3
1a3d: 60        -         rts
1a3e: a2 04     - find_next_invisible_bullet:ldx #(BULLET_COUNT-1)
1a40: bd ba 1a  -         lda ALIEN_BULLETS_STAT,x 
1a43: 30 09     -         bmi !next+ // Visible. Next.
1a45: 09 80     -         ora #BULLET_ENABLE_FLAG
1a47: 9d ba 1a  -         sta ALIEN_BULLETS_STAT,x
1a4a: 38        -         sec // Set carry flag (inicating we found a slot)
1a4b: 4c 52 1a  -         jmp !end+
1a4e: ca        -         dex
1a4f: 10 ef     -         bpl !loop-
1a51: 18        -         clc // Clear carry to indicate, we didn't found a free slot.
1a52: 60        -         rts
1a53: 20 5d 1a  - update_alien_bullets:jsr move_bullets
1a56: 20 72 1a  -         jsr check_bullets
1a59: 20 8c 1a  -         jsr draw_bullets
1a5c: 60        -         rts
1a5d: a2 05     - move_bullets:ldx #(BULLET_COUNT)
1a5f: bd ba 1a  -         lda ALIEN_BULLETS_STAT,x
1a62: 10 0a     -         bpl !next+
1a64: bd c4 1a  -         lda ALIEN_BULLETS_Y,x 
1a67: 18        -         clc 
1a68: 7d c9 1a  -         adc ALIEN_BULLETS_SPEED,x
1a6b: 9d c4 1a  -         sta ALIEN_BULLETS_Y,x
1a6e: ca        -         dex
1a6f: 10 ee     -         bpl !loop- 
1a71: 60        -         rts
1a72: a2 04     - check_bullets:ldx #(BULLET_COUNT-1)
1a74: bd ba 1a  -         lda ALIEN_BULLETS_STAT,x
1a77: 10 0f     -         bpl !next+
1a79: bd c4 1a  -         lda ALIEN_BULLETS_Y,x
1a7c: c9 aa     -         cmp #BULLET_MAX_HEIGHT    // if ypos > BULLET_MAX_HEIGHT hide bullet 
1a7e: 30 08     -         bmi !next+
1a80: bd ba 1a  - hide_bullet:lda ALIEN_BULLETS_STAT,x 
1a83: 29 7f     -         and #(~BULLET_ENABLE_FLAG)
1a85: 9d ba 1a  -         sta ALIEN_BULLETS_STAT,x
1a88: ca        -         dex
1a89: 10 e9     -         bpl !loop-
1a8b: 60        -         rts
1a8c: a9 00     - draw_bullets:lda #0
1a8e: 8d 16 d0  -         sta DIS01                   // xpos high
1a91: a9 04     -         lda #BULLET_LENGTH          // Length Low
1a93: 8d 18 d0  -         sta DIS03
1a96: a9 00     -         lda #0                      // Length High
1a98: 8d 19 d0  -         sta DIS04   
1a9b: a9 17     -         lda #BULLET_COLOR           // Color
1a9d: 8d 1a d0  -         sta DIS05
1aa0: a2 04     -         ldx #(BULLET_COUNT-1)
1aa2: bd ba 1a  -         lda ALIEN_BULLETS_STAT,x 
1aa5: 10 0f     -         bpl !next+
1aa7: bd bf 1a  -         lda ALIEN_BULLETS_X,x       // X-Pos low
1aaa: 8d 15 d0  -         sta DIS00
1aad: bd c4 1a  -         lda ALIEN_BULLETS_Y,x 
1ab0: 8d 17 d0  -         sta DIS02                   // ypos 
1ab3: 20 db e2  -         jsr GFX.draw_vertical_line_
1ab6: ca        -         dex 
1ab7: 10 e9     -         bpl !loop-
1ab9: 60        -         rts
1aba: 04 04 04 04 04                                   - ALIEN_BULLETS_STAT:.fill BULLET_COUNT, $04  // Bit 0..3 length
1abf: 00 00 00 00 00                                   - ALIEN_BULLETS_X:.fill BULLET_COUNT, $00  // xpos. If xpos > 255; stat bit 6 = 1
1ac4: 20 20 20 20 20                                   - ALIEN_BULLETS_Y:.fill BULLET_COUNT, $20  // ypos of the top
1ac9: 02 02 02 02 02                                   - ALIEN_BULLETS_SPEED:.fill BULLET_COUNT, $02

[Kernel Routines Entry Points]
e000: 4c dd e1  - get_key:jmp get_key_
e003: 4c e9 e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c 01 e2  - set_cursor_y:jmp set_cursor_y_
e009: 4c 75 e2  - print_char:jmp print_char_
e00c: 4c 3a e3  - draw_pixel:jmp GFX.draw_pixel_
e00f: 4c e5 e3  - draw_line:jmp GFX.draw_line_
e012: 4c c8 e2  - draw_hline:jmp GFX.draw_horizonal_line_ 
e015: 4c db e2  - draw_vline:jmp GFX.draw_vertical_line_
e018: 4c 01 e3  - draw_rect:jmp GFX.draw_rect_
e01b: 4c 14 e3  - fill_rect:jmp GFX.fill_rect_
e01e: 4c 60 e3  - draw_circle:jmp GFX.draw_circle_
e021: 4c 73 e3  - fill_circle:jmp GFX.fill_circle_
e024: 4c 86 e3  - draw_triangle:jmp GFX.draw_triangle_
e027: 4c 99 e3  - fill_triangle:jmp GFX.fill_triangle_
e02a: 4c ac e3  - draw_round_rect:jmp GFX.draw_round_rect_
e02d: 4c bf e3  - fill_round_rect:jmp GFX.fill_round_rect_
e030: 4c f8 e3  - draw_char:jmp GFX.draw_char_

[Kernel Routines]
e100: 00 00 01 00 00 02 00 00 04 00 00 08              - BCD_LOOKUP_TABLE:.byte    $00, $00, $01, $00, $00, $02, $00, $00, $04, $00, $00, $08
e10c: 00 00 16 00 00 32 00 00 64 00 01 28              -         .byte    $00, $00, $16, $00, $00, $32, $00, $00, $64, $00, $01, $28
e118: 00 02 56 00 05 12 00 10 24 00 20 48              -         .byte    $00, $02, $56, $00, $05, $12, $00, $10, $24, $00, $20, $48
e124: 00 40 96 00 81 92 01 63 84 03 27 68              -         .byte    $00, $40, $96, $00, $81, $92, $01, $63, $84, $03, $27, $68
e130: 00 00     - HTD_IN: .byte $00, $00
e132: 00 00 00  - HTD_OUT:.byte $00, $00, $00 
e135: 48        - byte_to_hex:pha                     // Save value to stack.
e136: 29 0f     -         and #%00001111
e138: 85 e0     -         sta zpRegE0             // store the lower nibble
e13a: 68        -         pla                     // Load the original value
e13b: 48        -         pha                     // and save it again
e13c: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e13d: 4a        -         lsr
e13e: 4a        -         lsr
e13f: 4a        -         lsr
e140: 85 e1     -         sta zpRegE1             // store the higher nibble
e142: 68        -         pla                     // restore the accu
e143: 60        -         rts
e144: f8        - bcd_convert_word_:sed
e145: da        -         phx
e146: 48        -         pha
e147: a9 00     -         lda #0
e149: 8d 32 e1  -         sta HTD_OUT
e14c: 8d 33 e1  -         sta HTD_OUT+1
e14f: 8d 34 e1  -         sta HTD_OUT+2
e152: a2 2d     -         ldx #$2d
e154: 0e 30 e1  -         asl HTD_IN 
e157: 2e 31 e1  -         rol HTD_IN+1
e15a: 90 1c     -         bcc htd1
e15c: ad 32 e1  -         lda HTD_OUT
e15f: 18        -         clc 
e160: 7d 02 e1  -         adc BCD_LOOKUP_TABLE+2,x
e163: 8d 32 e1  -         sta HTD_OUT
e166: ad 33 e1  -         lda HTD_OUT+1
e169: 7d 01 e1  -         adc BCD_LOOKUP_TABLE+1,x
e16c: 8d 33 e1  -         sta HTD_OUT+1
e16f: ad 34 e1  -         lda HTD_OUT+2
e172: 7d 00 e1  -         adc BCD_LOOKUP_TABLE,x
e175: 8d 34 e1  -         sta HTD_OUT+2
e178: ca        - htd1:   dex
e179: ca        -         dex 
e17a: ca        -         dex 
e17b: 10 d7     -         bpl !loop- 
e17d: d8        -         cld
e17e: 68        -         pla
e17f: fa        -         plx 
e180: 60        -         rts
e181: a9 1f     - rand8,rand8b1-1:lda rand8b1:#31
e183: 0a        -         asl
e184: 49 35     - rand8a1-1:eor rand8a1:#53
e186: 8d 82 e1  -         sta rand8b1
e189: 6d 85 e1  -         adc rand8a1
e18c: 8d 85 e1  -         sta rand8a1
e18f: 60        -         rts
e190: 48        - set_seed:pha
e191: 29 d9     -         and #217
e193: 18        -         clc
e194: 69 0f     -         adc #<21263
e196: 8d 85 e1  -         sta rand8a1
e199: 68        -         pla
e19a: 29 26     -         and #255-217
e19c: 69 53     -         adc #>21263
e19e: 8d 82 e1  -         sta rand8b1
e1a1: 60        -         rts
e1a2: a5 e3     - compare_long:lda zpRegE3
e1a4: c5 e7     -         cmp zpRegE7
e1a6: d0 10     -         bne exit 
e1a8: a5 e2     -         lda zpRegE2
e1aa: c5 e6     -         cmp zpRegE6
e1ac: d0 0a     -         bne exit 
e1ae: a5 e1     -         lda zpRegE1
e1b0: c5 e5     -         cmp zpRegE5
e1b2: d0 04     -         bne exit 
e1b4: a5 e0     -         lda zpRegE0
e1b6: c5 e4     -         cmp zpRegE4
e1b8: 60        - exit:   rts
e1b9: a5 e0     - convert565:lda zpRegE0             // red value
e1bb: 0a        -         asl                     // shift three to the left as we
e1bc: 0a        -         asl                     // need to move the lower 5 bits of red
e1bd: 0a        -         asl                     // to the bits 7-5
e1be: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e1c0: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e1c2: 4a        -         lsr                     // lower bits of the output highbyte
e1c3: 4a        -         lsr
e1c4: 4a        -         lsr
e1c5: 29 07     -         and #%00000111          // Only the lower three bits.
e1c7: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e1c9: 85 e0     -         sta zpRegE0             // Store the final high byte
e1cb: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e1cd: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e1ce: 0a        -         asl                     // it with zeros
e1cf: 0a        -         asl
e1d0: 0a        -         asl
e1d1: 0a        -         asl
e1d2: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e1d4: a5 e2     -         lda zpRegE2             // Load blue
e1d6: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e1d8: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e1da: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e1dc: 60        -         rts
e1dd: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e1e0: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e1e2: 29 70     -         and #KEY_MOD_MASK
e1e4: aa        -         tax                     // Save modifiers
e1e5: ad 10 d0  -         lda KBD                 // Current key code to accu
e1e8: 60        -         rts                     // Return
e1e9: 48        - set_cursor_x_:pha                     // Save accu
e1ea: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1ed: a9 03     -         lda #CMD_SET_CURSOR_X
e1ef: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e1f2: ad 13 d0  -         lda DISCR
e1f5: 09 80     -         ora #$80
e1f7: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1fa: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1fd: 30 fb     -         bmi !wait-              // No! Let's wait
e1ff: 68        -         pla                     // Restore input parameter in accu
e200: 60        -         rts                     // Return
e201: 48        - set_cursor_y_:pha                     // Save accu
e202: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e205: a9 04     -         lda #CMD_SET_CURSOR_Y
e207: 8d 14 d0  -         sta DISCMD
e20a: ad 13 d0  -         lda DISCR
e20d: 09 80     -         ora #$80
e20f: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e212: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e215: 30 fb     -         bmi !wait-              // No! Let's wait
e217: 68        -         pla                     // Restore input parameter in accu
e218: 60        -         rts                     // Return
e219: 48        - set_fg_color_:pha                     // Save accu
e21a: 8d 15 d0  -         sta DIS00              // Save the color to the 
e21d: a9 07     -         lda #CMD_SET_FG_COLOR
e21f: 8d 14 d0  -         sta DISCMD
e222: ad 13 d0  -         lda DISCR
e225: 09 80     -         ora #$80
e227: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e22a: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e22d: 30 fb     -         bmi !wait-              // No! Let's wait
e22f: 68        -         pla                     // Restore input parameter in accu
e230: 60        -         rts                     // Return
e231: 48        - set_bg_color_:pha                     // Save accu
e232: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e235: a9 08     -         lda #CMD_SET_BG_COLOR
e237: 8d 14 d0  -         sta DISCMD
e23a: ad 13 d0  -         lda DISCR
e23d: 09 80     -         ora #$80
e23f: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e242: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e245: 30 fb     -         bmi !wait-              // No! Let's wait
e247: 68        -         pla                     // Restore input parameter in accu
e248: 60        -         rts                     // Return
e249: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e24b: 8d 14 d0  -         sta DISCMD
e24e: ad 13 d0  -         lda DISCR
e251: 09 80     -         ora #$80
e253: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e256: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e259: 30 fb     -         bmi !wait-              // No! Let's wait
e25b: ad 15 d0  -         lda DIS00
e25e: 60        -         rts                     // Return
e25f: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e261: 8d 14 d0  -         sta DISCMD
e264: ad 13 d0  -         lda DISCR
e267: 09 80     -         ora #$80
e269: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e26c: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e26f: 30 fb     -         bmi !wait-              // No! Let's wait
e271: ad 15 d0  -         lda DIS00
e274: 60        -         rts                     // Return
e275: 48        - print_char_:pha                     // Save accu
e276: 8d 15 d0  -         sta DIS00              // Save the char to the 
e279: a9 0d     -         lda #CMD_WRITE_CHAR
e27b: 8d 14 d0  -         sta DISCMD
e27e: ad 13 d0  -         lda DISCR
e281: 09 80     -         ora #$80
e283: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e286: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e289: 30 fb     -         bmi !wait-              // No! Let's wait
e28b: 68        -         pla                     // Restore input parameter in accu
e28c: 60        -         rts                     // Return
e28d: 8c a1 e2  - print_text_:sty (!end+)+1       // Save y register
e290: 8d a3 e2  -         sta (!end+)+3
e293: a0 00     -         ldy #0              // Index for the char within the string
e295: b1 e0     -         lda (zpRegE0),y     // load character
e297: f0 07     -         beq !end+
e299: 20 75 e2  -         jsr print_char_
e29c: c8        -         iny
e29d: 4c 95 e2  -         jmp !next-
e2a0: a0 00     -         ldy #0
e2a2: a9 00     -         lda #0
e2a4: 60        -         rts
e2a5: 48        - print_hex_:pha
e2a6: a9 00     -         lda #<hex_chars
e2a8: 85 e0     -         sta zpRegE0
e2aa: a9 f0     -         lda #>hex_chars
e2ac: 85 e1     -         sta zpRegE1
e2ae: 68        -         pla
e2af: 48        -         pha
e2b0: 4a        -         lsr
e2b1: 4a        -         lsr
e2b2: 4a        -         lsr
e2b3: 4a        -         lsr
e2b4: 29 0f     -         and #$0f
e2b6: a8        -         tay
e2b7: b1 e0     -         lda (zpRegE0),y
e2b9: 20 75 e2  -         jsr print_char_
e2bc: 68        -         pla
e2bd: 48        -         pha
e2be: 29 0f     -         and #$0f
e2c0: a8        -         tay
e2c1: b1 e0     -         lda (zpRegE0),y
e2c3: 20 75 e2  -         jsr print_char_
e2c6: 68        -         pla
e2c7: 60        -         rts
e2c8: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e2ca: 8d 14 d0  -         sta DISCMD
e2cd: ad 13 d0  -         lda DISCR
e2d0: 09 80     -         ora #$80
e2d2: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2d5: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2d8: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2da: 60        -         rts
e2db: a9 16     - draw_vertical_line_:lda #CMD_DRAW_VLINE
e2dd: 8d 14 d0  -         sta DISCMD
e2e0: ad 13 d0  -         lda DISCR
e2e3: 09 80     -         ora #$80
e2e5: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2e8: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2eb: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2ed: 60        -         rts
e2ee: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e2f0: 8d 14 d0  -         sta DISCMD
e2f3: ad 13 d0  -         lda DISCR
e2f6: 09 80     -         ora #$80
e2f8: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2fb: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2fe: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e300: 60        -         rts
e301: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e303: 8d 14 d0  -         sta DISCMD
e306: ad 13 d0  -         lda DISCR
e309: 09 80     -         ora #$80
e30b: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e30e: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e311: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e313: 60        -         rts
e314: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e316: 8d 14 d0  -         sta DISCMD
e319: ad 13 d0  -         lda DISCR
e31c: 09 80     -         ora #$80
e31e: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e321: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e324: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e326: 60        -         rts
e327: a9 1e     - draw_sprites_:lda #CMD_DRAW_SPRITES
e329: 8d 14 d0  -         sta DISCMD
e32c: ad 13 d0  -         lda DISCR
e32f: 09 80     -         ora #$80
e331: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e334: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e337: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e339: 60        -         rts
e33a: a9 20     - draw_pixel_:lda #CMD_DRAW_PIXEL
e33c: 8d 14 d0  -         sta DISCMD
e33f: ad 13 d0  -         lda DISCR
e342: 09 80     -         ora #$80
e344: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e347: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e34a: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e34c: 60        -         rts
e34d: a9 1f     - draw_bitmap_:lda #CMD_DRAW_BITMAP
e34f: 8d 14 d0  -         sta DISCMD
e352: ad 13 d0  -         lda DISCR
e355: 09 80     -         ora #$80
e357: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e35a: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e35d: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e35f: 60        -         rts
e360: a9 1c     - draw_circle_:lda #CMD_DRAW_CIRCLE
e362: 8d 14 d0  -         sta DISCMD
e365: ad 13 d0  -         lda DISCR
e368: 09 80     -         ora #$80
e36a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e36d: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e370: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e372: 60        -         rts
e373: a9 1d     - fill_circle_:lda #CMD_FILL_CIRCLE
e375: 8d 14 d0  -         sta DISCMD
e378: ad 13 d0  -         lda DISCR
e37b: 09 80     -         ora #$80
e37d: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e380: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e383: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e385: 60        -         rts
e386: a9 21     - draw_triangle_:lda #CMD_DRAW_TRIANGLE
e388: 8d 14 d0  -         sta DISCMD
e38b: ad 13 d0  -         lda DISCR
e38e: 09 80     -         ora #$80
e390: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e393: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e396: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e398: 60        -         rts
e399: a9 22     - fill_triangle_:lda #CMD_FILL_TRIANGLE
e39b: 8d 14 d0  -         sta DISCMD
e39e: ad 13 d0  -         lda DISCR
e3a1: 09 80     -         ora #$80
e3a3: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3a6: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3a9: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3ab: 60        -         rts
e3ac: a9 23     - draw_round_rect_:lda #CMD_DRAW_ROUND_RECT
e3ae: 8d 14 d0  -         sta DISCMD
e3b1: ad 13 d0  -         lda DISCR
e3b4: 09 80     -         ora #$80
e3b6: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3b9: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3bc: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3be: 60        -         rts
e3bf: a9 24     - fill_round_rect_:lda #CMD_FILL_ROUND_RECT
e3c1: 8d 14 d0  -         sta DISCMD
e3c4: ad 13 d0  -         lda DISCR
e3c7: 09 80     -         ora #$80
e3c9: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3cc: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3cf: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3d1: 60        -         rts
e3d2: a9 0e     - fill_screen_:lda #CMD_FILL_SCREEN
e3d4: 8d 14 d0  -         sta DISCMD
e3d7: ad 13 d0  -         lda DISCR
e3da: 09 80     -         ora #$80
e3dc: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3df: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3e2: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3e4: 60        -         rts
e3e5: a9 14     - draw_line_:lda #CMD_DRAW_LINE 
e3e7: 8d 14 d0  -         sta DISCMD
e3ea: ad 13 d0  -         lda DISCR
e3ed: 09 80     -         ora #$80
e3ef: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3f2: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3f5: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3f7: 60        -         rts
e3f8: a9 25     - draw_char_:lda #CMD_DRAW_CHAR
e3fa: 8d 14 d0  -         sta DISCMD
e3fd: ad 13 d0  -         lda DISCR
e400: 09 80     -         ora #$80
e402: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e405: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e408: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e40a: 60        -         rts
e40b: a9 30     - get_clock_cycle:lda #CMD_GET_CLOCK_CYCLE
e40d: 8d 14 d0  -         sta DISCMD
e410: ad 13 d0  -         lda DISCR
e413: 09 80     -         ora #$80
e415: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e418: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e41b: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e41d: 60        -         rts
e41e: a9 31     - get_millis:lda #CMD_GET_MILLIS
e420: 8d 14 d0  -         sta DISCMD
e423: ad 13 d0  -         lda DISCR
e426: 09 80     -         ora #$80
e428: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e42b: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e42e: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e430: 60        -         rts
e431: a9 32     - get_frame_time:lda #CMD_GET_FRAME_TIME
e433: 8d 14 d0  -         sta DISCMD
e436: ad 13 d0  -         lda DISCR
e439: 09 80     -         ora #$80
e43b: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e43e: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e441: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e443: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 4e 45 2f 4f 53 20 76 30 2e 32 20 62 79 20 46 69  - msg_01: .text "NE/OS v0.2 by FirstKlaas 2023"
f020: 72 73 74 4b 6c 61 61 73 20 32 30 32 33          
