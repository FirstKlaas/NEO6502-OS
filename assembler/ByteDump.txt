******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: a9 00     -         lda #<main_isr
0805: 8d fe ff  -         sta $fffe 
0808: a9 0a     -         lda #>main_isr
080a: 8d ff ff  -         sta $ffff
080d: a9 00     -         lda #<main_isr
080f: 8d fa ff  -         sta $fffa 
0812: a9 0a     -         lda #>main_isr
0814: 8d fb ff  -         sta $fffb
0817: ad 13 d0  -         lda DISCR   // Set the auto adjust 
081a: 09 0c     -         ora #$0C    // and wrap flag
081c: 8d 13 d0  -         sta DISCR                
081f: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0821: 8d 0d dc  -         sta $dc0d
0824: a9 20     -         lda #color
0826: 20 3c e1  -         jsr set_fg_color_
0829: a9 02     -         lda #xpos
082b: 20 0c e1  -         jsr set_cursor_x_
082e: a9 01     -         lda #ypos
0830: 20 24 e1  -         jsr set_cursor_y_    
0833: a9 cf     -         lda #<addr
0835: 85 e0     -         sta zpRegE0
0837: a9 08     -         lda #>addr
0839: 85 e1     -         sta zpRegE1
083b: 20 b0 e1  -         jsr print_text_
083e: 20 37 e2  -         jsr init_sprites_
0841: 4c 41 08  -         jmp !end-
0844: a9 f0     - setup_timer:lda #$f0
0846: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
0849: a9 00     -         lda #$00
084b: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
084e: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
0850: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
0853: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
0855: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0858: 60        -         rts
0859: c8 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_top:.byte $c8,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
0869: cc cc cc cc                                     
086d: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$ba,$00
087d: cc cc ba 00                                     
0881: c7 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_bottom:.byte $c7,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
0891: cc cc cc cc                                     
0895: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$bb,$00
08a5: cc cc bb 00                                     
08a9: da da da da da da da da da da da da da da da da  - text_bar:.fill 37,$da 
08b9: da da da da da da da da da da da da da da da da 
08c9: da da da da da                                  
08ce: 00        -         .byte 0
08cf: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 4b 65 72  - welcome:.text "NE/OS v0.1 - Kernel Size 974 bytes"
08df: 6e 65 6c 20 53 69 7a 65 20 39 37 34 20 62 79 74 
08ef: 65 73                                           
08f1: 00        -         .byte 0

[ISR]
0a00: 48        - main_isr:pha
0a01: 8a        -         txa 
0a02: 48        -         pha 
0a03: 98        -         tya 
0a04: 48        -         pha
0a05: 48        -         pha
0a06: a9 05     -         lda #xlo
0a08: 8d 15 d0  -         sta DIS00
0a0b: a9 00     -         lda #xhi 
0a0d: 8d 16 d0  -         sta DIS01
0a10: a9 b4     -         lda #y 
0a12: 8d 17 d0  -         sta DIS02
0a15: a9 fa     -         lda #lenlo 
0a17: 8d 18 d0  -         sta DIS03
0a1a: a9 00     -         lda #lenhi
0a1c: 8d 19 d0  -         sta DIS04
0a1f: a9 17     -         lda #col
0a21: 8d 1a d0  -         sta DIS05
0a24: 20 eb e1  -         jsr draw_horizonal_line_
0a27: 68        -         pla 
0a28: 48        -         pha
0a29: a9 05     -         lda #xlo
0a2b: 8d 15 d0  -         sta DIS00
0a2e: a9 00     -         lda #xhi 
0a30: 8d 16 d0  -         sta DIS01
0a33: a9 14     -         lda #y 
0a35: 8d 17 d0  -         sta DIS02
0a38: a9 fa     -         lda #width_lo 
0a3a: 8d 18 d0  -         sta DIS03
0a3d: a9 00     -         lda #width_hi
0a3f: 8d 19 d0  -         sta DIS04
0a42: a9 a0     -         lda #height
0a44: 8d 1a d0  -         sta DIS05
0a47: a9 37     -         lda #col 
0a49: 8d 1b d0  -         sta DIS06
0a4c: 20 24 e2  -         jsr fill_rect_
0a4f: 68        -         pla 
0a50: ad b9 e4  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
0a53: c9 0a     -         cmp #10             // 10 is the minimum x position
0a55: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
0a57: a9 01     - left_underflow:lda #$01
0a59: 8d a8 0a  -         sta operation+1
0a5c: 4c 6b 0a  -         jmp go_down 
0a5f: ad c0 e4  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
0a62: c9 ef     -         cmp #$ef            // Max xpos = 239
0a64: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
0a66: a9 ff     - right_overflow:lda #$ff 
0a68: 8d a8 0a  -         sta operation+1
0a6b: ad d9 e4  - go_down:lda SPRITE_YPOS
0a6e: c9 64     -         cmp #100
0a70: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
0a72: a0 08     - reset_ypos:ldy #8
0a74: a9 20     -         lda #$20              // Start Y position
0a76: 99 d9 e4  -         sta SPRITE_YPOS,y 
0a79: 88        -         dey
0a7a: 10 fa     -         bpl !loop-
0a7c: a0 08     -         ldy #8
0a7e: a9 30     -         lda #$30              // Start Y position
0a80: 99 e1 e4  -         sta SPRITE_YPOS+8,y 
0a83: 88        -         dey
0a84: 10 fa     -         bpl !loop-
0a86: a0 08     -         ldy #8
0a88: a9 40     -         lda #$40              // Start Y position
0a8a: 99 e9 e4  -         sta SPRITE_YPOS+16,y 
0a8d: 88        -         dey
0a8e: 10 fa     -         bpl !loop-
0a90: 4c a1 0a  -         jmp move    
0a93: a0 18     - decrease:ldy #24             // Calculate position fpr 24 sprites
0a95: b9 d9 e4  - yloop:  lda SPRITE_YPOS,y 
0a98: 18        -         clc
0a99: 69 04     -         adc #4
0a9b: 99 d9 e4  -         sta SPRITE_YPOS,y 
0a9e: 88        -         dey
0a9f: 10 f4     -         bpl yloop
0aa1: a0 07     - move:   ldy #7              // Y is the sprite index. We have 8 sprites in a row 
0aa3: b9 b9 e4  - loop:   lda SPRITE_XPOS,y   // Load current x position of the sprite   
0aa6: 18        -         clc
0aa7: 69 01     - operation:adc #1              // Add the speed
0aa9: 99 b9 e4  -         sta SPRITE_XPOS,y   // save the new xpos 
0aac: 99 c1 e4  -         sta SPRITE_XPOS+8,y // Also for the second row
0aaf: 99 c9 e4  -         sta SPRITE_XPOS+16,y // Also for the second row
0ab2: 88        -         dey
0ab3: 10 ee     -         bpl loop
0ab5: ad 0d dc  - exit:   lda $dc0d           // Acknowledge the IRQ            
0ab8: 68        -         pla
0ab9: a8        -         tay 
0aba: 68        -         pla 
0abb: aa        -         tax 
0abc: 68        -         pla
0abd: 40        -         rti

[Kernel Routines Entry Points]
e000: 4c 00 e1  - get_key:jmp get_key_
e003: 4c 0c e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c 24 e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 98 e1  - print_char:jmp print_char_

[Kernel Routines]
e100: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e103: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e105: 29 70     -         and #KEY_MOD_MASK
e107: aa        -         tax                     // Save modifiers
e108: ad 10 d0  -         lda KBD                 // Current key code to accu
e10b: 60        -         rts                     // Return
e10c: 48        - set_cursor_x_:pha                     // Save accu
e10d: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e110: a9 03     -         lda #CMD_SET_CURSOR_X
e112: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e115: ad 13 d0  -         lda DISCR
e118: 09 80     -         ora #$80
e11a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e11d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e120: 30 fb     -         bmi !wait-              // No! Let's wait
e122: 68        -         pla                     // Restore input parameter in accu
e123: 60        -         rts                     // Return
e124: 48        - set_cursor_y_:pha                     // Save accu
e125: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e128: a9 04     -         lda #CMD_SET_CURSOR_Y
e12a: 8d 14 d0  -         sta DISCMD
e12d: ad 13 d0  -         lda DISCR
e130: 09 80     -         ora #$80
e132: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e135: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e138: 30 fb     -         bmi !wait-              // No! Let's wait
e13a: 68        -         pla                     // Restore input parameter in accu
e13b: 60        -         rts                     // Return
e13c: 48        - set_fg_color_:pha                     // Save accu
e13d: 8d 15 d0  -         sta DIS00              // Save the color to the 
e140: a9 07     -         lda #CMD_SET_FG_COLOR
e142: 8d 14 d0  -         sta DISCMD
e145: ad 13 d0  -         lda DISCR
e148: 09 80     -         ora #$80
e14a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e14d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e150: 30 fb     -         bmi !wait-              // No! Let's wait
e152: 68        -         pla                     // Restore input parameter in accu
e153: 60        -         rts                     // Return
e154: 48        - set_bg_color_:pha                     // Save accu
e155: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e158: a9 08     -         lda #CMD_SET_BG_COLOR
e15a: 8d 14 d0  -         sta DISCMD
e15d: ad 13 d0  -         lda DISCR
e160: 09 80     -         ora #$80
e162: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e165: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e168: 30 fb     -         bmi !wait-              // No! Let's wait
e16a: 68        -         pla                     // Restore input parameter in accu
e16b: 60        -         rts                     // Return
e16c: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e16e: 8d 14 d0  -         sta DISCMD
e171: ad 13 d0  -         lda DISCR
e174: 09 80     -         ora #$80
e176: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e179: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e17c: 30 fb     -         bmi !wait-              // No! Let's wait
e17e: ad 15 d0  -         lda DIS00
e181: 60        -         rts                     // Return
e182: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e184: 8d 14 d0  -         sta DISCMD
e187: ad 13 d0  -         lda DISCR
e18a: 09 80     -         ora #$80
e18c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e18f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e192: 30 fb     -         bmi !wait-              // No! Let's wait
e194: ad 15 d0  -         lda DIS00
e197: 60        -         rts                     // Return
e198: 48        - print_char_:pha                     // Save accu
e199: 8d 15 d0  -         sta DIS00              // Save the char to the 
e19c: a9 0d     -         lda #CMD_WRITE_CHAR
e19e: 8d 14 d0  -         sta DISCMD
e1a1: ad 13 d0  -         lda DISCR
e1a4: 09 80     -         ora #$80
e1a6: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1a9: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1ac: 30 fb     -         bmi !wait-              // No! Let's wait
e1ae: 68        -         pla                     // Restore input parameter in accu
e1af: 60        -         rts                     // Return
e1b0: 8c c4 e1  - print_text_:sty (!end+)+1       // Save y register
e1b3: 8d c6 e1  -         sta (!end+)+3
e1b6: a0 00     -         ldy #0              // Index for the char within the string
e1b8: b1 e0     -         lda (zpRegE0),y     // load character
e1ba: f0 07     -         beq !end+
e1bc: 20 98 e1  -         jsr print_char_
e1bf: c8        -         iny
e1c0: 4c b8 e1  -         jmp !next-
e1c3: a0 00     -         ldy #0
e1c5: a9 00     -         lda #0
e1c7: 60        -         rts
e1c8: 48        - print_hex_:pha
e1c9: a9 00     -         lda #<hex_chars
e1cb: 85 e0     -         sta zpRegE0
e1cd: a9 f0     -         lda #>hex_chars
e1cf: 85 e1     -         sta zpRegE1
e1d1: 68        -         pla
e1d2: 48        -         pha
e1d3: 4a        -         lsr
e1d4: 4a        -         lsr
e1d5: 4a        -         lsr
e1d6: 4a        -         lsr
e1d7: 29 0f     -         and #$0f
e1d9: a8        -         tay
e1da: b1 e0     -         lda (zpRegE0),y
e1dc: 20 98 e1  -         jsr print_char_
e1df: 68        -         pla
e1e0: 48        -         pha
e1e1: 29 0f     -         and #$0f
e1e3: a8        -         tay
e1e4: b1 e0     -         lda (zpRegE0),y
e1e6: 20 98 e1  -         jsr print_char_
e1e9: 68        -         pla
e1ea: 60        -         rts
e1eb: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e1ed: 8d 14 d0  -         sta DISCMD
e1f0: ad 13 d0  -         lda DISCR
e1f3: 09 80     -         ora #$80
e1f5: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1f8: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e1fb: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e1fd: 60        -         rts
e1fe: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e200: 8d 14 d0  -         sta DISCMD
e203: ad 13 d0  -         lda DISCR
e206: 09 80     -         ora #$80
e208: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e20b: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e20e: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e210: 60        -         rts
e211: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e213: 8d 14 d0  -         sta DISCMD
e216: ad 13 d0  -         lda DISCR
e219: 09 80     -         ora #$80
e21b: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e21e: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e221: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e223: 60        -         rts
e224: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e226: 8d 14 d0  -         sta DISCMD
e229: ad 13 d0  -         lda DISCR
e22c: 09 80     -         ora #$80
e22e: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e231: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e234: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e236: 60        -         rts
e237: a2 00     - init_sprites_:ldx #index
e239: a9 69     -         lda #<address
e23b: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e23e: a9 e4     -         lda #>address
e240: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e243: a2 08     -         ldx #index
e245: a9 79     -         lda #<address
e247: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e24a: a9 e4     -         lda #>address
e24c: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e24f: a2 10     -         ldx #index
e251: a9 89     -         lda #<address
e253: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e256: a9 e4     -         lda #>address
e258: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e25b: a2 01     -         ldx #index
e25d: a9 69     -         lda #<address
e25f: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e262: a9 e4     -         lda #>address
e264: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e267: a2 09     -         ldx #index
e269: a9 79     -         lda #<address
e26b: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e26e: a9 e4     -         lda #>address
e270: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e273: a2 11     -         ldx #index
e275: a9 89     -         lda #<address
e277: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e27a: a9 e4     -         lda #>address
e27c: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e27f: a2 02     -         ldx #index
e281: a9 69     -         lda #<address
e283: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e286: a9 e4     -         lda #>address
e288: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e28b: a2 0a     -         ldx #index
e28d: a9 79     -         lda #<address
e28f: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e292: a9 e4     -         lda #>address
e294: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e297: a2 12     -         ldx #index
e299: a9 89     -         lda #<address
e29b: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e29e: a9 e4     -         lda #>address
e2a0: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e2a3: a2 03     -         ldx #index
e2a5: a9 69     -         lda #<address
e2a7: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e2aa: a9 e4     -         lda #>address
e2ac: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e2af: a2 0b     -         ldx #index
e2b1: a9 79     -         lda #<address
e2b3: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e2b6: a9 e4     -         lda #>address
e2b8: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e2bb: a2 13     -         ldx #index
e2bd: a9 89     -         lda #<address
e2bf: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e2c2: a9 e4     -         lda #>address
e2c4: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e2c7: a2 04     -         ldx #index
e2c9: a9 69     -         lda #<address
e2cb: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e2ce: a9 e4     -         lda #>address
e2d0: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e2d3: a2 0c     -         ldx #index
e2d5: a9 79     -         lda #<address
e2d7: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e2da: a9 e4     -         lda #>address
e2dc: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e2df: a2 14     -         ldx #index
e2e1: a9 89     -         lda #<address
e2e3: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e2e6: a9 e4     -         lda #>address
e2e8: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e2eb: a2 05     -         ldx #index
e2ed: a9 69     -         lda #<address
e2ef: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e2f2: a9 e4     -         lda #>address
e2f4: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e2f7: a2 0d     -         ldx #index
e2f9: a9 79     -         lda #<address
e2fb: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e2fe: a9 e4     -         lda #>address
e300: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e303: a2 15     -         ldx #index
e305: a9 89     -         lda #<address
e307: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e30a: a9 e4     -         lda #>address
e30c: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e30f: a2 06     -         ldx #index
e311: a9 69     -         lda #<address
e313: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e316: a9 e4     -         lda #>address
e318: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e31b: a2 0e     -         ldx #index
e31d: a9 79     -         lda #<address
e31f: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e322: a9 e4     -         lda #>address
e324: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e327: a2 16     -         ldx #index
e329: a9 89     -         lda #<address
e32b: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e32e: a9 e4     -         lda #>address
e330: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e333: a2 07     -         ldx #index
e335: a9 69     -         lda #<address
e337: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e33a: a9 e4     -         lda #>address
e33c: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e33f: a2 0f     -         ldx #index
e341: a9 79     -         lda #<address
e343: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e346: a9 e4     -         lda #>address
e348: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e34b: a2 17     -         ldx #index
e34d: a9 89     -         lda #<address
e34f: 9d 59 e5  -         sta SPRITE_DATA_LO, x
e352: a9 e4     -         lda #>address
e354: 9d 79 e5  -         sta SPRITE_DATA_HI, x                
e357: a2 00     -         ldx #index
e359: bd 99 e4  -         lda SPRITE_FLAGS, x
e35c: 05 c0     -         ora SPRITE_ENABLE_FLAG
e35e: 9d 99 e4  -         sta SPRITE_FLAGS, x
e361: a2 01     -         ldx #index
e363: bd 99 e4  -         lda SPRITE_FLAGS, x
e366: 05 c0     -         ora SPRITE_ENABLE_FLAG
e368: 9d 99 e4  -         sta SPRITE_FLAGS, x
e36b: a2 02     -         ldx #index
e36d: bd 99 e4  -         lda SPRITE_FLAGS, x
e370: 05 c0     -         ora SPRITE_ENABLE_FLAG
e372: 9d 99 e4  -         sta SPRITE_FLAGS, x
e375: a2 03     -         ldx #index
e377: bd 99 e4  -         lda SPRITE_FLAGS, x
e37a: 05 c0     -         ora SPRITE_ENABLE_FLAG
e37c: 9d 99 e4  -         sta SPRITE_FLAGS, x
e37f: a2 04     -         ldx #index
e381: bd 99 e4  -         lda SPRITE_FLAGS, x
e384: 05 c0     -         ora SPRITE_ENABLE_FLAG
e386: 9d 99 e4  -         sta SPRITE_FLAGS, x
e389: a2 05     -         ldx #index
e38b: bd 99 e4  -         lda SPRITE_FLAGS, x
e38e: 05 c0     -         ora SPRITE_ENABLE_FLAG
e390: 9d 99 e4  -         sta SPRITE_FLAGS, x
e393: a2 06     -         ldx #index
e395: bd 99 e4  -         lda SPRITE_FLAGS, x
e398: 05 c0     -         ora SPRITE_ENABLE_FLAG
e39a: 9d 99 e4  -         sta SPRITE_FLAGS, x
e39d: a2 07     -         ldx #index
e39f: bd 99 e4  -         lda SPRITE_FLAGS, x
e3a2: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3a4: 9d 99 e4  -         sta SPRITE_FLAGS, x
e3a7: a2 08     -         ldx #index
e3a9: bd 99 e4  -         lda SPRITE_FLAGS, x
e3ac: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3ae: 9d 99 e4  -         sta SPRITE_FLAGS, x
e3b1: a2 09     -         ldx #index
e3b3: bd 99 e4  -         lda SPRITE_FLAGS, x
e3b6: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3b8: 9d 99 e4  -         sta SPRITE_FLAGS, x
e3bb: a2 0a     -         ldx #index
e3bd: bd 99 e4  -         lda SPRITE_FLAGS, x
e3c0: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3c2: 9d 99 e4  -         sta SPRITE_FLAGS, x
e3c5: a2 0b     -         ldx #index
e3c7: bd 99 e4  -         lda SPRITE_FLAGS, x
e3ca: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3cc: 9d 99 e4  -         sta SPRITE_FLAGS, x
e3cf: a2 0c     -         ldx #index
e3d1: bd 99 e4  -         lda SPRITE_FLAGS, x
e3d4: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3d6: 9d 99 e4  -         sta SPRITE_FLAGS, x
e3d9: a2 0d     -         ldx #index
e3db: bd 99 e4  -         lda SPRITE_FLAGS, x
e3de: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3e0: 9d 99 e4  -         sta SPRITE_FLAGS, x
e3e3: a2 0e     -         ldx #index
e3e5: bd 99 e4  -         lda SPRITE_FLAGS, x
e3e8: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3ea: 9d 99 e4  -         sta SPRITE_FLAGS, x
e3ed: a2 0f     -         ldx #index
e3ef: bd 99 e4  -         lda SPRITE_FLAGS, x
e3f2: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3f4: 9d 99 e4  -         sta SPRITE_FLAGS, x
e3f7: a2 10     -         ldx #index
e3f9: bd 99 e4  -         lda SPRITE_FLAGS, x
e3fc: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3fe: 9d 99 e4  -         sta SPRITE_FLAGS, x
e401: a2 11     -         ldx #index
e403: bd 99 e4  -         lda SPRITE_FLAGS, x
e406: 05 c0     -         ora SPRITE_ENABLE_FLAG
e408: 9d 99 e4  -         sta SPRITE_FLAGS, x
e40b: a2 12     -         ldx #index
e40d: bd 99 e4  -         lda SPRITE_FLAGS, x
e410: 05 c0     -         ora SPRITE_ENABLE_FLAG
e412: 9d 99 e4  -         sta SPRITE_FLAGS, x
e415: a2 13     -         ldx #index
e417: bd 99 e4  -         lda SPRITE_FLAGS, x
e41a: 05 c0     -         ora SPRITE_ENABLE_FLAG
e41c: 9d 99 e4  -         sta SPRITE_FLAGS, x
e41f: a2 14     -         ldx #index
e421: bd 99 e4  -         lda SPRITE_FLAGS, x
e424: 05 c0     -         ora SPRITE_ENABLE_FLAG
e426: 9d 99 e4  -         sta SPRITE_FLAGS, x
e429: a2 15     -         ldx #index
e42b: bd 99 e4  -         lda SPRITE_FLAGS, x
e42e: 05 c0     -         ora SPRITE_ENABLE_FLAG
e430: 9d 99 e4  -         sta SPRITE_FLAGS, x
e433: a2 16     -         ldx #index
e435: bd 99 e4  -         lda SPRITE_FLAGS, x
e438: 05 c0     -         ora SPRITE_ENABLE_FLAG
e43a: 9d 99 e4  -         sta SPRITE_FLAGS, x
e43d: a2 17     -         ldx #index
e43f: bd 99 e4  -         lda SPRITE_FLAGS, x
e442: 05 c0     -         ora SPRITE_ENABLE_FLAG
e444: 9d 99 e4  -         sta SPRITE_FLAGS, x
e447: a9 99     -         lda #<SPRITE_DEFINITON_BLOCK
e449: 8d 15 d0  -         sta DIS00
e44c: a9 e4     -         lda #>SPRITE_DEFINITON_BLOCK
e44e: 8d 16 d0  -         sta DIS01
e451: a9 20     -         lda #32                 // Set number of sprites
e453: 8d 17 d0  -         sta DIS02
e456: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
e458: 8d 14 d0  -         sta DISCMD              //                                          
e45b: ad 13 d0  -         lda DISCR               // Load Display command register
e45e: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
e460: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e463: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e466: 30 fb     -         bmi !wait-              // No! Let's wait
e468: 60        -         rts
e469: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
e46b: 07 e0     -         .byte %00000111, %11100000
e46d: 0f f0     -         .byte %00001111, %11110000
e46f: 1d b8     -         .byte %00011101, %10111000
e471: 17 e8     -         .byte %00010111, %11101000
e473: 17 e8     -         .byte %00010111, %11101000
e475: 02 40     -         .byte %00000010, %01000000
e477: 06 60     -         .byte %00000110, %01100000
e479: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
e47b: 04 40     -         .byte %00000100, %01000000
e47d: 03 80     -         .byte %00000011, %10000000
e47f: 07 c0     -         .byte %00000111, %11000000
e481: 05 40     -         .byte %00000101, %01000000
e483: 07 c0     -         .byte %00000111, %11000000
e485: 0a a0     -         .byte %00001010, %10100000
e487: 0a a0     -         .byte %00001010, %10100000
e489: 00 00     - SPACE_ALIEN_C:.byte %00000000, %00000000
e48b: 04 40     -         .byte %00000100, %01000000
e48d: 0f e0     -         .byte %00001111, %11100000
e48f: 19 30     -         .byte %00011001, %00110000
e491: 1f f0     -         .byte %00011111, %11110000
e493: 1f f0     -         .byte %00011111, %11110000
e495: 15 50     -         .byte %00010101, %01010000
e497: 0a a0     -         .byte %00001010, %10100000
e499: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
e4a1: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
e4a9: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 16-23
e4b1: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e4b9: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
e4c1: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
e4c9: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 16-23
e4d1: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e4d9: 20 20 20 20 20 20 20 20                          - SPRITE_YPOS:.byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 00-07
e4e1: 30 30 30 30 30 30 30 30                          -         .byte $30, $30, $30, $30, $30, $30, $30, $30  // Sprite 08-15
e4e9: 40 40 40 40 40 40 40 40                          -         .byte $40, $40, $40, $40, $40, $40, $40, $40  // Sprite 16-23
e4f1: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e4f9: 1f 1f 1f 1f 1f 1f 1f 1f                          - SPRITE_COLOR:.byte $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f  // Sprite 00-07
e501: 23 23 23 23 23 23 23 23                          -         .byte $23, $23, $23, $23, $23, $23, $23, $23  // Sprite 08-15
e509: 2c 2c 2c 2c 2c 2c 2c 2c                          -         .byte $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2c  // Sprite 16-23
e511: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e519: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
e521: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
e529: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 16-23
e531: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e539: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
e541: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
e549: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 16-23
e551: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e559: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
e569: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e579: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
e589: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e599: a9 28     - debug_register_:lda #xpos
e59b: 20 0c e1  -         jsr set_cursor_x_
e59e: a9 01     -         lda #ypos
e5a0: 20 24 e1  -         jsr set_cursor_y_    
e5a3: a9 98     -         lda #color
e5a5: 20 3c e1  -         jsr set_fg_color_
e5a8: a9 36     -         lda #<debug_txt_01
e5aa: 85 e0     -         sta zpRegE0
e5ac: a9 e6     -         lda #>debug_txt_01
e5ae: 85 e1     -         sta zpRegE1
e5b0: 20 b0 e1  -         jsr print_text_
e5b3: a9 0b     -         lda #color
e5b5: 20 3c e1  -         jsr set_fg_color_
e5b8: a9 2e     -         lda #xpos
e5ba: 20 0c e1  -         jsr set_cursor_x_
e5bd: a9 01     -         lda #ypos
e5bf: 20 24 e1  -         jsr set_cursor_y_    
e5c2: ad 14 d0  -         lda addr
e5c5: 20 c8 e1  -         jsr print_hex_
e5c8: a9 20     -         lda #char
e5ca: 20 98 e1  -         jsr print_char_
e5cd: ad 13 d0  -         lda addr
e5d0: 20 c8 e1  -         jsr print_hex_
e5d3: a9 28     -         lda #xpos
e5d5: 20 0c e1  -         jsr set_cursor_x_
e5d8: a9 02     -         lda #ypos
e5da: 20 24 e1  -         jsr set_cursor_y_    
e5dd: ad 15 d0  -         lda addr
e5e0: 20 c8 e1  -         jsr print_hex_
e5e3: a9 20     -         lda #char
e5e5: 20 98 e1  -         jsr print_char_
e5e8: ad 16 d0  -         lda addr
e5eb: 20 c8 e1  -         jsr print_hex_
e5ee: a9 20     -         lda #char
e5f0: 20 98 e1  -         jsr print_char_
e5f3: ad 17 d0  -         lda addr
e5f6: 20 c8 e1  -         jsr print_hex_
e5f9: a9 20     -         lda #char
e5fb: 20 98 e1  -         jsr print_char_
e5fe: ad 18 d0  -         lda addr
e601: 20 c8 e1  -         jsr print_hex_
e604: a9 28     -         lda #xpos
e606: 20 0c e1  -         jsr set_cursor_x_
e609: a9 03     -         lda #ypos
e60b: 20 24 e1  -         jsr set_cursor_y_    
e60e: ad 19 d0  -         lda addr
e611: 20 c8 e1  -         jsr print_hex_
e614: a9 20     -         lda #char
e616: 20 98 e1  -         jsr print_char_
e619: ad 1a d0  -         lda addr
e61c: 20 c8 e1  -         jsr print_hex_
e61f: a9 20     -         lda #char
e621: 20 98 e1  -         jsr print_char_
e624: ad 1b d0  -         lda addr
e627: 20 c8 e1  -         jsr print_hex_
e62a: a9 20     -         lda #char
e62c: 20 98 e1  -         jsr print_char_
e62f: ad 1c d0  -         lda addr
e632: 20 c8 e1  -         jsr print_hex_
e635: 60        -         rts
e636: 44 49 53 50 4c                                   - debug_txt_01:.text "DISPL"
e63b: 00        -         .byte 0
e63c: 48        - byte_to_hex:pha                     // Save value to stack.
e63d: 29 0f     -         and #%00001111
e63f: 85 e0     -         sta zpRegE0             // store the lower nibble
e641: 68        -         pla                     // Load the original value
e642: 48        -         pha                     // and save it again
e643: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e644: 4a        -         lsr
e645: 4a        -         lsr
e646: 4a        -         lsr
e647: 85 e1     -         sta zpRegE1             // store the higher nibble
e649: 68        -         pla                     // restore the accu
e64a: 60        -         rts
e64b: a5 e0     - convert565:lda zpRegE0             // red value
e64d: 0a        -         asl                     // shift three to the left as we
e64e: 0a        -         asl                     // need to move the lower 5 bits of red
e64f: 0a        -         asl                     // to the bits 7-5
e650: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e652: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e654: 4a        -         lsr                     // lower bits of the output highbyte
e655: 4a        -         lsr
e656: 4a        -         lsr
e657: 29 07     -         and #%00000111          // Only the lower three bits.
e659: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e65b: 85 e0     -         sta zpRegE0             // Store the final high byte
e65d: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e65f: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e660: 0a        -         asl                     // it with zeros
e661: 0a        -         asl
e662: 0a        -         asl
e663: 0a        -         asl
e664: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e666: a5 e2     -         lda zpRegE2             // Load blue
e668: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e66a: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e66c: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e66e: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 57 65 6c 63 6f 6d 65 20 74 6f 20 46 69 72 73 74  - msg_01: .text "Welcome to FirstKlaas OS v0.1"
f020: 4b 6c 61 61 73 20 4f 53 20 76 30 2e 31          
