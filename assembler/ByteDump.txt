******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: a9 7f     -         lda #CIA_IRQ_MASK
0805: 8d 0d dc  -         sta REG_CIA_ICR
0808: ad 13 d0  -         lda DISCR   // Set the auto adjust 
080b: 09 0c     -         ora #$0C    // and wrap flag
080d: 8d 13 d0  -         sta DISCR                
0810: a9 29     -         lda #color 
0812: 8d 15 d0  -         sta DIS00
0815: 20 bb e3  -         jsr GFX.fill_screen_
0818: a9 2e     -         lda #color
081a: 20 02 e2  -         jsr set_fg_color_
081d: a9 02     -         lda #xpos
081f: 20 d2 e1  -         jsr set_cursor_x_
0822: a9 01     -         lda #ypos
0824: 20 ea e1  -         jsr set_cursor_y_    
0827: a9 79     -         lda #<addr
0829: 85 e0     -         sta zpRegE0
082b: a9 0a     -         lda #>addr
082d: 85 e1     -         sta zpRegE1
082f: 20 76 e2  -         jsr print_text_
0832: a9 1f     -         lda #color
0834: 20 02 e2  -         jsr set_fg_color_
0837: a9 3f     -         lda #xlo
0839: 8d 15 d0  -         sta DIS00
083c: a9 00     -         lda #xhi
083e: 8d 16 d0  -         sta DIS01
0841: a9 54     -         lda #y
0843: 8d 17 d0  -         sta DIS02
0846: a9 08     -         lda #rad
0848: 8d 18 d0  -         sta DIS03
084b: a9 1b     -         lda #color 
084d: 8d 19 d0  -         sta DIS04 
0850: 20 5c e3  -         jsr GFX.fill_circle_ 
0853: a9 0a     -         lda #xpos
0855: 20 d2 e1  -         jsr set_cursor_x_
0858: a9 0a     -         lda #ypos
085a: 20 ea e1  -         jsr set_cursor_y_    
085d: a9 af     -         lda #<addr
085f: 85 e0     -         sta zpRegE0
0861: a9 0a     -         lda #>addr
0863: 85 e1     -         sta zpRegE1
0865: 20 76 e2  -         jsr print_text_
0868: a9 0a     -         lda #xpos
086a: 20 d2 e1  -         jsr set_cursor_x_
086d: a9 0c     -         lda #ypos
086f: 20 ea e1  -         jsr set_cursor_y_    
0872: a9 bf     -         lda #<addr
0874: 85 e0     -         sta zpRegE0
0876: a9 0a     -         lda #>addr
0878: 85 e1     -         sta zpRegE1
087a: 20 76 e2  -         jsr print_text_
087d: 78        -         sei
087e: a9 70     -         lda #<label
0880: 8d fa ff  -         sta $fffa 
0883: a9 09     -         lda #>label
0885: 8d fb ff  -         sta $fffb
0888: 58        -         cli
0889: 78        -         sei
088a: a9 70     -         lda #<label
088c: 8d fe ff  -         sta $fffe 
088f: a9 09     -         lda #>label
0891: 8d ff ff  -         sta $ffff
0894: 58        -         cli
0895: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0897: 8d 0d dc  -         sta $dc0d
089a: ad ac 08  - endless:lda PROGRAM_ADR_CR
089d: 10 fb     -         bpl endless
089f: a9 7f     -         lda #CIA_IRQ_MASK
08a1: 8d 0d dc  -         sta REG_CIA_ICR
08a4: 20 72 10  -         jsr SpaceInvaders.run
08a7: 4c a7 08  -         jmp *
08aa: 00        - PROGRAM_ADR_LO:.byte 0
08ab: 00        - PROGRAM_ADR_HI:.byte 0
08ac: 00        - PROGRAM_ADR_CR:.byte 0
08ad: 20 bd 08  - all:    jsr drawLine
08b0: 20 de 08  -         jsr drawHLine
08b3: 20 00 09  -         jsr drawVLine
08b6: 20 49 09  -         jsr fillRect
08b9: 20 22 09  -         jsr drawRect
08bc: 60        -         rts
08bd: a9 00     - drawLine:lda #0     
08bf: 8d 15 d0  -         sta DIS00   // XPOS1 LO
08c2: 8d 16 d0  -         sta DIS01   // XPOS1 HI
08c5: 8d 17 d0  -         sta DIS02   // YPOS1
08c8: 8d 19 d0  -         sta DIS04   // XPOS2 HI
08cb: a9 ff     -         lda #255    
08cd: 8d 18 d0  -         sta DIS03   // XPOS2 LO
08d0: a9 f0     -         lda #240
08d2: 8d 1a d0  -         sta DIS05   // YPOS2
08d5: a9 20     -         lda #32
08d7: 8d 1b d0  -         sta DIS06   // COLOR
08da: 20 ce e3  -         jsr GFX.draw_line_
08dd: 60        -         rts
08de: a9 0a     - drawHLine:lda #10
08e0: 8d 15 d0  -         sta DIS00   // XPOS LO
08e3: a9 00     -         lda #0  
08e5: 8d 16 d0  -         sta DIS01   // XPOS HI
08e8: a9 19     -         lda #25
08ea: 8d 17 d0  -         sta DIS02   // YPOS
08ed: a9 64     -         lda #100  
08ef: 8d 18 d0  -         sta DIS03   // LENGTH LO
08f2: a9 00     -         lda #0
08f4: 8d 19 d0  -         sta DIS04   // LENGTH HI
08f7: a9 21     -         lda #33
08f9: 8d 1a d0  -         sta DIS05   // COLOR
08fc: 20 b1 e2  -         jsr GFX.draw_horizonal_line_
08ff: 60        -         rts
0900: a9 0a     - drawVLine:lda #10
0902: 8d 15 d0  -         sta DIS00   // XPOS LO
0905: a9 00     -         lda #0  
0907: 8d 16 d0  -         sta DIS01   // XPOS HI
090a: a9 19     -         lda #25
090c: 8d 17 d0  -         sta DIS02   // YPOS
090f: a9 64     -         lda #100  
0911: 8d 18 d0  -         sta DIS03   // LENGTH LO
0914: a9 00     -         lda #0
0916: 8d 19 d0  -         sta DIS04   // LENGTH HI
0919: a9 22     -         lda #34
091b: 8d 1a d0  -         sta DIS05   // COLOR
091e: 20 c4 e2  -         jsr GFX.draw_vertical_line_
0921: 60        -         rts
0922: a9 1e     - drawRect:lda #30
0924: 8d 15 d0  -         sta DIS00   // XPOS LO
0927: a9 00     -         lda #0
0929: 8d 16 d0  -         sta DIS01   // XPOS HI
092c: a9 50     -         lda #80
092e: 8d 17 d0  -         sta DIS02   // YPOS
0931: a9 00     -         lda #0
0933: 8d 18 d0  -         sta DIS03   // WIDTH LO
0936: a9 64     -         lda #100    
0938: 8d 19 d0  -         sta DIS04   // WIDTH HI
093b: a9 64     -         lda #100    
093d: 8d 1a d0  -         sta DIS05   // HEIGHT
0940: a9 20     -         lda #32
0942: 8d 1b d0  -         sta DIS06   // COLOR
0945: 20 ea e2  -         jsr GFX.draw_rect_
0948: 60        -         rts
0949: a9 28     - fillRect:lda #40
094b: 8d 15 d0  -         sta DIS00   // XPOS LO
094e: a9 00     -         lda #0
0950: 8d 16 d0  -         sta DIS01   // XPOS HI
0953: a9 14     -         lda #20
0955: 8d 17 d0  -         sta DIS02   // YPOS
0958: a9 00     -         lda #0
095a: 8d 18 d0  -         sta DIS03   // WIDTH LO
095d: a9 64     -         lda #100    
095f: 8d 19 d0  -         sta DIS04   // WIDTH HI
0962: a9 64     -         lda #100    
0964: 8d 1a d0  -         sta DIS05   // HEIGHT
0967: a9 23     -         lda #35
0969: 8d 1b d0  -         sta DIS06   // COLOR
096c: 20 fd e2  -         jsr GFX.fill_rect_
096f: 60        -         rts
0970: 48        - test_isr:pha
0971: da        -         phx
0972: 5a        -         phy
0973: ad 0d dc  -         lda REG_CIA_ICR
0976: 48        -         pha
0977: a9 00     -         lda #xlo
0979: 8d 15 d0  -         sta DIS00
097c: a9 00     -         lda #xhi 
097e: 8d 16 d0  -         sta DIS01
0981: a9 b0     -         lda #y 
0983: 8d 17 d0  -         sta DIS02
0986: a9 00     -         lda #width_lo 
0988: 8d 18 d0  -         sta DIS03
098b: a9 64     -         lda #width_hi
098d: 8d 19 d0  -         sta DIS04
0990: a9 18     -         lda #height
0992: 8d 1a d0  -         sta DIS05
0995: a9 04     -         lda #col 
0997: 8d 1b d0  -         sta DIS06
099a: 20 fd e2  -         jsr GFX.fill_rect_
099d: 68        -         pla 
099e: a9 09     -         lda #xpos
09a0: 20 d2 e1  -         jsr set_cursor_x_
09a3: a9 17     -         lda #ypos
09a5: 20 ea e1  -         jsr set_cursor_y_    
09a8: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
09ab: 8d 30 e1  -         sta HTD_IN
09ae: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
09b1: 8d 31 e1  -         sta HTD_IN+1
09b4: 20 68 e1  -         jsr bcd_convert_word_
09b7: ad 34 e1  -         lda HTD_OUT+2
09ba: 20 8e e2  -         jsr print_hex_
09bd: ad 33 e1  -         lda HTD_OUT+1
09c0: 20 8e e2  -         jsr print_hex_
09c3: ad 32 e1  -         lda HTD_OUT
09c6: 20 8e e2  -         jsr print_hex_
09c9: a9 02     -         lda #xpos
09cb: 20 d2 e1  -         jsr set_cursor_x_
09ce: a9 1a     -         lda #ypos
09d0: 20 ea e1  -         jsr set_cursor_y_    
09d3: a9 9c     -         lda #<addr
09d5: 85 e0     -         sta zpRegE0
09d7: a9 0a     -         lda #>addr
09d9: 85 e1     -         sta zpRegE1
09db: 20 76 e2  -         jsr print_text_
09de: ce 0c 0a  -         dec GAME_COUNTDOWN
09e1: d0 0f     -         bne exit
09e3: a9 72     -         lda #<SpaceInvaders.run
09e5: 8d aa 08  -         sta PROGRAM_ADR_LO
09e8: a9 10     -         lda #>SpaceInvaders.run
09ea: 8d ab 08  -         sta PROGRAM_ADR_HI
09ed: a9 80     -         lda #$80
09ef: 8d ac 08  -         sta PROGRAM_ADR_CR
09f2: 7a        - exit:   ply 
09f3: fa        -         plx 
09f4: 68        -         pla 
09f5: 40        -         rti
09f6: a9 f0     - setup_timer:lda #$f0
09f8: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
09fb: a9 00     -         lda #$00
09fd: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
0a00: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
0a02: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
0a05: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
0a07: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0a0a: 60        -         rts
0a0b: 00        - IRQ_DATA:.byte $00
0a0c: ff        - GAME_COUNTDOWN:.byte $ff
0a0d: 48        - kernel_isr:pha
0a0e: da        -         phx
0a0f: 5a        -         phy
0a10: ad 0d dc  -         lda REG_CIA_ICR
0a13: ce 0c 0a  -         dec GAME_COUNTDOWN
0a16: d0 36     -         bne exit
0a18: a9 80     -         lda #$80
0a1a: 8d ac 08  -         sta PROGRAM_ADR_CR
0a1d: 4c 4e 0a  -         jmp exit
0a20: 8d 0b 0a  - start_isr:sta IRQ_DATA
0a23: 8d ff d0  -         sta DEBUG
0a26: a9 04     - test_frame_irq:lda #FRAME_INTERRUPT_FLAG
0a28: 2c 0b 0a  -         bit IRQ_DATA
0a2b: f0 03     -         beq test_keyboard
0a2d: 4c 4e 0a  -         jmp exit
0a30: a9 08     - test_keyboard:lda #KBD_INTERRUPT_FLAG
0a32: 2c 0b 0a  -         bit IRQ_DATA
0a35: f0 06     -         beq test_timer_a 
0a37: 20 52 0a  -         jsr handle_key_event
0a3a: 4c 4e 0a  -         jmp exit
0a3d: a9 01     - test_timer_a:lda #TIMER_A_INTERRUPT_FLAG
0a3f: 2c 0b 0a  -         bit IRQ_DATA
0a42: f0 03     -         beq test_timer_b
0a44: 4c 4e 0a  -         jmp exit
0a47: a9 02     - test_timer_b:lda #TIMER_B_INTERRUPT_FLAG
0a49: 2c 0b 0a  -         bit IRQ_DATA
0a4c: f0 00     -         beq exit
0a4e: 7a        - exit:   ply 
0a4f: fa        -         plx 
0a50: 68        -         pla 
0a51: 40        -         rti
0a52: ad 10 d0  - handle_key_event:lda KBD
0a55: c9 32     -         cmp #$32    // Key 2
0a57: d0 1f     -         bne exit
0a59: a9 ea     -         lda #code
0a5b: 8d ff d0  -         sta DEBUG
0a5e: a9 7f     -         lda #CIA_IRQ_MASK
0a60: 8d 0d dc  -         sta REG_CIA_ICR
0a63: a9 20     -         lda #color 
0a65: 8d 15 d0  -         sta DIS00
0a68: 20 bb e3  -         jsr GFX.fill_screen_
0a6b: a9 3f     -         lda #color 
0a6d: 8d 15 d0  -         sta DIS00
0a70: 20 bb e3  -         jsr GFX.fill_screen_
0a73: a9 80     -         lda #$80
0a75: 8d ac 08  -         sta PROGRAM_ADR_CR
0a78: 60        - exit:   rts
0a79: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 46 69 72  - welcome:.text "NE/OS v0.1 - FirstKlaas Experience"
0a89: 73 74 4b 6c 61 61 73 20 45 78 70 65 72 69 65 6e 
0a99: 63 65                                           
0a9b: 00        -         .byte 0
0a9c: 46 52 41 4d 45 3a                                - txt_frame:.text "FRAME:"
0aa2: 00        -         .byte 0
0aa3: 4c 45 56 45 4c                                   - txt_level:.text "LEVEL"
0aa8: 00        -         .byte 0
0aa9: 53 43 4f 52 45                                   - txt_score:.text "SCORE"
0aae: 00        -         .byte 0
0aaf: 31 20 20 4c 6f 61 64 20 70 72 6f 67 72 61 6d     - txt_menue_1:.text "1  Load program"
0abe: 00        -         .byte 0
0abf: 32 20 20 50 6c 61 79 20 53 70 61 63 65 20 49 6e  - txt_menue_2:.text "2  Play Space Invaders"
0acf: 76 61 64 65 72 73                               
0ad5: 00        -         .byte 0

[Space Invaders]
1000: 48        - dummy_isr:pha
1001: da        -         phx
1002: 5a        -         phy
1003: 48        -         pha
1004: a9 00     -         lda #xlo
1006: 8d 15 d0  -         sta DIS00
1009: a9 00     -         lda #xhi 
100b: 8d 16 d0  -         sta DIS01
100e: a9 b0     -         lda #y 
1010: 8d 17 d0  -         sta DIS02
1013: a9 00     -         lda #width_lo 
1015: 8d 18 d0  -         sta DIS03
1018: a9 64     -         lda #width_hi
101a: 8d 19 d0  -         sta DIS04
101d: a9 18     -         lda #height
101f: 8d 1a d0  -         sta DIS05
1022: a9 04     -         lda #col 
1024: 8d 1b d0  -         sta DIS06
1027: 20 fd e2  -         jsr GFX.fill_rect_
102a: 68        -         pla 
102b: a9 09     -         lda #xpos
102d: 20 d2 e1  -         jsr set_cursor_x_
1030: a9 17     -         lda #ypos
1032: 20 ea e1  -         jsr set_cursor_y_    
1035: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
1038: 8d 30 e1  -         sta HTD_IN
103b: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
103e: 8d 31 e1  -         sta HTD_IN+1
1041: 20 68 e1  -         jsr bcd_convert_word_
1044: ad 34 e1  -         lda HTD_OUT+2
1047: 20 8e e2  -         jsr print_hex_
104a: ad 33 e1  -         lda HTD_OUT+1
104d: 20 8e e2  -         jsr print_hex_
1050: ad 32 e1  -         lda HTD_OUT
1053: 20 8e e2  -         jsr print_hex_
1056: a9 02     -         lda #xpos
1058: 20 d2 e1  -         jsr set_cursor_x_
105b: a9 1a     -         lda #ypos
105d: 20 ea e1  -         jsr set_cursor_y_    
1060: a9 9c     -         lda #<addr
1062: 85 e0     -         sta zpRegE0
1064: a9 0a     -         lda #>addr
1066: 85 e1     -         sta zpRegE1
1068: 20 76 e2  -         jsr print_text_
106b: ad 0d dc  -         lda REG_CIA_ICR
106e: 7a        -         ply 
106f: fa        -         plx 
1070: 68        -         pla 
1071: 40        -         rti
1072: a9 7f     - run:    lda #CIA_IRQ_MASK
1074: 8d 0d dc  -         sta REG_CIA_ICR
1077: a9 2a     -         lda #color 
1079: 8d 15 d0  -         sta DIS00
107c: 20 bb e3  -         jsr GFX.fill_screen_
107f: 20 a7 18  -         jsr init_alien_animation
1082: 20 75 16  -         jsr initialize_sprite_definition_block
1085: a9 00     -         lda #state
1087: 20 8b 10  -         jsr switch_game_state
108a: 60        -         rts
108b: 85 04     - switch_game_state:sta ZP_GAME_STATE
108d: c9 00     - gs_intro:cmp #GAME_STATE_INTRO
108f: d0 06     -         bne gs_level_start
1091: 20 9b 11  -         jsr Intro.init
1094: 4c ba 10  -         jmp exit
1097: c9 01     - gs_level_start:cmp #GAME_STATE_LEVEL_START
1099: d0 03     -         bne gs_fight
109b: 4c ba 10  -         jmp exit
109e: c9 02     - gs_fight:cmp #GAME_STATE_FIGHT
10a0: d0 06     -         bne gs_won
10a2: 20 fb 12  -         jsr Fight.init
10a5: 4c ba 10  -         jmp exit
10a8: c9 03     - gs_won: cmp #GAME_STATE_WON 
10aa: d0 03     -         bne gs_lost
10ac: 4c ba 10  -         jmp exit
10af: c9 04     - gs_lost:cmp #GAME_STATE_LOST
10b1: d0 00     -         bne gs_debug 
10b3: c9 05     - gs_debug:cmp #GAME_STATE_DEBUG 
10b5: d0 03     -         bne exit
10b7: 20 e1 14  -         jsr Debug.init
10ba: 60        - exit:   rts
10bb: a6 07     - animate_aliens:ldx ALIEN_ANIM_FRAME_HI
10bd: bd 55 16  -         lda ALIEN_A_SPRITE_ANIMATION_LO,x
10c0: 8d 15 16  -         sta SPRITE_DATA_LO+i    
10c3: 8d 16 16  -         sta SPRITE_DATA_LO+i    
10c6: 8d 17 16  -         sta SPRITE_DATA_LO+i    
10c9: 8d 18 16  -         sta SPRITE_DATA_LO+i    
10cc: 8d 19 16  -         sta SPRITE_DATA_LO+i    
10cf: 8d 1a 16  -         sta SPRITE_DATA_LO+i    
10d2: 8d 1b 16  -         sta SPRITE_DATA_LO+i    
10d5: 8d 1c 16  -         sta SPRITE_DATA_LO+i    
10d8: bd 59 16  -         lda ALIEN_A_SPRITE_ANIMATION_HI,x
10db: 8d 35 16  -         sta SPRITE_DATA_HI+i    
10de: 8d 36 16  -         sta SPRITE_DATA_HI+i    
10e1: 8d 37 16  -         sta SPRITE_DATA_HI+i    
10e4: 8d 38 16  -         sta SPRITE_DATA_HI+i    
10e7: 8d 39 16  -         sta SPRITE_DATA_HI+i    
10ea: 8d 3a 16  -         sta SPRITE_DATA_HI+i    
10ed: 8d 3b 16  -         sta SPRITE_DATA_HI+i    
10f0: 8d 3c 16  -         sta SPRITE_DATA_HI+i    
10f3: bd 5d 16  -         lda ALIEN_B_SPRITE_ANIMATION_LO,x
10f6: 8d 1d 16  -         sta SPRITE_DATA_LO+i    
10f9: 8d 1e 16  -         sta SPRITE_DATA_LO+i    
10fc: 8d 1f 16  -         sta SPRITE_DATA_LO+i    
10ff: 8d 20 16  -         sta SPRITE_DATA_LO+i    
1102: 8d 21 16  -         sta SPRITE_DATA_LO+i    
1105: 8d 22 16  -         sta SPRITE_DATA_LO+i    
1108: 8d 23 16  -         sta SPRITE_DATA_LO+i    
110b: 8d 24 16  -         sta SPRITE_DATA_LO+i    
110e: bd 61 16  -         lda ALIEN_B_SPRITE_ANIMATION_HI,x
1111: 8d 3d 16  -         sta SPRITE_DATA_HI+i    
1114: 8d 3e 16  -         sta SPRITE_DATA_HI+i    
1117: 8d 3f 16  -         sta SPRITE_DATA_HI+i    
111a: 8d 40 16  -         sta SPRITE_DATA_HI+i    
111d: 8d 41 16  -         sta SPRITE_DATA_HI+i    
1120: 8d 42 16  -         sta SPRITE_DATA_HI+i    
1123: 8d 43 16  -         sta SPRITE_DATA_HI+i    
1126: 8d 44 16  -         sta SPRITE_DATA_HI+i    
1129: 60        -         rts
112a: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
112c: 07 e0     -         .byte %00000111, %11100000
112e: 0f f0     -         .byte %00001111, %11110000
1130: 1d b8     -         .byte %00011101, %10111000
1132: 17 e8     -         .byte %00010111, %11101000
1134: 17 e8     -         .byte %00010111, %11101000
1136: 02 40     -         .byte %00000010, %01000000
1138: 06 60     -         .byte %00000110, %01100000
113a: 02 40     - SPACE_ALIEN_A1:.byte %00000010, %01000000
113c: 07 e0     -         .byte %00000111, %11100000
113e: 0f f0     -         .byte %00001111, %11110000
1140: 1d b8     -         .byte %00011101, %10111000
1142: 17 e8     -         .byte %00010111, %11101000
1144: 07 c0     -         .byte %00000111, %11000000
1146: 02 60     -         .byte %00000010, %01100000
1148: 06 00     -         .byte %00000110, %00000000
114a: 02 40     - SPACE_ALIEN_A2:.byte %00000010, %01000000
114c: 07 e0     -         .byte %00000111, %11100000
114e: 0f f0     -         .byte %00001111, %11110000
1150: 1d b8     -         .byte %00011101, %10111000
1152: 17 e8     -         .byte %00010111, %11101000
1154: 03 e0     -         .byte %00000011, %11100000
1156: 06 40     -         .byte %00000110, %01000000
1158: 00 60     -         .byte %00000000, %01100000
115a: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
115c: 04 40     -         .byte %00000100, %01000000
115e: 03 80     -         .byte %00000011, %10000000
1160: 07 c0     -         .byte %00000111, %11000000
1162: 05 40     -         .byte %00000101, %01000000
1164: 07 c0     -         .byte %00000111, %11000000
1166: 0a a0     -         .byte %00001010, %10100000
1168: 0a a0     -         .byte %00001010, %10100000
116a: 00 00     - SPACE_ALIEN_B1:.byte %00000000, %00000000
116c: 04 40     -         .byte %00000100, %01000000
116e: 03 80     -         .byte %00000011, %10000000
1170: 07 c0     -         .byte %00000111, %11000000
1172: 05 40     -         .byte %00000101, %01000000
1174: 07 c0     -         .byte %00000111, %11000000
1176: 0a a0     -         .byte %00001010, %10100000
1178: 15 40     -         .byte %00010101, %01000000
117a: 00 00     - SPACE_ALIEN_B2:.byte %00000000, %00000000
117c: 04 40     -         .byte %00000100, %01000000
117e: 03 80     -         .byte %00000011, %10000000
1180: 07 c0     -         .byte %00000111, %11000000
1182: 05 40     -         .byte %00000101, %01000000
1184: 07 c0     -         .byte %00000111, %11000000
1186: 0a a0     -         .byte %00001010, %10100000
1188: 05 50     -         .byte %00000101, %01010000
118a: 00 00     - SPACE_ALIEN_C:.byte %00000000, %00000000
118c: 04 40     -         .byte %00000100, %01000000
118e: 0f e0     -         .byte %00001111, %11100000
1190: 19 30     -         .byte %00011001, %00110000
1192: 1f f0     -         .byte %00011111, %11110000
1194: 1f f0     -         .byte %00011111, %11110000
1196: 15 50     -         .byte %00010101, %01010000
1198: 0a a0     -         .byte %00001010, %10100000
119a: 00        - START_DELAY:.byte 00
119b: a9 04     - init:   lda #FRAME_INTERRUPT_FLAG
119d: 8d 0d dc  -         sta $dc0d
11a0: a9 0a     -         lda #xpos
11a2: 20 d2 e1  -         jsr set_cursor_x_
11a5: a9 02     -         lda #ypos
11a7: 20 ea e1  -         jsr set_cursor_y_    
11aa: 78        -         sei
11ab: a9 c1     -         lda #<label
11ad: 8d fa ff  -         sta $fffa 
11b0: a9 11     -         lda #>label
11b2: 8d fb ff  -         sta $fffb
11b5: 58        -         cli
11b6: a9 64     -         lda #100
11b8: 8d 9a 11  -         sta START_DELAY
11bb: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
11bd: 8d 0d dc  -         sta $dc0d
11c0: 60        -         rts
11c1: 48        - run:    pha 
11c2: da        -         phx
11c3: 5a        -         phy  
11c4: ad 0d dc  -         lda REG_CIA_ICR
11c7: a9 0a     -         lda #xpos
11c9: 20 d2 e1  -         jsr set_cursor_x_
11cc: a9 06     -         lda #ypos
11ce: 20 ea e1  -         jsr set_cursor_y_    
11d1: a9 52     -         lda #<addr
11d3: 85 e0     -         sta zpRegE0
11d5: a9 12     -         lda #>addr
11d7: 85 e1     -         sta zpRegE1
11d9: 20 76 e2  -         jsr print_text_
11dc: a9 0a     -         lda #xpos
11de: 20 d2 e1  -         jsr set_cursor_x_
11e1: a9 09     -         lda #ypos
11e3: 20 ea e1  -         jsr set_cursor_y_    
11e6: a9 6d     -         lda #<addr
11e8: 85 e0     -         sta zpRegE0
11ea: a9 12     -         lda #>addr
11ec: 85 e1     -         sta zpRegE1
11ee: 20 76 e2  -         jsr print_text_
11f1: a9 0a     -         lda #xpos
11f3: 20 d2 e1  -         jsr set_cursor_x_
11f6: a9 0b     -         lda #ypos
11f8: 20 ea e1  -         jsr set_cursor_y_    
11fb: a9 7f     -         lda #<addr
11fd: 85 e0     -         sta zpRegE0
11ff: a9 12     -         lda #>addr
1201: 85 e1     -         sta zpRegE1
1203: 20 76 e2  -         jsr print_text_
1206: a9 0a     -         lda #xpos
1208: 20 d2 e1  -         jsr set_cursor_x_
120b: a9 0d     -         lda #ypos
120d: 20 ea e1  -         jsr set_cursor_y_    
1210: ad 9a 11  -         lda addr
1213: 20 8e e2  -         jsr print_hex_
1216: a9 0e     -         lda #xpos
1218: 20 d2 e1  -         jsr set_cursor_x_
121b: a9 0d     -         lda #ypos
121d: 20 ea e1  -         jsr set_cursor_y_    
1220: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
1223: 8d 30 e1  -         sta HTD_IN
1226: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
1229: 8d 31 e1  -         sta HTD_IN+1
122c: 20 68 e1  -         jsr bcd_convert_word_
122f: ad 34 e1  -         lda HTD_OUT+2
1232: 20 8e e2  -         jsr print_hex_
1235: ad 33 e1  -         lda HTD_OUT+1
1238: 20 8e e2  -         jsr print_hex_
123b: ad 32 e1  -         lda HTD_OUT
123e: 20 8e e2  -         jsr print_hex_
1241: ce 9a 11  -         dec START_DELAY
1244: d0 08     -         bne !exit_isr+
1246: a9 05     -         lda #state
1248: 20 8b 10  -         jsr switch_game_state
124b: 4c 4e 12  -         jmp !exit_isr+
124e: 7a        -         ply 
124f: fa        -         plx 
1250: 68        -         pla 
1251: 40        -         rti
1252: 53 50 41 43 45 20 49 4e 56 41 44 45 52 20 4f 4e  - intro_message:.text "SPACE INVADER ON NEOS65C02"
1262: 20 4e 45 4f 53 36 35 43 30 32                   
126c: 00        -         .byte 0
126d: 41 20 20 53 54 41 52 54 20 4e 45 57 20 47 41 4d  - men_start_game:.text "A  START NEW GAME"
127d: 45                                              
127e: 00        -         .byte 0       
127f: 42 20 20 42 41 43 4b 20 54 4f 20 4d 41 49 4e 20  - men_sback_to_main:.text "B  BACK TO MAIN MENU"
128f: 4d 45 4e 55                                     
1293: 00        -         .byte 0       
1294: 00 00     - CURRENT_VELOCITY:.word $0000
1296: 00 00     - TARGET_VELOCITY:.word $0000
1298: a9 04     - init:   lda #FRAME_INTERRUPT_FLAG
129a: 8d 0d dc  -         sta $dc0d
129d: 78        -         sei
129e: a9 fb     -         lda #<label
12a0: 8d fa ff  -         sta $fffa 
12a3: a9 12     -         lda #>label
12a5: 8d fb ff  -         sta $fffb
12a8: 58        -         cli
12a9: a2 1f     -         ldx #31
12ab: a9 80     -         lda #$80
12ad: 9d 55 15  -         sta SPRITE_FLAGS,x 
12b0: ca        -         dex 
12b1: 10 fa     -         bpl !loop- 
12b3: a2 07     -         ldx #7
12b5: a9 00     -         lda #0
12b7: 9d 95 15  -         sta SPRITE_YPOS,x 
12ba: 9d 85 15  -         sta SPRITE_XPOS+16,x 
12bd: ca        -         dex 
12be: 10 f7     -         bpl !loop- 
12c0: a2 07     -         ldx #7
12c2: a9 ff     -         lda #255
12c4: 9d 9d 15  -         sta SPRITE_YPOS+8,x 
12c7: 9d 8d 15  -         sta SPRITE_XPOS+24,x 
12ca: ca        -         dex 
12cb: 10 f7     -         bpl !loop- 
12cd: a2 07     -         ldx #7
12cf: a9 20     -         lda #$20
12d1: 9d 95 15  -         sta SPRITE_YPOS,x 
12d4: ca        -         dex 
12d5: 10 fa     -         bpl !loop-
12d7: a2 07     -         ldx #7
12d9: a9 30     -         lda #$30
12db: 9d 9d 15  -         sta SPRITE_YPOS+8,x 
12de: ca        -         dex 
12df: 10 fa     -         bpl !loop-
12e1: a2 07     -         ldx #7
12e3: a9 40     -         lda #$40
12e5: 9d a5 15  -         sta SPRITE_YPOS+16,x 
12e8: ca        -         dex 
12e9: 10 fa     -         bpl !loop-
12eb: a2 07     -         ldx #7
12ed: a9 50     -         lda #$50
12ef: 9d a5 15  -         sta SPRITE_YPOS+16,x 
12f2: ca        -         dex 
12f3: 10 fa     -         bpl !loop-
12f5: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
12f7: 8d 0d dc  -         sta $dc0d
12fa: 60        -         rts
12fb: a9 7f     - animate,init:lda #CIA_IRQ_MASK
12fd: 8d 0d dc  -         sta REG_CIA_ICR
1300: 78        -         sei
1301: a9 13     -         lda #<label
1303: 8d fa ff  -         sta $fffa 
1306: a9 13     -         lda #>label
1308: 8d fb ff  -         sta $fffb
130b: 58        -         cli
130c: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
130e: 8d 0d dc  -         sta $dc0d
1311: 60        -         rts
1312: 04        - shot_delay:.byte $04
1313: 48        - run:    pha
1314: da        -         phx 
1315: 5a        -         phy 
1316: ad 0d dc  -         lda REG_CIA_ICR
1319: a9 29     -         lda #color 
131b: 8d 15 d0  -         sta DIS00
131e: 20 bb e3  -         jsr GFX.fill_screen_
1321: 48        -         pha
1322: a9 05     -         lda #xlo
1324: 8d 15 d0  -         sta DIS00
1327: a9 00     -         lda #xhi 
1329: 8d 16 d0  -         sta DIS01
132c: a9 14     -         lda #y 
132e: 8d 17 d0  -         sta DIS02
1331: a9 fa     -         lda #width_lo 
1333: 8d 18 d0  -         sta DIS03
1336: a9 00     -         lda #width_hi
1338: 8d 19 d0  -         sta DIS04
133b: a9 a0     -         lda #height
133d: 8d 1a d0  -         sta DIS05
1340: a9 37     -         lda #col 
1342: 8d 1b d0  -         sta DIS06
1345: 20 fd e2  -         jsr GFX.fill_rect_
1348: 68        -         pla 
1349: a5 06     -         lda ALIEN_ANIM_FRAME_LO
134b: 18        -         clc
134c: 69 40     -         adc #%01000000
134e: 85 06     -         sta ALIEN_ANIM_FRAME_LO
1350: a5 07     -         lda ALIEN_ANIM_FRAME_HI
1352: 69 00     -         adc #00
1354: 29 03     -         and #3
1356: 85 07     -         sta ALIEN_ANIM_FRAME_HI
1358: 20 bb 10  -         jsr SpaceInvaders.animate_aliens
135b: 20 10 e3  -         jsr GFX.draw_sprites_
135e: 48        -         pha
135f: a9 05     -         lda #xlo
1361: 8d 15 d0  -         sta DIS00
1364: a9 00     -         lda #xhi 
1366: 8d 16 d0  -         sta DIS01
1369: a9 b4     -         lda #y 
136b: 8d 17 d0  -         sta DIS02
136e: a9 fa     -         lda #width_lo 
1370: 8d 18 d0  -         sta DIS03
1373: a9 00     -         lda #width_hi
1375: 8d 19 d0  -         sta DIS04
1378: a9 3c     -         lda #height
137a: 8d 1a d0  -         sta DIS05
137d: a9 2a     -         lda #col 
137f: 8d 1b d0  -         sta DIS06
1382: 20 fd e2  -         jsr GFX.fill_rect_
1385: 68        -         pla 
1386: 48        -         pha
1387: a9 05     -         lda #xlo
1389: 8d 15 d0  -         sta DIS00
138c: a9 00     -         lda #xhi 
138e: 8d 16 d0  -         sta DIS01
1391: a9 14     -         lda #y 
1393: 8d 17 d0  -         sta DIS02
1396: a9 fa     -         lda #width_lo 
1398: 8d 18 d0  -         sta DIS03
139b: a9 00     -         lda #width_hi
139d: 8d 19 d0  -         sta DIS04
13a0: a9 a0     -         lda #height
13a2: 8d 1a d0  -         sta DIS05
13a5: a9 17     -         lda #col 
13a7: 8d 1b d0  -         sta DIS06
13aa: 20 ea e2  -         jsr GFX.draw_rect_
13ad: 68        -         pla 
13ae: a9 2b     -         lda #color
13b0: 20 02 e2  -         jsr set_fg_color_
13b3: a9 02     -         lda #xpos
13b5: 20 d2 e1  -         jsr set_cursor_x_
13b8: a9 1a     -         lda #ypos
13ba: 20 ea e1  -         jsr set_cursor_y_    
13bd: a9 9c     -         lda #<addr
13bf: 85 e0     -         sta zpRegE0
13c1: a9 0a     -         lda #>addr
13c3: 85 e1     -         sta zpRegE1
13c5: 20 76 e2  -         jsr print_text_
13c8: a9 09     -         lda #xpos
13ca: 20 d2 e1  -         jsr set_cursor_x_
13cd: a9 17     -         lda #ypos
13cf: 20 ea e1  -         jsr set_cursor_y_    
13d2: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
13d5: 8d 30 e1  -         sta HTD_IN
13d8: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
13db: 8d 31 e1  -         sta HTD_IN+1
13de: 20 68 e1  -         jsr bcd_convert_word_
13e1: ad 34 e1  -         lda HTD_OUT+2
13e4: 20 8e e2  -         jsr print_hex_
13e7: ad 33 e1  -         lda HTD_OUT+1
13ea: 20 8e e2  -         jsr print_hex_
13ed: ad 32 e1  -         lda HTD_OUT
13f0: 20 8e e2  -         jsr print_hex_
13f3: a9 02     -         lda #xpos
13f5: 20 d2 e1  -         jsr set_cursor_x_
13f8: a9 17     -         lda #ypos
13fa: 20 ea e1  -         jsr set_cursor_y_    
13fd: a9 a3     -         lda #<addr
13ff: 85 e0     -         sta zpRegE0
1401: a9 0a     -         lda #>addr
1403: 85 e1     -         sta zpRegE1
1405: 20 76 e2  -         jsr print_text_
1408: a9 02     -         lda #xpos
140a: 20 d2 e1  -         jsr set_cursor_x_
140d: a9 18     -         lda #ypos
140f: 20 ea e1  -         jsr set_cursor_y_    
1412: a9 a9     -         lda #<addr
1414: 85 e0     -         sta zpRegE0
1416: a9 0a     -         lda #>addr
1418: 85 e1     -         sta zpRegE1
141a: 20 76 e2  -         jsr print_text_
141d: a9 09     -         lda #xpos
141f: 20 d2 e1  -         jsr set_cursor_x_
1422: a9 18     -         lda #ypos
1424: 20 ea e1  -         jsr set_cursor_y_    
1427: a5 02     -         lda SCORE_LO       
1429: 8d 30 e1  -         sta HTD_IN
142c: a5 03     -         lda SCORE_HI       
142e: 8d 31 e1  -         sta HTD_IN+1
1431: 20 68 e1  -         jsr bcd_convert_word_
1434: ad 34 e1  -         lda HTD_OUT+2
1437: 20 8e e2  -         jsr print_hex_
143a: ad 33 e1  -         lda HTD_OUT+1
143d: 20 8e e2  -         jsr print_hex_
1440: ad 32 e1  -         lda HTD_OUT
1443: 20 8e e2  -         jsr print_hex_
1446: ce 12 13  -         dec shot_delay      // Shot delay countdown
1449: d0 27     -         bne draw_bullets    // Still positive. No Shot
144b: 20 a5 e1  -         jsr rand8           // New delay in frames ( 0..255)
144e: 29 07     -         and #7
1450: 69 07     -         adc #7              // Increase to at least 7 frames. 
1452: 8d 12 13  -         sta shot_delay      // Store new delay
1455: 20 f4 18  -         jsr find_next_invisible_bullet
1458: 90 18     -         bcc draw_bullets    // We couln't find any free slot. So just draw.    
145a: 20 a5 e1  -         jsr rand8  // Random value to accu
145d: 29 0f     -         and #15    // One of the first sixteen aliens
145f: a8        -         tay        // Using y as alien index
1460: b9 75 15  -         lda SPRITE_XPOS,y
1463: 18        -         clc
1464: 69 08     -         adc #8
1466: 9d 75 19  -         sta ALIEN_BULLETS_X,x
1469: b9 95 15  -         lda SPRITE_YPOS,y
146c: 18        -         clc
146d: 69 04     -         adc #4
146f: 9d 7a 19  -         sta ALIEN_BULLETS_Y,x
1472: 20 09 19  - draw_bullets:jsr update_alien_bullets
1475: ad 75 15  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
1478: c9 0a     -         cmp #10             // 10 is the minimum x position
147a: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
147c: a9 01     - left_underflow:lda #$01
147e: 8d cd 14  -         sta operation+1
1481: 4c 90 14  -         jmp go_down 
1484: ad 7c 15  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
1487: c9 ef     -         cmp #$ef            // Max xpos = 239
1489: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
148b: a9 ff     - right_overflow:lda #$ff            // By adding -1, we move left.
148d: 8d cd 14  -         sta operation+1     // Write the new speed to the code (self modified)    
1490: ad 95 15  - go_down:lda SPRITE_YPOS
1493: c9 96     -         cmp #150
1495: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
1497: a0 07     - reset_ypos:ldy #7
1499: a9 20     -         lda #$20              // Start Y position
149b: 99 95 15  -         sta SPRITE_YPOS,y 
149e: 88        -         dey
149f: 10 fa     -         bpl !loop-
14a1: a0 07     -         ldy #7
14a3: a9 30     -         lda #$30              // Start Y position
14a5: 99 9d 15  -         sta SPRITE_YPOS+8,y 
14a8: 88        -         dey
14a9: 10 fa     -         bpl !loop-
14ab: a0 07     -         ldy #7
14ad: a9 40     -         lda #$40              // Start Y position
14af: 99 a5 15  -         sta SPRITE_YPOS+16,y 
14b2: 88        -         dey
14b3: 10 fa     -         bpl !loop-
14b5: 4c c6 14  -         jmp move
14b8: a0 17     - decrease:ldy #23             // Calculate position fpr 24 sprites
14ba: b9 95 15  -         lda SPRITE_YPOS,y 
14bd: 18        -         clc
14be: 69 04     -         adc #4
14c0: 99 95 15  -         sta SPRITE_YPOS,y 
14c3: 88        -         dey
14c4: 10 f4     -         bpl !loop-
14c6: a0 07     - move:   ldy #7               // Y is the sprite index. We have 8 sprites in a row 
14c8: b9 75 15  -         lda SPRITE_XPOS,y    // Load current x position of the sprite   
14cb: 18        -         clc
14cc: 69 01     - operation:adc #1               // Add the speed
14ce: 99 75 15  -         sta SPRITE_XPOS,y    // save the new xpos 
14d1: 99 7d 15  -         sta SPRITE_XPOS+8,y  // Also for the second row
14d4: 99 85 15  -         sta SPRITE_XPOS+16,y // Also for the second row
14d7: 88        -         dey
14d8: 10 ee     -         bpl !loop-
14da: ad 0d dc  - exit:   lda $dc0d            // Acknowledge the IRQ            
14dd: 7a        -         ply
14de: fa        -         plx  
14df: 68        -         pla
14e0: 40        -         rti
14e1: a9 7f     - init:   lda #CIA_IRQ_MASK
14e3: 8d 0d dc  -         sta REG_CIA_ICR
14e6: 78        -         sei
14e7: a9 f8     -         lda #<label
14e9: 8d fa ff  -         sta $fffa 
14ec: a9 14     -         lda #>label
14ee: 8d fb ff  -         sta $fffb
14f1: 58        -         cli
14f2: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
14f4: 8d 0d dc  -         sta $dc0d
14f7: 60        -         rts
14f8: 48        - run_debug:pha 
14f9: da        -         phx 
14fa: 5a        -         phy 
14fb: 48        -         pha
14fc: a9 00     -         lda #xlo
14fe: 8d 15 d0  -         sta DIS00
1501: a9 00     -         lda #xhi 
1503: 8d 16 d0  -         sta DIS01
1506: a9 00     -         lda #y 
1508: 8d 17 d0  -         sta DIS02
150b: a9 64     -         lda #width_lo 
150d: 8d 18 d0  -         sta DIS03
1510: a9 00     -         lda #width_hi
1512: 8d 19 d0  -         sta DIS04
1515: a9 0a     -         lda #height
1517: 8d 1a d0  -         sta DIS05
151a: a9 29     -         lda #col 
151c: 8d 1b d0  -         sta DIS06
151f: 20 fd e2  -         jsr GFX.fill_rect_
1522: 68        -         pla 
1523: ad 0d dc  -         lda REG_CIA_ICR
1526: a9 00     -         lda #xpos
1528: 20 d2 e1  -         jsr set_cursor_x_
152b: a9 00     -         lda #ypos
152d: 20 ea e1  -         jsr set_cursor_y_    
1530: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
1533: 8d 30 e1  -         sta HTD_IN
1536: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
1539: 8d 31 e1  -         sta HTD_IN+1
153c: 20 68 e1  -         jsr bcd_convert_word_
153f: ad 34 e1  -         lda HTD_OUT+2
1542: 20 8e e2  -         jsr print_hex_
1545: ad 33 e1  -         lda HTD_OUT+1
1548: 20 8e e2  -         jsr print_hex_
154b: ad 32 e1  -         lda HTD_OUT
154e: 20 8e e2  -         jsr print_hex_
1551: 7a        -         ply 
1552: fa        -         plx 
1553: 68        -         pla
1554: 40        -         rti
1555: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
155d: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
1565: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 16-23
156d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1575: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
157d: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
1585: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 16-23
158d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1595: 20 20 20 20 20 20 20 20                          - SPRITE_YPOS:.byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 00-07
159d: 30 30 30 30 30 30 30 30                          -         .byte $30, $30, $30, $30, $30, $30, $30, $30  // Sprite 08-15
15a5: 40 40 40 40 40 40 40 40                          -         .byte $40, $40, $40, $40, $40, $40, $40, $40  // Sprite 16-23
15ad: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
15b5: 1f 1f 1f 1f 1f 1f 1f 1f                          - SPRITE_COLOR:.byte $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f  // Sprite 00-07
15bd: 23 23 23 23 23 23 23 23                          -         .byte $23, $23, $23, $23, $23, $23, $23, $23  // Sprite 08-15
15c5: 2c 2c 2c 2c 2c 2c 2c 2c                          -         .byte $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2c  // Sprite 16-23
15cd: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
15d5: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
15dd: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
15e5: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 16-23
15ed: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
15f5: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
15fd: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
1605: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 16-23
160d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1615: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
1625: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
1635: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
1645: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
1655: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_LO:.fill 4, 0
1659: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_HI:.fill 4, 0
165d: 00 00 00 00                                      - ALIEN_B_SPRITE_ANIMATION_LO:.fill 4, 0
1661: 00 00 00 00                                      - ALIEN_B_SPRITE_ANIMATION_HI:.fill 4, 0
1665: 00 00 00 00                                      - ALIEN_C_SPRITE_ANIMATION_LO:.fill 4, 0
1669: 00 00 00 00                                      - ALIEN_C_SPRITE_ANIMATION_HI:.fill 4, 0
166d: 00 00 00 00                                      - ALIEN_D_SPRITE_ANIMATION_LO:.fill 4, 0
1671: 00 00 00 00                                      - ALIEN_D_SPRITE_ANIMATION_HI:.fill 4, 0
1675: a2 00     - initialize_sprite_definition_block:ldx #index
1677: a9 2a     -         lda #<address
1679: 9d 15 16  -         sta SPRITE_DATA_LO, x
167c: a9 11     -         lda #>address
167e: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1681: a2 08     -         ldx #index
1683: a9 5a     -         lda #<address
1685: 9d 15 16  -         sta SPRITE_DATA_LO, x
1688: a9 11     -         lda #>address
168a: 9d 35 16  -         sta SPRITE_DATA_HI, x                
168d: a2 10     -         ldx #index
168f: a9 8a     -         lda #<address
1691: 9d 15 16  -         sta SPRITE_DATA_LO, x
1694: a9 11     -         lda #>address
1696: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1699: a2 01     -         ldx #index
169b: a9 2a     -         lda #<address
169d: 9d 15 16  -         sta SPRITE_DATA_LO, x
16a0: a9 11     -         lda #>address
16a2: 9d 35 16  -         sta SPRITE_DATA_HI, x                
16a5: a2 09     -         ldx #index
16a7: a9 5a     -         lda #<address
16a9: 9d 15 16  -         sta SPRITE_DATA_LO, x
16ac: a9 11     -         lda #>address
16ae: 9d 35 16  -         sta SPRITE_DATA_HI, x                
16b1: a2 11     -         ldx #index
16b3: a9 8a     -         lda #<address
16b5: 9d 15 16  -         sta SPRITE_DATA_LO, x
16b8: a9 11     -         lda #>address
16ba: 9d 35 16  -         sta SPRITE_DATA_HI, x                
16bd: a2 02     -         ldx #index
16bf: a9 2a     -         lda #<address
16c1: 9d 15 16  -         sta SPRITE_DATA_LO, x
16c4: a9 11     -         lda #>address
16c6: 9d 35 16  -         sta SPRITE_DATA_HI, x                
16c9: a2 0a     -         ldx #index
16cb: a9 5a     -         lda #<address
16cd: 9d 15 16  -         sta SPRITE_DATA_LO, x
16d0: a9 11     -         lda #>address
16d2: 9d 35 16  -         sta SPRITE_DATA_HI, x                
16d5: a2 12     -         ldx #index
16d7: a9 8a     -         lda #<address
16d9: 9d 15 16  -         sta SPRITE_DATA_LO, x
16dc: a9 11     -         lda #>address
16de: 9d 35 16  -         sta SPRITE_DATA_HI, x                
16e1: a2 03     -         ldx #index
16e3: a9 2a     -         lda #<address
16e5: 9d 15 16  -         sta SPRITE_DATA_LO, x
16e8: a9 11     -         lda #>address
16ea: 9d 35 16  -         sta SPRITE_DATA_HI, x                
16ed: a2 0b     -         ldx #index
16ef: a9 5a     -         lda #<address
16f1: 9d 15 16  -         sta SPRITE_DATA_LO, x
16f4: a9 11     -         lda #>address
16f6: 9d 35 16  -         sta SPRITE_DATA_HI, x                
16f9: a2 13     -         ldx #index
16fb: a9 8a     -         lda #<address
16fd: 9d 15 16  -         sta SPRITE_DATA_LO, x
1700: a9 11     -         lda #>address
1702: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1705: a2 04     -         ldx #index
1707: a9 2a     -         lda #<address
1709: 9d 15 16  -         sta SPRITE_DATA_LO, x
170c: a9 11     -         lda #>address
170e: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1711: a2 0c     -         ldx #index
1713: a9 5a     -         lda #<address
1715: 9d 15 16  -         sta SPRITE_DATA_LO, x
1718: a9 11     -         lda #>address
171a: 9d 35 16  -         sta SPRITE_DATA_HI, x                
171d: a2 14     -         ldx #index
171f: a9 8a     -         lda #<address
1721: 9d 15 16  -         sta SPRITE_DATA_LO, x
1724: a9 11     -         lda #>address
1726: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1729: a2 05     -         ldx #index
172b: a9 2a     -         lda #<address
172d: 9d 15 16  -         sta SPRITE_DATA_LO, x
1730: a9 11     -         lda #>address
1732: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1735: a2 0d     -         ldx #index
1737: a9 5a     -         lda #<address
1739: 9d 15 16  -         sta SPRITE_DATA_LO, x
173c: a9 11     -         lda #>address
173e: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1741: a2 15     -         ldx #index
1743: a9 8a     -         lda #<address
1745: 9d 15 16  -         sta SPRITE_DATA_LO, x
1748: a9 11     -         lda #>address
174a: 9d 35 16  -         sta SPRITE_DATA_HI, x                
174d: a2 06     -         ldx #index
174f: a9 2a     -         lda #<address
1751: 9d 15 16  -         sta SPRITE_DATA_LO, x
1754: a9 11     -         lda #>address
1756: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1759: a2 0e     -         ldx #index
175b: a9 5a     -         lda #<address
175d: 9d 15 16  -         sta SPRITE_DATA_LO, x
1760: a9 11     -         lda #>address
1762: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1765: a2 16     -         ldx #index
1767: a9 8a     -         lda #<address
1769: 9d 15 16  -         sta SPRITE_DATA_LO, x
176c: a9 11     -         lda #>address
176e: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1771: a2 07     -         ldx #index
1773: a9 2a     -         lda #<address
1775: 9d 15 16  -         sta SPRITE_DATA_LO, x
1778: a9 11     -         lda #>address
177a: 9d 35 16  -         sta SPRITE_DATA_HI, x                
177d: a2 0f     -         ldx #index
177f: a9 5a     -         lda #<address
1781: 9d 15 16  -         sta SPRITE_DATA_LO, x
1784: a9 11     -         lda #>address
1786: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1789: a2 17     -         ldx #index
178b: a9 8a     -         lda #<address
178d: 9d 15 16  -         sta SPRITE_DATA_LO, x
1790: a9 11     -         lda #>address
1792: 9d 35 16  -         sta SPRITE_DATA_HI, x                
1795: a2 00     -         ldx #index
1797: bd 55 15  -         lda SPRITE_FLAGS, x
179a: 05 c0     -         ora SPRITE_ENABLE_FLAG
179c: 9d 55 15  -         sta SPRITE_FLAGS, x
179f: a2 01     -         ldx #index
17a1: bd 55 15  -         lda SPRITE_FLAGS, x
17a4: 05 c0     -         ora SPRITE_ENABLE_FLAG
17a6: 9d 55 15  -         sta SPRITE_FLAGS, x
17a9: a2 02     -         ldx #index
17ab: bd 55 15  -         lda SPRITE_FLAGS, x
17ae: 05 c0     -         ora SPRITE_ENABLE_FLAG
17b0: 9d 55 15  -         sta SPRITE_FLAGS, x
17b3: a2 03     -         ldx #index
17b5: bd 55 15  -         lda SPRITE_FLAGS, x
17b8: 05 c0     -         ora SPRITE_ENABLE_FLAG
17ba: 9d 55 15  -         sta SPRITE_FLAGS, x
17bd: a2 04     -         ldx #index
17bf: bd 55 15  -         lda SPRITE_FLAGS, x
17c2: 05 c0     -         ora SPRITE_ENABLE_FLAG
17c4: 9d 55 15  -         sta SPRITE_FLAGS, x
17c7: a2 05     -         ldx #index
17c9: bd 55 15  -         lda SPRITE_FLAGS, x
17cc: 05 c0     -         ora SPRITE_ENABLE_FLAG
17ce: 9d 55 15  -         sta SPRITE_FLAGS, x
17d1: a2 06     -         ldx #index
17d3: bd 55 15  -         lda SPRITE_FLAGS, x
17d6: 05 c0     -         ora SPRITE_ENABLE_FLAG
17d8: 9d 55 15  -         sta SPRITE_FLAGS, x
17db: a2 07     -         ldx #index
17dd: bd 55 15  -         lda SPRITE_FLAGS, x
17e0: 05 c0     -         ora SPRITE_ENABLE_FLAG
17e2: 9d 55 15  -         sta SPRITE_FLAGS, x
17e5: a2 08     -         ldx #index
17e7: bd 55 15  -         lda SPRITE_FLAGS, x
17ea: 05 c0     -         ora SPRITE_ENABLE_FLAG
17ec: 9d 55 15  -         sta SPRITE_FLAGS, x
17ef: a2 09     -         ldx #index
17f1: bd 55 15  -         lda SPRITE_FLAGS, x
17f4: 05 c0     -         ora SPRITE_ENABLE_FLAG
17f6: 9d 55 15  -         sta SPRITE_FLAGS, x
17f9: a2 0a     -         ldx #index
17fb: bd 55 15  -         lda SPRITE_FLAGS, x
17fe: 05 c0     -         ora SPRITE_ENABLE_FLAG
1800: 9d 55 15  -         sta SPRITE_FLAGS, x
1803: a2 0b     -         ldx #index
1805: bd 55 15  -         lda SPRITE_FLAGS, x
1808: 05 c0     -         ora SPRITE_ENABLE_FLAG
180a: 9d 55 15  -         sta SPRITE_FLAGS, x
180d: a2 0c     -         ldx #index
180f: bd 55 15  -         lda SPRITE_FLAGS, x
1812: 05 c0     -         ora SPRITE_ENABLE_FLAG
1814: 9d 55 15  -         sta SPRITE_FLAGS, x
1817: a2 0d     -         ldx #index
1819: bd 55 15  -         lda SPRITE_FLAGS, x
181c: 05 c0     -         ora SPRITE_ENABLE_FLAG
181e: 9d 55 15  -         sta SPRITE_FLAGS, x
1821: a2 0e     -         ldx #index
1823: bd 55 15  -         lda SPRITE_FLAGS, x
1826: 05 c0     -         ora SPRITE_ENABLE_FLAG
1828: 9d 55 15  -         sta SPRITE_FLAGS, x
182b: a2 0f     -         ldx #index
182d: bd 55 15  -         lda SPRITE_FLAGS, x
1830: 05 c0     -         ora SPRITE_ENABLE_FLAG
1832: 9d 55 15  -         sta SPRITE_FLAGS, x
1835: a2 10     -         ldx #index
1837: bd 55 15  -         lda SPRITE_FLAGS, x
183a: 05 c0     -         ora SPRITE_ENABLE_FLAG
183c: 9d 55 15  -         sta SPRITE_FLAGS, x
183f: a2 11     -         ldx #index
1841: bd 55 15  -         lda SPRITE_FLAGS, x
1844: 05 c0     -         ora SPRITE_ENABLE_FLAG
1846: 9d 55 15  -         sta SPRITE_FLAGS, x
1849: a2 12     -         ldx #index
184b: bd 55 15  -         lda SPRITE_FLAGS, x
184e: 05 c0     -         ora SPRITE_ENABLE_FLAG
1850: 9d 55 15  -         sta SPRITE_FLAGS, x
1853: a2 13     -         ldx #index
1855: bd 55 15  -         lda SPRITE_FLAGS, x
1858: 05 c0     -         ora SPRITE_ENABLE_FLAG
185a: 9d 55 15  -         sta SPRITE_FLAGS, x
185d: a2 14     -         ldx #index
185f: bd 55 15  -         lda SPRITE_FLAGS, x
1862: 05 c0     -         ora SPRITE_ENABLE_FLAG
1864: 9d 55 15  -         sta SPRITE_FLAGS, x
1867: a2 15     -         ldx #index
1869: bd 55 15  -         lda SPRITE_FLAGS, x
186c: 05 c0     -         ora SPRITE_ENABLE_FLAG
186e: 9d 55 15  -         sta SPRITE_FLAGS, x
1871: a2 16     -         ldx #index
1873: bd 55 15  -         lda SPRITE_FLAGS, x
1876: 05 c0     -         ora SPRITE_ENABLE_FLAG
1878: 9d 55 15  -         sta SPRITE_FLAGS, x
187b: a2 17     -         ldx #index
187d: bd 55 15  -         lda SPRITE_FLAGS, x
1880: 05 c0     -         ora SPRITE_ENABLE_FLAG
1882: 9d 55 15  -         sta SPRITE_FLAGS, x
1885: a9 55     -         lda #<SPRITE_DEFINITON_BLOCK
1887: 8d 15 d0  -         sta DIS00
188a: a9 15     -         lda #>SPRITE_DEFINITON_BLOCK
188c: 8d 16 d0  -         sta DIS01
188f: a9 20     -         lda #32                 // Set number of sprites
1891: 8d 17 d0  -         sta DIS02
1894: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
1896: 8d 14 d0  -         sta DISCMD              //                                          
1899: ad 13 d0  -         lda DISCR               // Load Display command register
189c: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
189e: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
18a1: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
18a4: 30 fb     -         bmi !wait-              // No! Let's wait
18a6: 60        -         rts
18a7: a9 2a     - init_alien_animation:lda #<SPACE_ALIEN_A
18a9: 8d 55 16  -         sta ALIEN_A_SPRITE_ANIMATION_LO
18ac: 8d 57 16  -         sta ALIEN_A_SPRITE_ANIMATION_LO+2
18af: a9 11     -         lda #>SPACE_ALIEN_A
18b1: 8d 59 16  -         sta ALIEN_A_SPRITE_ANIMATION_HI
18b4: 8d 5b 16  -         sta ALIEN_A_SPRITE_ANIMATION_HI+2
18b7: a9 00     -         lda #GAME_STATE_INTRO
18b9: 85 04     -         sta ZP_GAME_STATE
18bb: a9 3a     -         lda #<SPACE_ALIEN_A1
18bd: 8d 56 16  -         sta ALIEN_A_SPRITE_ANIMATION_LO+1
18c0: a9 11     -         lda #>SPACE_ALIEN_A1
18c2: 8d 5a 16  -         sta ALIEN_A_SPRITE_ANIMATION_HI+1
18c5: a9 4a     -         lda #<SPACE_ALIEN_A2
18c7: 8d 58 16  -         sta ALIEN_A_SPRITE_ANIMATION_LO+3
18ca: a9 11     -         lda #>SPACE_ALIEN_A2
18cc: 8d 5c 16  -         sta ALIEN_A_SPRITE_ANIMATION_HI+3
18cf: a9 5a     -         lda #<SPACE_ALIEN_B
18d1: 8d 5d 16  -         sta ALIEN_B_SPRITE_ANIMATION_LO
18d4: 8d 5f 16  -         sta ALIEN_B_SPRITE_ANIMATION_LO+2
18d7: a9 11     -         lda #>SPACE_ALIEN_B
18d9: 8d 61 16  -         sta ALIEN_B_SPRITE_ANIMATION_HI
18dc: 8d 63 16  -         sta ALIEN_B_SPRITE_ANIMATION_HI+2
18df: a9 6a     -         lda #<SPACE_ALIEN_B1
18e1: 8d 5e 16  -         sta ALIEN_B_SPRITE_ANIMATION_LO+1
18e4: a9 11     -         lda #>SPACE_ALIEN_B1
18e6: 8d 62 16  -         sta ALIEN_B_SPRITE_ANIMATION_HI+1
18e9: a9 7a     -         lda #<SPACE_ALIEN_B2
18eb: 8d 60 16  -         sta ALIEN_B_SPRITE_ANIMATION_LO+3
18ee: a9 11     -         lda #>SPACE_ALIEN_B2
18f0: 8d 64 16  -         sta ALIEN_B_SPRITE_ANIMATION_HI+3
18f3: 60        -         rts
18f4: a2 04     - find_next_invisible_bullet:ldx #(BULLET_COUNT-1)
18f6: bd 70 19  -         lda ALIEN_BULLETS_STAT,x 
18f9: 30 09     -         bmi !next+ // Visible. Next.
18fb: 09 80     -         ora #BULLET_ENABLE_FLAG
18fd: 9d 70 19  -         sta ALIEN_BULLETS_STAT,x
1900: 38        -         sec // Set carry flag (inicating we found a slot)
1901: 4c 08 19  -         jmp !end+
1904: ca        -         dex
1905: 10 ef     -         bpl !loop-
1907: 18        -         clc // Clear carry to indicate, we didn't found a free slot.
1908: 60        -         rts
1909: 20 13 19  - update_alien_bullets:jsr move_bullets
190c: 20 28 19  -         jsr check_bullets
190f: 20 42 19  -         jsr draw_bullets
1912: 60        -         rts
1913: a2 05     - move_bullets:ldx #(BULLET_COUNT)
1915: bd 70 19  -         lda ALIEN_BULLETS_STAT,x
1918: 10 0a     -         bpl !next+
191a: bd 7a 19  -         lda ALIEN_BULLETS_Y,x 
191d: 18        -         clc 
191e: 7d 7f 19  -         adc ALIEN_BULLETS_SPEED,x
1921: 9d 7a 19  -         sta ALIEN_BULLETS_Y,x
1924: ca        -         dex
1925: 10 ee     -         bpl !loop- 
1927: 60        -         rts
1928: a2 04     - check_bullets:ldx #(BULLET_COUNT-1)
192a: bd 70 19  -         lda ALIEN_BULLETS_STAT,x
192d: 10 0f     -         bpl !next+
192f: bd 7a 19  -         lda ALIEN_BULLETS_Y,x
1932: c9 aa     -         cmp #BULLET_MAX_HEIGHT    // if ypos > BULLET_MAX_HEIGHT hide bullet 
1934: 30 08     -         bmi !next+
1936: bd 70 19  - hide_bullet:lda ALIEN_BULLETS_STAT,x 
1939: 29 7f     -         and #(~BULLET_ENABLE_FLAG)
193b: 9d 70 19  -         sta ALIEN_BULLETS_STAT,x
193e: ca        -         dex
193f: 10 e9     -         bpl !loop-
1941: 60        -         rts
1942: a9 00     - draw_bullets:lda #0
1944: 8d 16 d0  -         sta DIS01                   // xpos high
1947: a9 04     -         lda #BULLET_LENGTH          // Length Low
1949: 8d 18 d0  -         sta DIS03
194c: a9 00     -         lda #0                      // Length High
194e: 8d 19 d0  -         sta DIS04   
1951: a9 17     -         lda #BULLET_COLOR           // Color
1953: 8d 1a d0  -         sta DIS05
1956: a2 04     -         ldx #(BULLET_COUNT-1)
1958: bd 70 19  -         lda ALIEN_BULLETS_STAT,x 
195b: 10 0f     -         bpl !next+
195d: bd 75 19  -         lda ALIEN_BULLETS_X,x       // X-Pos low
1960: 8d 15 d0  -         sta DIS00
1963: bd 7a 19  -         lda ALIEN_BULLETS_Y,x 
1966: 8d 17 d0  -         sta DIS02                   // ypos 
1969: 20 c4 e2  -         jsr GFX.draw_vertical_line_
196c: ca        -         dex 
196d: 10 e9     -         bpl !loop-
196f: 60        -         rts
1970: 04 04 04 04 04                                   - ALIEN_BULLETS_STAT:.fill BULLET_COUNT, $04  // Bit 0..3 length
1975: 00 00 00 00 00                                   - ALIEN_BULLETS_X:.fill BULLET_COUNT, $00  // xpos. If xpos > 255; stat bit 6 = 1
197a: 20 20 20 20 20                                   - ALIEN_BULLETS_Y:.fill BULLET_COUNT, $20  // ypos of the top
197f: 02 02 02 02 02                                   - ALIEN_BULLETS_SPEED:.fill BULLET_COUNT, $02

[Kernel Routines Entry Points]
e000: 4c c6 e1  - get_key:jmp get_key_
e003: 4c d2 e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c ea e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 5e e2  - print_char:jmp print_char_
e00c: 4c 23 e3  - draw_pixel:jmp GFX.draw_pixel_
e00f: 4c ce e3  - draw_line:jmp GFX.draw_line_
e012: 4c b1 e2  - draw_hline:jmp GFX.draw_horizonal_line_ 
e015: 4c c4 e2  - draw_vline:jmp GFX.draw_vertical_line_
e018: 4c ea e2  - draw_rect:jmp GFX.draw_rect_
e01b: 4c fd e2  - fill_rect:jmp GFX.fill_rect_
e01e: 4c 49 e3  - draw_circle:jmp GFX.draw_circle_
e021: 4c 5c e3  - fill_circle:jmp GFX.fill_circle_
e024: 4c 6f e3  - draw_triangle:jmp GFX.draw_triangle_
e027: 4c 82 e3  - fill_triangle:jmp GFX.fill_triangle_
e02a: 4c 95 e3  - draw_round_rect:jmp GFX.draw_round_rect_
e02d: 4c a8 e3  - fill_round_rect:jmp GFX.fill_round_rect_
e030: 4c e1 e3  - draw_char:jmp GFX.draw_char_

[Kernel Routines]
e100: 00 00 01 00 00 02 00 00 04 00 00 08              - BCD_LOOKUP_TABLE:.byte    $00, $00, $01, $00, $00, $02, $00, $00, $04, $00, $00, $08
e10c: 00 00 16 00 00 32 00 00 64 00 01 28              -         .byte    $00, $00, $16, $00, $00, $32, $00, $00, $64, $00, $01, $28
e118: 00 02 56 00 05 12 00 10 24 00 20 48              -         .byte    $00, $02, $56, $00, $05, $12, $00, $10, $24, $00, $20, $48
e124: 00 40 96 00 81 92 01 63 84 03 27 68              -         .byte    $00, $40, $96, $00, $81, $92, $01, $63, $84, $03, $27, $68
e130: 00 00     - HTD_IN: .byte $00, $00
e132: 00 00 00  - HTD_OUT:.byte $00, $00, $00 
e135: a5 e0     - convert565:lda zpRegE0             // red value
e137: 0a        -         asl                     // shift three to the left as we
e138: 0a        -         asl                     // need to move the lower 5 bits of red
e139: 0a        -         asl                     // to the bits 7-5
e13a: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e13c: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e13e: 4a        -         lsr                     // lower bits of the output highbyte
e13f: 4a        -         lsr
e140: 4a        -         lsr
e141: 29 07     -         and #%00000111          // Only the lower three bits.
e143: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e145: 85 e0     -         sta zpRegE0             // Store the final high byte
e147: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e149: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e14a: 0a        -         asl                     // it with zeros
e14b: 0a        -         asl
e14c: 0a        -         asl
e14d: 0a        -         asl
e14e: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e150: a5 e2     -         lda zpRegE2             // Load blue
e152: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e154: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e156: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e158: 60        -         rts
e159: 48        - byte_to_hex:pha                     // Save value to stack.
e15a: 29 0f     -         and #%00001111
e15c: 85 e0     -         sta zpRegE0             // store the lower nibble
e15e: 68        -         pla                     // Load the original value
e15f: 48        -         pha                     // and save it again
e160: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e161: 4a        -         lsr
e162: 4a        -         lsr
e163: 4a        -         lsr
e164: 85 e1     -         sta zpRegE1             // store the higher nibble
e166: 68        -         pla                     // restore the accu
e167: 60        -         rts
e168: f8        - bcd_convert_word_:sed
e169: da        -         phx
e16a: 48        -         pha
e16b: a9 00     -         lda #0
e16d: 8d 32 e1  -         sta HTD_OUT
e170: 8d 33 e1  -         sta HTD_OUT+1
e173: 8d 34 e1  -         sta HTD_OUT+2
e176: a2 2d     -         ldx #$2d
e178: 0e 30 e1  -         asl HTD_IN 
e17b: 2e 31 e1  -         rol HTD_IN+1
e17e: 90 1c     -         bcc htd1
e180: ad 32 e1  -         lda HTD_OUT
e183: 18        -         clc 
e184: 7d 02 e1  -         adc BCD_LOOKUP_TABLE+2,x
e187: 8d 32 e1  -         sta HTD_OUT
e18a: ad 33 e1  -         lda HTD_OUT+1
e18d: 7d 01 e1  -         adc BCD_LOOKUP_TABLE+1,x
e190: 8d 33 e1  -         sta HTD_OUT+1
e193: ad 34 e1  -         lda HTD_OUT+2
e196: 7d 00 e1  -         adc BCD_LOOKUP_TABLE,x
e199: 8d 34 e1  -         sta HTD_OUT+2
e19c: ca        - htd1:   dex
e19d: ca        -         dex 
e19e: ca        -         dex 
e19f: 10 d7     -         bpl !loop- 
e1a1: d8        -         cld
e1a2: 68        -         pla
e1a3: fa        -         plx 
e1a4: 60        -         rts
e1a5: a9 1f     - rand8,rand8b1-1:lda rand8b1:#31
e1a7: 0a        -         asl
e1a8: 49 35     - rand8a1-1:eor rand8a1:#53
e1aa: 8d a6 e1  -         sta rand8b1
e1ad: 6d a9 e1  -         adc rand8a1
e1b0: 8d a9 e1  -         sta rand8a1
e1b3: 60        -         rts
e1b4: 48        - set_seed:pha
e1b5: 29 d9     -         and #217
e1b7: 18        -         clc
e1b8: 69 0f     -         adc #<21263
e1ba: 8d a9 e1  -         sta rand8a1
e1bd: 68        -         pla
e1be: 29 26     -         and #255-217
e1c0: 69 53     -         adc #>21263
e1c2: 8d a6 e1  -         sta rand8b1
e1c5: 60        -         rts
e1c6: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e1c9: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e1cb: 29 70     -         and #KEY_MOD_MASK
e1cd: aa        -         tax                     // Save modifiers
e1ce: ad 10 d0  -         lda KBD                 // Current key code to accu
e1d1: 60        -         rts                     // Return
e1d2: 48        - set_cursor_x_:pha                     // Save accu
e1d3: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1d6: a9 03     -         lda #CMD_SET_CURSOR_X
e1d8: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e1db: ad 13 d0  -         lda DISCR
e1de: 09 80     -         ora #$80
e1e0: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1e3: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1e6: 30 fb     -         bmi !wait-              // No! Let's wait
e1e8: 68        -         pla                     // Restore input parameter in accu
e1e9: 60        -         rts                     // Return
e1ea: 48        - set_cursor_y_:pha                     // Save accu
e1eb: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1ee: a9 04     -         lda #CMD_SET_CURSOR_Y
e1f0: 8d 14 d0  -         sta DISCMD
e1f3: ad 13 d0  -         lda DISCR
e1f6: 09 80     -         ora #$80
e1f8: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1fb: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1fe: 30 fb     -         bmi !wait-              // No! Let's wait
e200: 68        -         pla                     // Restore input parameter in accu
e201: 60        -         rts                     // Return
e202: 48        - set_fg_color_:pha                     // Save accu
e203: 8d 15 d0  -         sta DIS00              // Save the color to the 
e206: a9 07     -         lda #CMD_SET_FG_COLOR
e208: 8d 14 d0  -         sta DISCMD
e20b: ad 13 d0  -         lda DISCR
e20e: 09 80     -         ora #$80
e210: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e213: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e216: 30 fb     -         bmi !wait-              // No! Let's wait
e218: 68        -         pla                     // Restore input parameter in accu
e219: 60        -         rts                     // Return
e21a: 48        - set_bg_color_:pha                     // Save accu
e21b: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e21e: a9 08     -         lda #CMD_SET_BG_COLOR
e220: 8d 14 d0  -         sta DISCMD
e223: ad 13 d0  -         lda DISCR
e226: 09 80     -         ora #$80
e228: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e22b: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e22e: 30 fb     -         bmi !wait-              // No! Let's wait
e230: 68        -         pla                     // Restore input parameter in accu
e231: 60        -         rts                     // Return
e232: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e234: 8d 14 d0  -         sta DISCMD
e237: ad 13 d0  -         lda DISCR
e23a: 09 80     -         ora #$80
e23c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e23f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e242: 30 fb     -         bmi !wait-              // No! Let's wait
e244: ad 15 d0  -         lda DIS00
e247: 60        -         rts                     // Return
e248: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e24a: 8d 14 d0  -         sta DISCMD
e24d: ad 13 d0  -         lda DISCR
e250: 09 80     -         ora #$80
e252: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e255: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e258: 30 fb     -         bmi !wait-              // No! Let's wait
e25a: ad 15 d0  -         lda DIS00
e25d: 60        -         rts                     // Return
e25e: 48        - print_char_:pha                     // Save accu
e25f: 8d 15 d0  -         sta DIS00              // Save the char to the 
e262: a9 0d     -         lda #CMD_WRITE_CHAR
e264: 8d 14 d0  -         sta DISCMD
e267: ad 13 d0  -         lda DISCR
e26a: 09 80     -         ora #$80
e26c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e26f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e272: 30 fb     -         bmi !wait-              // No! Let's wait
e274: 68        -         pla                     // Restore input parameter in accu
e275: 60        -         rts                     // Return
e276: 8c 8a e2  - print_text_:sty (!end+)+1       // Save y register
e279: 8d 8c e2  -         sta (!end+)+3
e27c: a0 00     -         ldy #0              // Index for the char within the string
e27e: b1 e0     -         lda (zpRegE0),y     // load character
e280: f0 07     -         beq !end+
e282: 20 5e e2  -         jsr print_char_
e285: c8        -         iny
e286: 4c 7e e2  -         jmp !next-
e289: a0 00     -         ldy #0
e28b: a9 00     -         lda #0
e28d: 60        -         rts
e28e: 48        - print_hex_:pha
e28f: a9 00     -         lda #<hex_chars
e291: 85 e0     -         sta zpRegE0
e293: a9 f0     -         lda #>hex_chars
e295: 85 e1     -         sta zpRegE1
e297: 68        -         pla
e298: 48        -         pha
e299: 4a        -         lsr
e29a: 4a        -         lsr
e29b: 4a        -         lsr
e29c: 4a        -         lsr
e29d: 29 0f     -         and #$0f
e29f: a8        -         tay
e2a0: b1 e0     -         lda (zpRegE0),y
e2a2: 20 5e e2  -         jsr print_char_
e2a5: 68        -         pla
e2a6: 48        -         pha
e2a7: 29 0f     -         and #$0f
e2a9: a8        -         tay
e2aa: b1 e0     -         lda (zpRegE0),y
e2ac: 20 5e e2  -         jsr print_char_
e2af: 68        -         pla
e2b0: 60        -         rts
e2b1: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e2b3: 8d 14 d0  -         sta DISCMD
e2b6: ad 13 d0  -         lda DISCR
e2b9: 09 80     -         ora #$80
e2bb: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2be: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2c1: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2c3: 60        -         rts
e2c4: a9 16     - draw_vertical_line_:lda #CMD_DRAW_VLINE
e2c6: 8d 14 d0  -         sta DISCMD
e2c9: ad 13 d0  -         lda DISCR
e2cc: 09 80     -         ora #$80
e2ce: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2d1: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2d4: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2d6: 60        -         rts
e2d7: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e2d9: 8d 14 d0  -         sta DISCMD
e2dc: ad 13 d0  -         lda DISCR
e2df: 09 80     -         ora #$80
e2e1: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2e4: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2e7: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2e9: 60        -         rts
e2ea: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e2ec: 8d 14 d0  -         sta DISCMD
e2ef: ad 13 d0  -         lda DISCR
e2f2: 09 80     -         ora #$80
e2f4: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2f7: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2fa: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2fc: 60        -         rts
e2fd: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e2ff: 8d 14 d0  -         sta DISCMD
e302: ad 13 d0  -         lda DISCR
e305: 09 80     -         ora #$80
e307: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e30a: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e30d: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e30f: 60        -         rts
e310: a9 1e     - draw_sprites_:lda #CMD_DRAW_SPRITES
e312: 8d 14 d0  -         sta DISCMD
e315: ad 13 d0  -         lda DISCR
e318: 09 80     -         ora #$80
e31a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e31d: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e320: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e322: 60        -         rts
e323: a9 20     - draw_pixel_:lda #CMD_DRAW_PIXEL
e325: 8d 14 d0  -         sta DISCMD
e328: ad 13 d0  -         lda DISCR
e32b: 09 80     -         ora #$80
e32d: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e330: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e333: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e335: 60        -         rts
e336: a9 1f     - draw_bitmap_:lda #CMD_DRAW_BITMAP
e338: 8d 14 d0  -         sta DISCMD
e33b: ad 13 d0  -         lda DISCR
e33e: 09 80     -         ora #$80
e340: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e343: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e346: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e348: 60        -         rts
e349: a9 1c     - draw_circle_:lda #CMD_DRAW_CIRCLE
e34b: 8d 14 d0  -         sta DISCMD
e34e: ad 13 d0  -         lda DISCR
e351: 09 80     -         ora #$80
e353: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e356: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e359: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e35b: 60        -         rts
e35c: a9 1d     - fill_circle_:lda #CMD_FILL_CIRCLE
e35e: 8d 14 d0  -         sta DISCMD
e361: ad 13 d0  -         lda DISCR
e364: 09 80     -         ora #$80
e366: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e369: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e36c: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e36e: 60        -         rts
e36f: a9 21     - draw_triangle_:lda #CMD_DRAW_TRIANGLE
e371: 8d 14 d0  -         sta DISCMD
e374: ad 13 d0  -         lda DISCR
e377: 09 80     -         ora #$80
e379: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e37c: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e37f: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e381: 60        -         rts
e382: a9 22     - fill_triangle_:lda #CMD_FILL_TRIANGLE
e384: 8d 14 d0  -         sta DISCMD
e387: ad 13 d0  -         lda DISCR
e38a: 09 80     -         ora #$80
e38c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e38f: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e392: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e394: 60        -         rts
e395: a9 23     - draw_round_rect_:lda #CMD_DRAW_ROUND_RECT
e397: 8d 14 d0  -         sta DISCMD
e39a: ad 13 d0  -         lda DISCR
e39d: 09 80     -         ora #$80
e39f: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3a2: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3a5: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3a7: 60        -         rts
e3a8: a9 24     - fill_round_rect_:lda #CMD_FILL_ROUND_RECT
e3aa: 8d 14 d0  -         sta DISCMD
e3ad: ad 13 d0  -         lda DISCR
e3b0: 09 80     -         ora #$80
e3b2: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3b5: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3b8: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3ba: 60        -         rts
e3bb: a9 0e     - fill_screen_:lda #CMD_FILL_SCREEN
e3bd: 8d 14 d0  -         sta DISCMD
e3c0: ad 13 d0  -         lda DISCR
e3c3: 09 80     -         ora #$80
e3c5: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3c8: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3cb: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3cd: 60        -         rts
e3ce: a9 14     - draw_line_:lda #CMD_DRAW_LINE 
e3d0: 8d 14 d0  -         sta DISCMD
e3d3: ad 13 d0  -         lda DISCR
e3d6: 09 80     -         ora #$80
e3d8: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3db: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3de: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3e0: 60        -         rts
e3e1: a9 25     - draw_char_:lda #CMD_DRAW_CHAR
e3e3: 8d 14 d0  -         sta DISCMD
e3e6: ad 13 d0  -         lda DISCR
e3e9: 09 80     -         ora #$80
e3eb: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3ee: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3f1: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3f3: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 4e 45 2f 4f 53 20 76 30 2e 32 20 62 79 20 46 69  - msg_01: .text "NE/OS v0.2 by FirstKlaas 2023"
f020: 72 73 74 4b 6c 61 61 73 20 32 30 32 33          
