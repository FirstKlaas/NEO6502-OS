******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: ad 13 d0  -         lda DISCR   // Set the auto adjust 
0806: 09 0c     -         ora #$0C    // and wrap flag
0808: 8d 13 d0  -         sta DISCR                
080b: 20 45 e3  -         jsr debug_register_
080e: a9 00     -         lda #xpos
0810: 20 0c e1  -         jsr set_cursor_x_
0813: a9 00     -         lda #ypos
0815: 20 24 e1  -         jsr set_cursor_y_    
0818: a9 d0     -         lda #color
081a: 20 3c e1  -         jsr set_fg_color_
081d: a9 7c     -         lda #<addr
081f: 85 e0     -         sta zpRegE0
0821: a9 08     -         lda #>addr
0823: 85 e1     -         sta zpRegE1
0825: 20 b0 e1  -         jsr print_text_
0828: a9 00     -         lda #xpos
082a: 20 0c e1  -         jsr set_cursor_x_
082d: a9 02     -         lda #ypos
082f: 20 24 e1  -         jsr set_cursor_y_    
0832: a9 d0     -         lda #color
0834: 20 3c e1  -         jsr set_fg_color_
0837: a9 a4     -         lda #<addr
0839: 85 e0     -         sta zpRegE0
083b: a9 08     -         lda #>addr
083d: 85 e1     -         sta zpRegE1
083f: 20 b0 e1  -         jsr print_text_
0842: a9 01     -         lda #xpos
0844: 20 0c e1  -         jsr set_cursor_x_
0847: a9 01     -         lda #ypos
0849: 20 24 e1  -         jsr set_cursor_y_    
084c: a9 e9     -         lda #color
084e: 20 3c e1  -         jsr set_fg_color_
0851: a9 cc     -         lda #<addr
0853: 85 e0     -         sta zpRegE0
0855: a9 08     -         lda #>addr
0857: 85 e1     -         sta zpRegE1
0859: 20 b0 e1  -         jsr print_text_
085c: a9 b2     -         lda #color
085e: 20 3c e1  -         jsr set_fg_color_
0861: a9 02     -         lda #xpos
0863: 20 0c e1  -         jsr set_cursor_x_
0866: a9 01     -         lda #ypos
0868: 20 24 e1  -         jsr set_cursor_y_    
086b: a9 f2     -         lda #<addr
086d: 85 e0     -         sta zpRegE0
086f: a9 08     -         lda #>addr
0871: 85 e1     -         sta zpRegE1
0873: 20 b0 e1  -         jsr print_text_
0876: 20 eb e1  -         jsr init_sprites_
0879: 4c 79 08  - end:    jmp end
087c: c8 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_top:.byte $c8,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
088c: cc cc cc cc                                     
0890: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$ba,$00
08a0: cc cc ba 00                                     
08a4: c7 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_bottom:.byte $c7,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
08b4: cc cc cc cc                                     
08b8: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$bb,$00
08c8: cc cc bb 00                                     
08cc: da da da da da da da da da da da da da da da da  - text_bar:.fill 37,$da 
08dc: da da da da da da da da da da da da da da da da 
08ec: da da da da da                                  
08f1: 00        -         .byte 0
08f2: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 4b 65 72  - welcome:.text "NE/OS v0.1 - Kernel Size 974 bytes"
0902: 6e 65 6c 20 53 69 7a 65 20 39 37 34 20 62 79 74 
0912: 65 73                                           
0914: 00        -         .byte 0

[Kernel Routines Entry Points]
e000: 4c 00 e1  - get_key:jmp get_key_
e003: 4c 0c e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c 24 e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 98 e1  - print_char:jmp print_char_

[Kernel Routines]
e100: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e103: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e105: 29 70     -         and #KEY_MOD_MASK
e107: aa        -         tax                     // Save modifiers
e108: ad 10 d0  -         lda KBD                 // Current key code to accu
e10b: 60        -         rts                     // Return
e10c: 48        - set_cursor_x_:pha                     // Save accu
e10d: 8d 15 d0  -         sta DIS_00              // Save the xpos to the 
e110: a9 03     -         lda #CMD_SET_CURSOR_X
e112: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e115: ad 13 d0  -         lda DISCR
e118: 09 80     -         ora #$80
e11a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e11d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e120: 30 fb     -         bmi !wait-              // No! Let's wait
e122: 68        -         pla                     // Restore input parameter in accu
e123: 60        -         rts                     // Return
e124: 48        - set_cursor_y_:pha                     // Save accu
e125: 8d 15 d0  -         sta DIS_00              // Save the xpos to the 
e128: a9 04     -         lda #CMD_SET_CURSOR_Y
e12a: 8d 14 d0  -         sta DISCMD
e12d: ad 13 d0  -         lda DISCR
e130: 09 80     -         ora #$80
e132: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e135: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e138: 30 fb     -         bmi !wait-              // No! Let's wait
e13a: 68        -         pla                     // Restore input parameter in accu
e13b: 60        -         rts                     // Return
e13c: 48        - set_fg_color_:pha                     // Save accu
e13d: 8d 15 d0  -         sta DIS_00              // Save the color to the 
e140: a9 07     -         lda #CMD_SET_FG_COLOR
e142: 8d 14 d0  -         sta DISCMD
e145: ad 13 d0  -         lda DISCR
e148: 09 80     -         ora #$80
e14a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e14d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e150: 30 fb     -         bmi !wait-              // No! Let's wait
e152: 68        -         pla                     // Restore input parameter in accu
e153: 60        -         rts                     // Return
e154: 48        - set_bg_color_:pha                     // Save accu
e155: 8d 15 d0  -         sta DIS_00              // Save the xpos to the 
e158: a9 08     -         lda #CMD_SET_BG_COLOR
e15a: 8d 14 d0  -         sta DISCMD
e15d: ad 13 d0  -         lda DISCR
e160: 09 80     -         ora #$80
e162: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e165: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e168: 30 fb     -         bmi !wait-              // No! Let's wait
e16a: 68        -         pla                     // Restore input parameter in accu
e16b: 60        -         rts                     // Return
e16c: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e16e: 8d 14 d0  -         sta DISCMD
e171: ad 13 d0  -         lda DISCR
e174: 09 80     -         ora #$80
e176: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e179: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e17c: 30 fb     -         bmi !wait-              // No! Let's wait
e17e: ad 15 d0  -         lda DIS_00
e181: 60        -         rts                     // Return
e182: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e184: 8d 14 d0  -         sta DISCMD
e187: ad 13 d0  -         lda DISCR
e18a: 09 80     -         ora #$80
e18c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e18f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e192: 30 fb     -         bmi !wait-              // No! Let's wait
e194: ad 15 d0  -         lda DIS_00
e197: 60        -         rts                     // Return
e198: 48        - print_char_:pha                     // Save accu
e199: 8d 15 d0  -         sta DIS_00              // Save the char to the 
e19c: a9 0d     -         lda #CMD_WRITE_CHAR
e19e: 8d 14 d0  -         sta DISCMD
e1a1: ad 13 d0  -         lda DISCR
e1a4: 09 80     -         ora #$80
e1a6: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1a9: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1ac: 30 fb     -         bmi !wait-              // No! Let's wait
e1ae: 68        -         pla                     // Restore input parameter in accu
e1af: 60        -         rts                     // Return
e1b0: 8c c4 e1  - print_text_:sty (!end+)+1       // Save y register
e1b3: 8d c6 e1  -         sta (!end+)+3
e1b6: a0 00     -         ldy #0              // Index for the char within the string
e1b8: b1 e0     -         lda (zpRegE0),y     // load character
e1ba: f0 07     -         beq !end+
e1bc: 20 98 e1  -         jsr print_char_
e1bf: c8        -         iny
e1c0: 4c b8 e1  -         jmp !next-
e1c3: a0 00     -         ldy #0
e1c5: a9 00     -         lda #0
e1c7: 60        -         rts
e1c8: 48        - print_hex_:pha
e1c9: a9 00     -         lda #<hex_chars
e1cb: 85 e0     -         sta zpRegE0
e1cd: a9 f0     -         lda #>hex_chars
e1cf: 85 e1     -         sta zpRegE1
e1d1: 68        -         pla
e1d2: 48        -         pha
e1d3: 4a        -         lsr
e1d4: 4a        -         lsr
e1d5: 4a        -         lsr
e1d6: 4a        -         lsr
e1d7: 29 0f     -         and #$0f
e1d9: a8        -         tay
e1da: b1 e0     -         lda (zpRegE0),y
e1dc: 20 98 e1  -         jsr print_char_
e1df: 68        -         pla
e1e0: 48        -         pha
e1e1: 29 0f     -         and #$0f
e1e3: a8        -         tay
e1e4: b1 e0     -         lda (zpRegE0),y
e1e6: 20 98 e1  -         jsr print_char_
e1e9: 68        -         pla
e1ea: 60        -         rts
e1eb: a2 00     - init_sprites_:ldx #index
e1ed: a9 25     -         lda #<address
e1ef: 9d 05 e3  -         sta SPRITE_DATA_LO, x
e1f2: a9 e2     -         lda #>address
e1f4: 9d 25 e3  -         sta SPRITE_DATA_HI, x                
e1f7: a2 01     -         ldx #index
e1f9: a9 35     -         lda #<address
e1fb: 9d 05 e3  -         sta SPRITE_DATA_LO, x
e1fe: a9 e2     -         lda #>address
e200: 9d 25 e3  -         sta SPRITE_DATA_HI, x                
e203: a9 45     -         lda #<SPRITE_DEFINITON_BLOCK
e205: 8d 15 d0  -         sta DIS_00
e208: a9 e2     -         lda #>SPRITE_DEFINITON_BLOCK
e20a: 8d 16 d0  -         sta DIS_01
e20d: a9 20     -         lda #32                 // Set number of sprites
e20f: 8d 17 d0  -         sta DIS_02
e212: a9 17     -         lda #CMD_SET_SDB        // Set command
e214: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e217: ad 13 d0  -         lda DISCR
e21a: 09 80     -         ora #$80
e21c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e21f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e222: 30 fb     -         bmi !wait-              // No! Let's wait
e224: 60        -         rts
e225: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
e227: 07 e0     -         .byte %00000111, %11100000
e229: 0f f0     -         .byte %00001111, %11110000
e22b: 1d b8     -         .byte %00011101, %10111000
e22d: 17 e8     -         .byte %00010111, %11101000
e22f: 17 e8     -         .byte %00010111, %11101000
e231: 02 40     -         .byte %00000010, %01000000
e233: 06 60     -         .byte %00000110, %01100000
e235: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
e237: 04 40     -         .byte %00000100, %01000000
e239: 03 80     -         .byte %00000011, %10000000
e23b: 07 c0     -         .byte %00000111, %11000000
e23d: 05 40     -         .byte %00000101, %01000000
e23f: 07 c0     -         .byte %00000111, %11000000
e241: 0a a0     -         .byte %00001010, %10100000
e243: 0a a0     -         .byte %00001010, %10100000
e245: 40 40 00 00 00 00 00 00                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $40, $40, $00, $00, $00, $00, $00, $00  // Sprite 00-07
e24d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 08-15
e255: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e25d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e265: 10 10 00 00 00 00 00 00                          - SPRITE_XPOS:.byte $10, $10, $00, $00, $00, $00, $00, $00  // Sprite 00-07
e26d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 08-15
e275: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e27d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e285: 40 50 00 00 00 00 00 00                          - SPRITE_YPOS:.byte $40, $50, $00, $00, $00, $00, $00, $00  // Sprite 00-07
e28d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 08-15
e295: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e29d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e2a5: 0a 0d 00 00 00 00 00 00                          - SPRITE_COLOR:.byte $0a, $0d, $00, $00, $00, $00, $00, $00  // Sprite 00-07
e2ad: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 08-15
e2b5: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e2bd: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e2c5: 10 10 00 00 00 00 00 00                          - SPRITE_WIDTH:.byte $10, $10, $00, $00, $00, $00, $00, $00  // Sprite 00-07
e2cd: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 08-15
e2d5: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e2dd: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e2e5: 08 08 00 00 00 00 00 00                          - SPRITE_HEIGHT:.byte $08, $08, $00, $00, $00, $00, $00, $00  // Sprite 00-07
e2ed: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 08-15
e2f5: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e2fd: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e305: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
e315: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e325: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
e335: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e345: a9 28     - debug_register_:lda #xpos
e347: 20 0c e1  -         jsr set_cursor_x_
e34a: a9 01     -         lda #ypos
e34c: 20 24 e1  -         jsr set_cursor_y_    
e34f: a9 98     -         lda #color
e351: 20 3c e1  -         jsr set_fg_color_
e354: a9 e2     -         lda #<debug_txt_01
e356: 85 e0     -         sta zpRegE0
e358: a9 e3     -         lda #>debug_txt_01
e35a: 85 e1     -         sta zpRegE1
e35c: 20 b0 e1  -         jsr print_text_
e35f: a9 0b     -         lda #color
e361: 20 3c e1  -         jsr set_fg_color_
e364: a9 2e     -         lda #xpos
e366: 20 0c e1  -         jsr set_cursor_x_
e369: a9 01     -         lda #ypos
e36b: 20 24 e1  -         jsr set_cursor_y_    
e36e: ad 14 d0  -         lda addr
e371: 20 c8 e1  -         jsr print_hex_
e374: a9 20     -         lda #char
e376: 20 98 e1  -         jsr print_char_
e379: ad 13 d0  -         lda addr
e37c: 20 c8 e1  -         jsr print_hex_
e37f: a9 28     -         lda #xpos
e381: 20 0c e1  -         jsr set_cursor_x_
e384: a9 02     -         lda #ypos
e386: 20 24 e1  -         jsr set_cursor_y_    
e389: ad 15 d0  -         lda addr
e38c: 20 c8 e1  -         jsr print_hex_
e38f: a9 20     -         lda #char
e391: 20 98 e1  -         jsr print_char_
e394: ad 16 d0  -         lda addr
e397: 20 c8 e1  -         jsr print_hex_
e39a: a9 20     -         lda #char
e39c: 20 98 e1  -         jsr print_char_
e39f: ad 17 d0  -         lda addr
e3a2: 20 c8 e1  -         jsr print_hex_
e3a5: a9 20     -         lda #char
e3a7: 20 98 e1  -         jsr print_char_
e3aa: ad 18 d0  -         lda addr
e3ad: 20 c8 e1  -         jsr print_hex_
e3b0: a9 28     -         lda #xpos
e3b2: 20 0c e1  -         jsr set_cursor_x_
e3b5: a9 03     -         lda #ypos
e3b7: 20 24 e1  -         jsr set_cursor_y_    
e3ba: ad 19 d0  -         lda addr
e3bd: 20 c8 e1  -         jsr print_hex_
e3c0: a9 20     -         lda #char
e3c2: 20 98 e1  -         jsr print_char_
e3c5: ad 1a d0  -         lda addr
e3c8: 20 c8 e1  -         jsr print_hex_
e3cb: a9 20     -         lda #char
e3cd: 20 98 e1  -         jsr print_char_
e3d0: ad 1b d0  -         lda addr
e3d3: 20 c8 e1  -         jsr print_hex_
e3d6: a9 20     -         lda #char
e3d8: 20 98 e1  -         jsr print_char_
e3db: ad 1c d0  -         lda addr
e3de: 20 c8 e1  -         jsr print_hex_
e3e1: 60        -         rts
e3e2: 44 49 53 50 4c                                   - debug_txt_01:.text "DISPL"
e3e7: 00        -         .byte 0
e3e8: 48        - byte_to_hex:pha                     // Save value to stack.
e3e9: 29 0f     -         and #%00001111
e3eb: 85 e0     -         sta zpRegE0             // store the lower nibble
e3ed: 68        -         pla                     // Load the original value
e3ee: 48        -         pha                     // and save it again
e3ef: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e3f0: 4a        -         lsr
e3f1: 4a        -         lsr
e3f2: 4a        -         lsr
e3f3: 85 e1     -         sta zpRegE1             // store the higher nibble
e3f5: 68        -         pla                     // restore the accu
e3f6: 60        -         rts
e3f7: a5 e0     - convert565:lda zpRegE0             // red value
e3f9: 0a        -         asl                     // shift three to the left as we
e3fa: 0a        -         asl                     // need to move the lower 5 bits of red
e3fb: 0a        -         asl                     // to the bits 7-5
e3fc: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e3fe: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e400: 4a        -         lsr                     // lower bits of the output highbyte
e401: 4a        -         lsr
e402: 4a        -         lsr
e403: 29 07     -         and #%00000111          // Only the lower three bits.
e405: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e407: 85 e0     -         sta zpRegE0             // Store the final high byte
e409: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e40b: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e40c: 0a        -         asl                     // it with zeros
e40d: 0a        -         asl
e40e: 0a        -         asl
e40f: 0a        -         asl
e410: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e412: a5 e2     -         lda zpRegE2             // Load blue
e414: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e416: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e418: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e41a: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 57 65 6c 63 6f 6d 65 20 74 6f 20 46 69 72 73 74  - msg_01: .text "Welcome to FirstKlaas OS v0.1"
f020: 4b 6c 61 61 73 20 4f 53 20 76 30 2e 31          
