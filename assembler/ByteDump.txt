******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: a9 01     -         lda #<main_isr
0805: 8d fe ff  -         sta $fffe 
0808: a9 0a     -         lda #>main_isr
080a: 8d ff ff  -         sta $ffff
080d: a9 01     -         lda #<main_isr
080f: 8d fa ff  -         sta $fffa 
0812: a9 0a     -         lda #>main_isr
0814: 8d fb ff  -         sta $fffb
0817: ad 13 d0  -         lda DISCR   // Set the auto adjust 
081a: 09 0c     -         ora #$0C    // and wrap flag
081c: 8d 13 d0  -         sta DISCR                
081f: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0821: 8d 0d dc  -         sta $dc0d
0824: a9 20     -         lda #color
0826: 20 3c e1  -         jsr set_fg_color_
0829: a9 02     -         lda #xpos
082b: 20 0c e1  -         jsr set_cursor_x_
082e: a9 01     -         lda #ypos
0830: 20 24 e1  -         jsr set_cursor_y_    
0833: a9 cf     -         lda #<addr
0835: 85 e0     -         sta zpRegE0
0837: a9 08     -         lda #>addr
0839: 85 e1     -         sta zpRegE1
083b: 20 b0 e1  -         jsr print_text_
083e: 20 07 00  -         jsr init_sprites_
0841: 4c 41 08  -         jmp !end-
0844: a9 f0     - setup_timer:lda #$f0
0846: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
0849: a9 00     -         lda #$00
084b: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
084e: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
0850: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
0853: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
0855: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0858: 60        -         rts
0859: c8 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_top:.byte $c8,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
0869: cc cc cc cc                                     
086d: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$ba,$00
087d: cc cc ba 00                                     
0881: c7 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_bottom:.byte $c7,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
0891: cc cc cc cc                                     
0895: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$bb,$00
08a5: cc cc bb 00                                     
08a9: da da da da da da da da da da da da da da da da  - text_bar:.fill 37,$da 
08b9: da da da da da da da da da da da da da da da da 
08c9: da da da da da                                  
08ce: 00        -         .byte 0
08cf: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 46 69 72  - welcome:.text "NE/OS v0.1 - FirstKlaas Experience"
08df: 73 74 4b 6c 61 61 73 20 45 78 70 65 72 69 65 6e 
08ef: 63 65                                           
08f1: 00        -         .byte 0
08f2: 46 52 41 4d 45 3a                                - txt_frame:.text "FRAME:"
08f8: 00        -         .byte 0

[ISR]
0a00: 01        - shot_delay:.byte 1
0a01: 48        - main_isr:pha
0a02: 8a        -         txa 
0a03: 48        -         pha 
0a04: 98        -         tya 
0a05: 48        -         pha
0a06: 48        -         pha
0a07: a9 05     -         lda #xlo
0a09: 8d 15 d0  -         sta DIS00
0a0c: a9 00     -         lda #xhi 
0a0e: 8d 16 d0  -         sta DIS01
0a11: a9 14     -         lda #y 
0a13: 8d 17 d0  -         sta DIS02
0a16: a9 fa     -         lda #width_lo 
0a18: 8d 18 d0  -         sta DIS03
0a1b: a9 00     -         lda #width_hi
0a1d: 8d 19 d0  -         sta DIS04
0a20: a9 a0     -         lda #height
0a22: 8d 1a d0  -         sta DIS05
0a25: a9 37     -         lda #col 
0a27: 8d 1b d0  -         sta DIS06
0a2a: 20 37 e2  -         jsr fill_rect_
0a2d: 68        -         pla 
0a2e: 20 4a e2  -         jsr draw_sprites_
0a31: 48        -         pha
0a32: a9 05     -         lda #xlo
0a34: 8d 15 d0  -         sta DIS00
0a37: a9 00     -         lda #xhi 
0a39: 8d 16 d0  -         sta DIS01
0a3c: a9 b5     -         lda #y 
0a3e: 8d 17 d0  -         sta DIS02
0a41: a9 fa     -         lda #width_lo 
0a43: 8d 18 d0  -         sta DIS03
0a46: a9 00     -         lda #width_hi
0a48: 8d 19 d0  -         sta DIS04
0a4b: a9 3b     -         lda #height
0a4d: 8d 1a d0  -         sta DIS05
0a50: a9 2a     -         lda #col 
0a52: 8d 1b d0  -         sta DIS06
0a55: 20 37 e2  -         jsr fill_rect_
0a58: 68        -         pla 
0a59: 48        -         pha
0a5a: a9 05     -         lda #xlo
0a5c: 8d 15 d0  -         sta DIS00
0a5f: a9 00     -         lda #xhi 
0a61: 8d 16 d0  -         sta DIS01
0a64: a9 b4     -         lda #y 
0a66: 8d 17 d0  -         sta DIS02
0a69: a9 fa     -         lda #lenlo 
0a6b: 8d 18 d0  -         sta DIS03
0a6e: a9 00     -         lda #lenhi
0a70: 8d 19 d0  -         sta DIS04
0a73: a9 17     -         lda #col
0a75: 8d 1a d0  -         sta DIS05
0a78: 20 eb e1  -         jsr draw_horizonal_line_
0a7b: 68        -         pla 
0a7c: a9 2b     -         lda #color
0a7e: 20 3c e1  -         jsr set_fg_color_
0a81: a9 02     -         lda #xpos
0a83: 20 0c e1  -         jsr set_cursor_x_
0a86: a9 17     -         lda #ypos
0a88: 20 24 e1  -         jsr set_cursor_y_    
0a8b: a9 f2     -         lda #<addr
0a8d: 85 e0     -         sta zpRegE0
0a8f: a9 08     -         lda #>addr
0a91: 85 e1     -         sta zpRegE1
0a93: 20 b0 e1  -         jsr print_text_
0a96: a9 09     -         lda #xpos
0a98: 20 0c e1  -         jsr set_cursor_x_
0a9b: a9 17     -         lda #ypos
0a9d: 20 24 e1  -         jsr set_cursor_y_    
0aa0: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
0aa3: 8d 75 04  -         sta HTD_IN
0aa6: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
0aa9: 8d 76 04  -         sta HTD_IN+1
0aac: 20 7a 04  -         jsr bcd_convert_word_
0aaf: ad 79 04  -         lda HTD_OUT+2
0ab2: 20 c8 e1  -         jsr print_hex_
0ab5: ad 78 04  -         lda HTD_OUT+1
0ab8: 20 c8 e1  -         jsr print_hex_
0abb: ad 77 04  -         lda HTD_OUT
0abe: 20 c8 e1  -         jsr print_hex_
0ac1: a9 12     -         lda #xpos
0ac3: 20 0c e1  -         jsr set_cursor_x_
0ac6: a9 17     -         lda #ypos
0ac8: 20 24 e1  -         jsr set_cursor_y_    
0acb: ad 36 04  -         lda ALIEN_BULLETS_X+i
0ace: 20 c8 e1  -         jsr print_hex_
0ad1: a9 15     -         lda #xpos
0ad3: 20 0c e1  -         jsr set_cursor_x_
0ad6: a9 17     -         lda #ypos
0ad8: 20 24 e1  -         jsr set_cursor_y_    
0adb: ad 37 04  -         lda ALIEN_BULLETS_X+i
0ade: 20 c8 e1  -         jsr print_hex_
0ae1: a9 18     -         lda #xpos
0ae3: 20 0c e1  -         jsr set_cursor_x_
0ae6: a9 17     -         lda #ypos
0ae8: 20 24 e1  -         jsr set_cursor_y_    
0aeb: ad 38 04  -         lda ALIEN_BULLETS_X+i
0aee: 20 c8 e1  -         jsr print_hex_
0af1: a9 1b     -         lda #xpos
0af3: 20 0c e1  -         jsr set_cursor_x_
0af6: a9 17     -         lda #ypos
0af8: 20 24 e1  -         jsr set_cursor_y_    
0afb: ad 39 04  -         lda ALIEN_BULLETS_X+i
0afe: 20 c8 e1  -         jsr print_hex_
0b01: a9 1e     -         lda #xpos
0b03: 20 0c e1  -         jsr set_cursor_x_
0b06: a9 17     -         lda #ypos
0b08: 20 24 e1  -         jsr set_cursor_y_    
0b0b: ad 3a 04  -         lda ALIEN_BULLETS_X+i
0b0e: 20 c8 e1  -         jsr print_hex_
0b11: a9 12     -         lda #xpos
0b13: 20 0c e1  -         jsr set_cursor_x_
0b16: a9 18     -         lda #ypos
0b18: 20 24 e1  -         jsr set_cursor_y_    
0b1b: ad 3b 04  -         lda ALIEN_BULLETS_Y+i
0b1e: 20 c8 e1  -         jsr print_hex_
0b21: a9 15     -         lda #xpos
0b23: 20 0c e1  -         jsr set_cursor_x_
0b26: a9 18     -         lda #ypos
0b28: 20 24 e1  -         jsr set_cursor_y_    
0b2b: ad 3c 04  -         lda ALIEN_BULLETS_Y+i
0b2e: 20 c8 e1  -         jsr print_hex_
0b31: a9 18     -         lda #xpos
0b33: 20 0c e1  -         jsr set_cursor_x_
0b36: a9 18     -         lda #ypos
0b38: 20 24 e1  -         jsr set_cursor_y_    
0b3b: ad 3d 04  -         lda ALIEN_BULLETS_Y+i
0b3e: 20 c8 e1  -         jsr print_hex_
0b41: a9 1b     -         lda #xpos
0b43: 20 0c e1  -         jsr set_cursor_x_
0b46: a9 18     -         lda #ypos
0b48: 20 24 e1  -         jsr set_cursor_y_    
0b4b: ad 3e 04  -         lda ALIEN_BULLETS_Y+i
0b4e: 20 c8 e1  -         jsr print_hex_
0b51: a9 1e     -         lda #xpos
0b53: 20 0c e1  -         jsr set_cursor_x_
0b56: a9 18     -         lda #ypos
0b58: 20 24 e1  -         jsr set_cursor_y_    
0b5b: ad 3f 04  -         lda ALIEN_BULLETS_Y+i
0b5e: 20 c8 e1  -         jsr print_hex_
0b61: a9 12     -         lda #xpos
0b63: 20 0c e1  -         jsr set_cursor_x_
0b66: a9 19     -         lda #ypos
0b68: 20 24 e1  -         jsr set_cursor_y_    
0b6b: ad 31 04  -         lda ALIEN_BULLETS_STAT+i
0b6e: 20 c8 e1  -         jsr print_hex_
0b71: a9 15     -         lda #xpos
0b73: 20 0c e1  -         jsr set_cursor_x_
0b76: a9 19     -         lda #ypos
0b78: 20 24 e1  -         jsr set_cursor_y_    
0b7b: ad 32 04  -         lda ALIEN_BULLETS_STAT+i
0b7e: 20 c8 e1  -         jsr print_hex_
0b81: a9 18     -         lda #xpos
0b83: 20 0c e1  -         jsr set_cursor_x_
0b86: a9 19     -         lda #ypos
0b88: 20 24 e1  -         jsr set_cursor_y_    
0b8b: ad 33 04  -         lda ALIEN_BULLETS_STAT+i
0b8e: 20 c8 e1  -         jsr print_hex_
0b91: a9 1b     -         lda #xpos
0b93: 20 0c e1  -         jsr set_cursor_x_
0b96: a9 19     -         lda #ypos
0b98: 20 24 e1  -         jsr set_cursor_y_    
0b9b: ad 34 04  -         lda ALIEN_BULLETS_STAT+i
0b9e: 20 c8 e1  -         jsr print_hex_
0ba1: a9 1e     -         lda #xpos
0ba3: 20 0c e1  -         jsr set_cursor_x_
0ba6: a9 19     -         lda #ypos
0ba8: 20 24 e1  -         jsr set_cursor_y_    
0bab: ad 35 04  -         lda ALIEN_BULLETS_STAT+i
0bae: 20 c8 e1  -         jsr print_hex_
0bb1: a9 02     -         lda #xpos
0bb3: 20 0c e1  -         jsr set_cursor_x_
0bb6: a9 19     -         lda #ypos
0bb8: 20 24 e1  -         jsr set_cursor_y_    
0bbb: a5 05     -         lda ALIEN_ANIM_FRAME_LO
0bbd: 18        -         clc
0bbe: 69 10     -         adc #%00010000
0bc0: 85 05     -         sta ALIEN_ANIM_FRAME_LO
0bc2: a5 06     -         lda ALIEN_ANIM_FRAME_HI
0bc4: 69 00     -         adc #00
0bc6: 29 03     -         and #3
0bc8: 85 06     -         sta ALIEN_ANIM_FRAME_HI
0bca: 20 c8 e1  -         jsr print_hex_
0bcd: ce 00 0a  -         dec shot_delay      // Shot delay
0bd0: d0 27     -         bne draw_bullets    // Still positive. No Shot
0bd2: 20 b7 04  -         jsr rand8           // New delay in frames ( 0..255)
0bd5: 29 0f     -         and #15
0bd7: 69 07     -         adc #7              // Just in case the lower bits are all 0
0bd9: 8d 00 0a  -         sta shot_delay      // Store new delay
0bdc: 20 b5 03  -         jsr find_next_invisible_bullet
0bdf: 90 18     -         bcc draw_bullets
0be1: 20 b7 04  -         jsr rand8  // Random value to accu
0be4: 29 07     -         and #7     // One of the first eight aliens
0be6: a8        -         tay        // Using y as alien index
0be7: b9 cd 02  -         lda SPRITE_XPOS,y
0bea: 18        -         clc
0beb: 69 08     -         adc #8
0bed: 9d 36 04  -         sta ALIEN_BULLETS_X,x
0bf0: b9 ed 02  -         lda SPRITE_YPOS,y
0bf3: 18        -         clc
0bf4: 69 04     -         adc #4
0bf6: 9d 3b 04  -         sta ALIEN_BULLETS_Y,x
0bf9: 20 ca 03  - draw_bullets:jsr update_alien_bullets
0bfc: ad cd 02  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
0bff: c9 0a     -         cmp #10             // 10 is the minimum x position
0c01: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
0c03: a9 01     - left_underflow:lda #$01
0c05: 8d 54 0c  -         sta operation+1
0c08: 4c 17 0c  -         jmp go_down 
0c0b: ad d4 02  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
0c0e: c9 ef     -         cmp #$ef            // Max xpos = 239
0c10: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
0c12: a9 ff     - right_overflow:lda #$ff            // By adding -1, we move left.
0c14: 8d 54 0c  -         sta operation+1     // Write the new speed to the code (self modified)    
0c17: ad ed 02  - go_down:lda SPRITE_YPOS
0c1a: c9 96     -         cmp #150
0c1c: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
0c1e: a0 07     - reset_ypos:ldy #7
0c20: a9 20     -         lda #$20              // Start Y position
0c22: 99 ed 02  -         sta SPRITE_YPOS,y 
0c25: 88        -         dey
0c26: 10 fa     -         bpl !loop-
0c28: a0 07     -         ldy #7
0c2a: a9 30     -         lda #$30              // Start Y position
0c2c: 99 f5 02  -         sta SPRITE_YPOS+8,y 
0c2f: 88        -         dey
0c30: 10 fa     -         bpl !loop-
0c32: a0 07     -         ldy #7
0c34: a9 40     -         lda #$40              // Start Y position
0c36: 99 fd 02  -         sta SPRITE_YPOS+16,y 
0c39: 88        -         dey
0c3a: 10 fa     -         bpl !loop-
0c3c: 4c 4d 0c  -         jmp move    
0c3f: a0 17     - decrease:ldy #23             // Calculate position fpr 24 sprites
0c41: b9 ed 02  -         lda SPRITE_YPOS,y 
0c44: 18        -         clc
0c45: 69 04     -         adc #4
0c47: 99 ed 02  -         sta SPRITE_YPOS,y 
0c4a: 88        -         dey
0c4b: 10 f4     -         bpl !loop-
0c4d: a0 07     - move:   ldy #7               // Y is the sprite index. We have 8 sprites in a row 
0c4f: b9 cd 02  -         lda SPRITE_XPOS,y    // Load current x position of the sprite   
0c52: 18        -         clc
0c53: 69 01     - operation:adc #1               // Add the speed
0c55: 99 cd 02  -         sta SPRITE_XPOS,y    // save the new xpos 
0c58: 99 d5 02  -         sta SPRITE_XPOS+8,y  // Also for the second row
0c5b: 99 dd 02  -         sta SPRITE_XPOS+16,y // Also for the second row
0c5e: 88        -         dey
0c5f: 10 ee     -         bpl !loop-
0c61: ad 0d dc  - exit:   lda $dc0d            // Acknowledge the IRQ            
0c64: 68        -         pla
0c65: a8        -         tay 
0c66: 68        -         pla 
0c67: aa        -         tax 
0c68: 68        -         pla
0c69: 40        -         rti

[Kernel Routines Entry Points]
e000: 4c 00 e1  - get_key:jmp get_key_
e003: 4c 0c e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c 24 e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 98 e1  - print_char:jmp print_char_

[Kernel Routines]
e100: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e103: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e105: 29 70     -         and #KEY_MOD_MASK
e107: aa        -         tax                     // Save modifiers
e108: ad 10 d0  -         lda KBD                 // Current key code to accu
e10b: 60        -         rts                     // Return
e10c: 48        - set_cursor_x_:pha                     // Save accu
e10d: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e110: a9 03     -         lda #CMD_SET_CURSOR_X
e112: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e115: ad 13 d0  -         lda DISCR
e118: 09 80     -         ora #$80
e11a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e11d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e120: 30 fb     -         bmi !wait-              // No! Let's wait
e122: 68        -         pla                     // Restore input parameter in accu
e123: 60        -         rts                     // Return
e124: 48        - set_cursor_y_:pha                     // Save accu
e125: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e128: a9 04     -         lda #CMD_SET_CURSOR_Y
e12a: 8d 14 d0  -         sta DISCMD
e12d: ad 13 d0  -         lda DISCR
e130: 09 80     -         ora #$80
e132: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e135: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e138: 30 fb     -         bmi !wait-              // No! Let's wait
e13a: 68        -         pla                     // Restore input parameter in accu
e13b: 60        -         rts                     // Return
e13c: 48        - set_fg_color_:pha                     // Save accu
e13d: 8d 15 d0  -         sta DIS00              // Save the color to the 
e140: a9 07     -         lda #CMD_SET_FG_COLOR
e142: 8d 14 d0  -         sta DISCMD
e145: ad 13 d0  -         lda DISCR
e148: 09 80     -         ora #$80
e14a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e14d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e150: 30 fb     -         bmi !wait-              // No! Let's wait
e152: 68        -         pla                     // Restore input parameter in accu
e153: 60        -         rts                     // Return
e154: 48        - set_bg_color_:pha                     // Save accu
e155: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e158: a9 08     -         lda #CMD_SET_BG_COLOR
e15a: 8d 14 d0  -         sta DISCMD
e15d: ad 13 d0  -         lda DISCR
e160: 09 80     -         ora #$80
e162: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e165: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e168: 30 fb     -         bmi !wait-              // No! Let's wait
e16a: 68        -         pla                     // Restore input parameter in accu
e16b: 60        -         rts                     // Return
e16c: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e16e: 8d 14 d0  -         sta DISCMD
e171: ad 13 d0  -         lda DISCR
e174: 09 80     -         ora #$80
e176: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e179: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e17c: 30 fb     -         bmi !wait-              // No! Let's wait
e17e: ad 15 d0  -         lda DIS00
e181: 60        -         rts                     // Return
e182: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e184: 8d 14 d0  -         sta DISCMD
e187: ad 13 d0  -         lda DISCR
e18a: 09 80     -         ora #$80
e18c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e18f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e192: 30 fb     -         bmi !wait-              // No! Let's wait
e194: ad 15 d0  -         lda DIS00
e197: 60        -         rts                     // Return
e198: 48        - print_char_:pha                     // Save accu
e199: 8d 15 d0  -         sta DIS00              // Save the char to the 
e19c: a9 0d     -         lda #CMD_WRITE_CHAR
e19e: 8d 14 d0  -         sta DISCMD
e1a1: ad 13 d0  -         lda DISCR
e1a4: 09 80     -         ora #$80
e1a6: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1a9: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1ac: 30 fb     -         bmi !wait-              // No! Let's wait
e1ae: 68        -         pla                     // Restore input parameter in accu
e1af: 60        -         rts                     // Return
e1b0: 8c c4 e1  - print_text_:sty (!end+)+1       // Save y register
e1b3: 8d c6 e1  -         sta (!end+)+3
e1b6: a0 00     -         ldy #0              // Index for the char within the string
e1b8: b1 e0     -         lda (zpRegE0),y     // load character
e1ba: f0 07     -         beq !end+
e1bc: 20 98 e1  -         jsr print_char_
e1bf: c8        -         iny
e1c0: 4c b8 e1  -         jmp !next-
e1c3: a0 00     -         ldy #0
e1c5: a9 00     -         lda #0
e1c7: 60        -         rts
e1c8: 48        - print_hex_:pha
e1c9: a9 00     -         lda #<hex_chars
e1cb: 85 e0     -         sta zpRegE0
e1cd: a9 f0     -         lda #>hex_chars
e1cf: 85 e1     -         sta zpRegE1
e1d1: 68        -         pla
e1d2: 48        -         pha
e1d3: 4a        -         lsr
e1d4: 4a        -         lsr
e1d5: 4a        -         lsr
e1d6: 4a        -         lsr
e1d7: 29 0f     -         and #$0f
e1d9: a8        -         tay
e1da: b1 e0     -         lda (zpRegE0),y
e1dc: 20 98 e1  -         jsr print_char_
e1df: 68        -         pla
e1e0: 48        -         pha
e1e1: 29 0f     -         and #$0f
e1e3: a8        -         tay
e1e4: b1 e0     -         lda (zpRegE0),y
e1e6: 20 98 e1  -         jsr print_char_
e1e9: 68        -         pla
e1ea: 60        -         rts
e1eb: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e1ed: 8d 14 d0  -         sta DISCMD
e1f0: ad 13 d0  -         lda DISCR
e1f3: 09 80     -         ora #$80
e1f5: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1f8: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e1fb: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e1fd: 60        -         rts
e1fe: a9 16     - draw_vertical_line_:lda #CMD_DRAW_VLINE
e200: 8d 14 d0  -         sta DISCMD
e203: ad 13 d0  -         lda DISCR
e206: 09 80     -         ora #$80
e208: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e20b: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e20e: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e210: 60        -         rts
e211: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e213: 8d 14 d0  -         sta DISCMD
e216: ad 13 d0  -         lda DISCR
e219: 09 80     -         ora #$80
e21b: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e21e: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e221: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e223: 60        -         rts
e224: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e226: 8d 14 d0  -         sta DISCMD
e229: ad 13 d0  -         lda DISCR
e22c: 09 80     -         ora #$80
e22e: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e231: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e234: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e236: 60        -         rts
e237: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e239: 8d 14 d0  -         sta DISCMD
e23c: ad 13 d0  -         lda DISCR
e23f: 09 80     -         ora #$80
e241: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e244: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e247: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e249: 60        -         rts
e24a: a9 1e     - draw_sprites_:lda #CMD_DRAW_SPRITES
e24c: 8d 14 d0  -         sta DISCMD
e24f: ad 13 d0  -         lda DISCR
e252: 09 80     -         ora #$80
e254: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e257: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e25a: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e25c: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 57 65 6c 63 6f 6d 65 20 74 6f 20 46 69 72 73 74  - msg_01: .text "Welcome to FirstKlaas OS v0.1"
f020: 4b 6c 61 61 73 20 4f 53 20 76 30 2e 31          
