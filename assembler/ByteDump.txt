******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: a9 01     -         lda #<main_isr
0805: 8d fe ff  -         sta $fffe 
0808: a9 0a     -         lda #>main_isr
080a: 8d ff ff  -         sta $ffff
080d: a9 01     -         lda #<main_isr
080f: 8d fa ff  -         sta $fffa 
0812: a9 0a     -         lda #>main_isr
0814: 8d fb ff  -         sta $fffb
0817: ad 13 d0  -         lda DISCR   // Set the auto adjust 
081a: 09 0c     -         ora #$0C    // and wrap flag
081c: 8d 13 d0  -         sta DISCR                
081f: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0821: 8d 0d dc  -         sta $dc0d
0824: a9 20     -         lda #color
0826: 20 02 e2  -         jsr set_fg_color_
0829: a9 02     -         lda #xpos
082b: 20 d2 e1  -         jsr set_cursor_x_
082e: a9 01     -         lda #ypos
0830: 20 ea e1  -         jsr set_cursor_y_    
0833: a9 59     -         lda #<addr
0835: 85 e0     -         sta zpRegE0
0837: a9 08     -         lda #>addr
0839: 85 e1     -         sta zpRegE1
083b: 20 76 e2  -         jsr print_text_
083e: 20 23 e3  -         jsr init_sprites_
0841: 4c 41 08  -         jmp !end-
0844: a9 f0     - setup_timer:lda #$f0
0846: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
0849: a9 00     -         lda #$00
084b: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
084e: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
0850: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
0853: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
0855: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0858: 60        -         rts
0859: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 46 69 72  - welcome:.text "NE/OS v0.1 - FirstKlaas Experience"
0869: 73 74 4b 6c 61 61 73 20 45 78 70 65 72 69 65 6e 
0879: 63 65                                           
087b: 00        -         .byte 0
087c: 46 52 41 4d 45 3a                                - txt_frame:.text "FRAME:"
0882: 00        -         .byte 0
0883: 4c 45 56 45 4c                                   - txt_level:.text "LEVEL"
0888: 00        -         .byte 0
0889: 53 43 4f 52 45                                   - txt_score:.text "SCORE"
088e: 00        -         .byte 0

[ISR]
0a00: 04        - shot_delay:.byte $04
0a01: 48        - main_isr:pha
0a02: da        -         phx 
0a03: 5a        -         phy 
0a04: 48        -         pha
0a05: a9 05     -         lda #xlo
0a07: 8d 15 d0  -         sta DIS00
0a0a: a9 00     -         lda #xhi 
0a0c: 8d 16 d0  -         sta DIS01
0a0f: a9 14     -         lda #y 
0a11: 8d 17 d0  -         sta DIS02
0a14: a9 fa     -         lda #width_lo 
0a16: 8d 18 d0  -         sta DIS03
0a19: a9 00     -         lda #width_hi
0a1b: 8d 19 d0  -         sta DIS04
0a1e: a9 a0     -         lda #height
0a20: 8d 1a d0  -         sta DIS05
0a23: a9 37     -         lda #col 
0a25: 8d 1b d0  -         sta DIS06
0a28: 20 fd e2  -         jsr fill_rect_
0a2b: 68        -         pla 
0a2c: a5 05     -         lda ALIEN_ANIM_FRAME_LO
0a2e: 18        -         clc
0a2f: 69 40     -         adc #%01000000
0a31: 85 05     -         sta ALIEN_ANIM_FRAME_LO
0a33: a5 06     -         lda ALIEN_ANIM_FRAME_HI
0a35: 69 00     -         adc #00
0a37: 29 03     -         and #3
0a39: 85 06     -         sta ALIEN_ANIM_FRAME_HI
0a3b: 20 79 e5  -         jsr animate_aliens
0a3e: 20 10 e3  -         jsr draw_sprites_
0a41: 48        -         pha
0a42: a9 05     -         lda #xlo
0a44: 8d 15 d0  -         sta DIS00
0a47: a9 00     -         lda #xhi 
0a49: 8d 16 d0  -         sta DIS01
0a4c: a9 b4     -         lda #y 
0a4e: 8d 17 d0  -         sta DIS02
0a51: a9 fa     -         lda #width_lo 
0a53: 8d 18 d0  -         sta DIS03
0a56: a9 00     -         lda #width_hi
0a58: 8d 19 d0  -         sta DIS04
0a5b: a9 3c     -         lda #height
0a5d: 8d 1a d0  -         sta DIS05
0a60: a9 2a     -         lda #col 
0a62: 8d 1b d0  -         sta DIS06
0a65: 20 fd e2  -         jsr fill_rect_
0a68: 68        -         pla 
0a69: 48        -         pha
0a6a: a9 05     -         lda #xlo
0a6c: 8d 15 d0  -         sta DIS00
0a6f: a9 00     -         lda #xhi 
0a71: 8d 16 d0  -         sta DIS01
0a74: a9 14     -         lda #y 
0a76: 8d 17 d0  -         sta DIS02
0a79: a9 fa     -         lda #width_lo 
0a7b: 8d 18 d0  -         sta DIS03
0a7e: a9 00     -         lda #width_hi
0a80: 8d 19 d0  -         sta DIS04
0a83: a9 a0     -         lda #height
0a85: 8d 1a d0  -         sta DIS05
0a88: a9 17     -         lda #col 
0a8a: 8d 1b d0  -         sta DIS06
0a8d: 20 ea e2  -         jsr draw_rect_
0a90: 68        -         pla 
0a91: a9 2b     -         lda #color
0a93: 20 02 e2  -         jsr set_fg_color_
0a96: a9 02     -         lda #xpos
0a98: 20 d2 e1  -         jsr set_cursor_x_
0a9b: a9 1a     -         lda #ypos
0a9d: 20 ea e1  -         jsr set_cursor_y_    
0aa0: a9 7c     -         lda #<addr
0aa2: 85 e0     -         sta zpRegE0
0aa4: a9 08     -         lda #>addr
0aa6: 85 e1     -         sta zpRegE1
0aa8: 20 76 e2  -         jsr print_text_
0aab: a9 09     -         lda #xpos
0aad: 20 d2 e1  -         jsr set_cursor_x_
0ab0: a9 17     -         lda #ypos
0ab2: 20 ea e1  -         jsr set_cursor_y_    
0ab5: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
0ab8: 8d 30 e1  -         sta HTD_IN
0abb: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
0abe: 8d 31 e1  -         sta HTD_IN+1
0ac1: 20 68 e1  -         jsr bcd_convert_word_
0ac4: ad 34 e1  -         lda HTD_OUT+2
0ac7: 20 8e e2  -         jsr print_hex_
0aca: ad 33 e1  -         lda HTD_OUT+1
0acd: 20 8e e2  -         jsr print_hex_
0ad0: ad 32 e1  -         lda HTD_OUT
0ad3: 20 8e e2  -         jsr print_hex_
0ad6: a9 02     -         lda #xpos
0ad8: 20 d2 e1  -         jsr set_cursor_x_
0adb: a9 17     -         lda #ypos
0add: 20 ea e1  -         jsr set_cursor_y_    
0ae0: a9 83     -         lda #<addr
0ae2: 85 e0     -         sta zpRegE0
0ae4: a9 08     -         lda #>addr
0ae6: 85 e1     -         sta zpRegE1
0ae8: 20 76 e2  -         jsr print_text_
0aeb: a9 02     -         lda #xpos
0aed: 20 d2 e1  -         jsr set_cursor_x_
0af0: a9 18     -         lda #ypos
0af2: 20 ea e1  -         jsr set_cursor_y_    
0af5: a9 89     -         lda #<addr
0af7: 85 e0     -         sta zpRegE0
0af9: a9 08     -         lda #>addr
0afb: 85 e1     -         sta zpRegE1
0afd: 20 76 e2  -         jsr print_text_
0b00: a9 09     -         lda #xpos
0b02: 20 d2 e1  -         jsr set_cursor_x_
0b05: a9 18     -         lda #ypos
0b07: 20 ea e1  -         jsr set_cursor_y_    
0b0a: a5 02     -         lda SCORE_LO       
0b0c: 8d 30 e1  -         sta HTD_IN
0b0f: a5 03     -         lda SCORE_HI       
0b11: 8d 31 e1  -         sta HTD_IN+1
0b14: 20 68 e1  -         jsr bcd_convert_word_
0b17: ad 34 e1  -         lda HTD_OUT+2
0b1a: 20 8e e2  -         jsr print_hex_
0b1d: ad 33 e1  -         lda HTD_OUT+1
0b20: 20 8e e2  -         jsr print_hex_
0b23: ad 32 e1  -         lda HTD_OUT
0b26: 20 8e e2  -         jsr print_hex_
0b29: ce 00 0a  -         dec shot_delay      // Shot delay
0b2c: d0 27     -         bne draw_bullets    // Still positive. No Shot
0b2e: 20 a5 e1  -         jsr rand8           // New delay in frames ( 0..255)
0b31: 29 07     -         and #7
0b33: 69 07     -         adc #7              // Increase to at least 7 frames. 
0b35: 8d 00 0a  -         sta shot_delay      // Store new delay
0b38: 20 0a e7  -         jsr find_next_invisible_bullet
0b3b: 90 18     -         bcc draw_bullets    // We couln't find any free slot. So just draw.    
0b3d: 20 a5 e1  -         jsr rand8  // Random value to accu
0b40: 29 07     -         and #7     // One of the first eight aliens
0b42: a8        -         tay        // Using y as alien index
0b43: b9 22 e6  -         lda SPRITE_XPOS,y
0b46: 18        -         clc
0b47: 69 08     -         adc #8
0b49: 9d 8b e7  -         sta ALIEN_BULLETS_X,x
0b4c: b9 42 e6  -         lda SPRITE_YPOS,y
0b4f: 18        -         clc
0b50: 69 04     -         adc #4
0b52: 9d 90 e7  -         sta ALIEN_BULLETS_Y,x
0b55: 20 1f e7  - draw_bullets:jsr update_alien_bullets
0b58: ad 22 e6  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
0b5b: c9 0a     -         cmp #10             // 10 is the minimum x position
0b5d: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
0b5f: a9 01     - left_underflow:lda #$01
0b61: 8d b0 0b  -         sta operation+1
0b64: 4c 73 0b  -         jmp go_down 
0b67: ad 29 e6  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
0b6a: c9 ef     -         cmp #$ef            // Max xpos = 239
0b6c: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
0b6e: a9 ff     - right_overflow:lda #$ff            // By adding -1, we move left.
0b70: 8d b0 0b  -         sta operation+1     // Write the new speed to the code (self modified)    
0b73: ad 42 e6  - go_down:lda SPRITE_YPOS
0b76: c9 96     -         cmp #150
0b78: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
0b7a: a0 07     - reset_ypos:ldy #7
0b7c: a9 20     -         lda #$20              // Start Y position
0b7e: 99 42 e6  -         sta SPRITE_YPOS,y 
0b81: 88        -         dey
0b82: 10 fa     -         bpl !loop-
0b84: a0 07     -         ldy #7
0b86: a9 30     -         lda #$30              // Start Y position
0b88: 99 4a e6  -         sta SPRITE_YPOS+8,y 
0b8b: 88        -         dey
0b8c: 10 fa     -         bpl !loop-
0b8e: a0 07     -         ldy #7
0b90: a9 40     -         lda #$40              // Start Y position
0b92: 99 52 e6  -         sta SPRITE_YPOS+16,y 
0b95: 88        -         dey
0b96: 10 fa     -         bpl !loop-
0b98: 4c a9 0b  -         jmp move    
0b9b: a0 17     - decrease:ldy #23             // Calculate position fpr 24 sprites
0b9d: b9 42 e6  -         lda SPRITE_YPOS,y 
0ba0: 18        -         clc
0ba1: 69 04     -         adc #4
0ba3: 99 42 e6  -         sta SPRITE_YPOS,y 
0ba6: 88        -         dey
0ba7: 10 f4     -         bpl !loop-
0ba9: a0 07     - move:   ldy #7               // Y is the sprite index. We have 8 sprites in a row 
0bab: b9 22 e6  -         lda SPRITE_XPOS,y    // Load current x position of the sprite   
0bae: 18        -         clc
0baf: 69 01     - operation:adc #1               // Add the speed
0bb1: 99 22 e6  -         sta SPRITE_XPOS,y    // save the new xpos 
0bb4: 99 2a e6  -         sta SPRITE_XPOS+8,y  // Also for the second row
0bb7: 99 32 e6  -         sta SPRITE_XPOS+16,y // Also for the second row
0bba: 88        -         dey
0bbb: 10 ee     -         bpl !loop-
0bbd: ad 0d dc  - exit:   lda $dc0d            // Acknowledge the IRQ            
0bc0: 7a        -         ply
0bc1: fa        -         plx  
0bc2: 68        -         pla
0bc3: 40        -         rti

[Kernel Routines Entry Points]
e000: 4c c6 e1  - get_key:jmp get_key_
e003: 4c d2 e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c ea e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 5e e2  - print_char:jmp print_char_

[Kernel Routines]
e100: 00 00 01 00 00 02 00 00 04 00 00 08              - BCD_LOOKUP_TABLE:.byte    $00, $00, $01, $00, $00, $02, $00, $00, $04, $00, $00, $08
e10c: 00 00 16 00 00 32 00 00 64 00 01 28              -         .byte    $00, $00, $16, $00, $00, $32, $00, $00, $64, $00, $01, $28
e118: 00 02 56 00 05 12 00 10 24 00 20 48              -         .byte    $00, $02, $56, $00, $05, $12, $00, $10, $24, $00, $20, $48
e124: 00 40 96 00 81 92 01 63 84 03 27 68              -         .byte    $00, $40, $96, $00, $81, $92, $01, $63, $84, $03, $27, $68
e130: 00 00     - HTD_IN: .byte $00, $00
e132: 00 00 00  - HTD_OUT:.byte $00, $00, $00 
e135: a5 e0     - convert565:lda zpRegE0             // red value
e137: 0a        -         asl                     // shift three to the left as we
e138: 0a        -         asl                     // need to move the lower 5 bits of red
e139: 0a        -         asl                     // to the bits 7-5
e13a: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e13c: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e13e: 4a        -         lsr                     // lower bits of the output highbyte
e13f: 4a        -         lsr
e140: 4a        -         lsr
e141: 29 07     -         and #%00000111          // Only the lower three bits.
e143: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e145: 85 e0     -         sta zpRegE0             // Store the final high byte
e147: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e149: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e14a: 0a        -         asl                     // it with zeros
e14b: 0a        -         asl
e14c: 0a        -         asl
e14d: 0a        -         asl
e14e: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e150: a5 e2     -         lda zpRegE2             // Load blue
e152: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e154: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e156: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e158: 60        -         rts
e159: 48        - byte_to_hex:pha                     // Save value to stack.
e15a: 29 0f     -         and #%00001111
e15c: 85 e0     -         sta zpRegE0             // store the lower nibble
e15e: 68        -         pla                     // Load the original value
e15f: 48        -         pha                     // and save it again
e160: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e161: 4a        -         lsr
e162: 4a        -         lsr
e163: 4a        -         lsr
e164: 85 e1     -         sta zpRegE1             // store the higher nibble
e166: 68        -         pla                     // restore the accu
e167: 60        -         rts
e168: f8        - bcd_convert_word_:sed
e169: da        -         phx
e16a: 48        -         pha
e16b: a9 00     -         lda #0
e16d: 8d 32 e1  -         sta HTD_OUT
e170: 8d 33 e1  -         sta HTD_OUT+1
e173: 8d 34 e1  -         sta HTD_OUT+2
e176: a2 2d     -         ldx #$2d
e178: 0e 30 e1  -         asl HTD_IN 
e17b: 2e 31 e1  -         rol HTD_IN+1
e17e: 90 1c     -         bcc htd1
e180: ad 32 e1  -         lda HTD_OUT
e183: 18        -         clc 
e184: 7d 02 e1  -         adc BCD_LOOKUP_TABLE+2,x
e187: 8d 32 e1  -         sta HTD_OUT
e18a: ad 33 e1  -         lda HTD_OUT+1
e18d: 7d 01 e1  -         adc BCD_LOOKUP_TABLE+1,x
e190: 8d 33 e1  -         sta HTD_OUT+1
e193: ad 34 e1  -         lda HTD_OUT+2
e196: 7d 00 e1  -         adc BCD_LOOKUP_TABLE,x
e199: 8d 34 e1  -         sta HTD_OUT+2
e19c: ca        - htd1:   dex
e19d: ca        -         dex 
e19e: ca        -         dex 
e19f: 10 d7     -         bpl !loop- 
e1a1: d8        -         cld
e1a2: 68        -         pla
e1a3: fa        -         plx 
e1a4: 60        -         rts
e1a5: a9 1f     - rand8,rand8b1-1:lda rand8b1:#31
e1a7: 0a        -         asl
e1a8: 49 35     - rand8a1-1:eor rand8a1:#53
e1aa: 8d a6 e1  -         sta rand8b1
e1ad: 6d a9 e1  -         adc rand8a1
e1b0: 8d a9 e1  -         sta rand8a1
e1b3: 60        -         rts
e1b4: 48        - set_seed:pha
e1b5: 29 d9     -         and #217
e1b7: 18        -         clc
e1b8: 69 0f     -         adc #<21263
e1ba: 8d a9 e1  -         sta rand8a1
e1bd: 68        -         pla
e1be: 29 26     -         and #255-217
e1c0: 69 53     -         adc #>21263
e1c2: 8d a6 e1  -         sta rand8b1
e1c5: 60        -         rts
e1c6: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e1c9: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e1cb: 29 70     -         and #KEY_MOD_MASK
e1cd: aa        -         tax                     // Save modifiers
e1ce: ad 10 d0  -         lda KBD                 // Current key code to accu
e1d1: 60        -         rts                     // Return
e1d2: 48        - set_cursor_x_:pha                     // Save accu
e1d3: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1d6: a9 03     -         lda #CMD_SET_CURSOR_X
e1d8: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e1db: ad 13 d0  -         lda DISCR
e1de: 09 80     -         ora #$80
e1e0: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1e3: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1e6: 30 fb     -         bmi !wait-              // No! Let's wait
e1e8: 68        -         pla                     // Restore input parameter in accu
e1e9: 60        -         rts                     // Return
e1ea: 48        - set_cursor_y_:pha                     // Save accu
e1eb: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1ee: a9 04     -         lda #CMD_SET_CURSOR_Y
e1f0: 8d 14 d0  -         sta DISCMD
e1f3: ad 13 d0  -         lda DISCR
e1f6: 09 80     -         ora #$80
e1f8: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1fb: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1fe: 30 fb     -         bmi !wait-              // No! Let's wait
e200: 68        -         pla                     // Restore input parameter in accu
e201: 60        -         rts                     // Return
e202: 48        - set_fg_color_:pha                     // Save accu
e203: 8d 15 d0  -         sta DIS00              // Save the color to the 
e206: a9 07     -         lda #CMD_SET_FG_COLOR
e208: 8d 14 d0  -         sta DISCMD
e20b: ad 13 d0  -         lda DISCR
e20e: 09 80     -         ora #$80
e210: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e213: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e216: 30 fb     -         bmi !wait-              // No! Let's wait
e218: 68        -         pla                     // Restore input parameter in accu
e219: 60        -         rts                     // Return
e21a: 48        - set_bg_color_:pha                     // Save accu
e21b: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e21e: a9 08     -         lda #CMD_SET_BG_COLOR
e220: 8d 14 d0  -         sta DISCMD
e223: ad 13 d0  -         lda DISCR
e226: 09 80     -         ora #$80
e228: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e22b: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e22e: 30 fb     -         bmi !wait-              // No! Let's wait
e230: 68        -         pla                     // Restore input parameter in accu
e231: 60        -         rts                     // Return
e232: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e234: 8d 14 d0  -         sta DISCMD
e237: ad 13 d0  -         lda DISCR
e23a: 09 80     -         ora #$80
e23c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e23f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e242: 30 fb     -         bmi !wait-              // No! Let's wait
e244: ad 15 d0  -         lda DIS00
e247: 60        -         rts                     // Return
e248: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e24a: 8d 14 d0  -         sta DISCMD
e24d: ad 13 d0  -         lda DISCR
e250: 09 80     -         ora #$80
e252: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e255: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e258: 30 fb     -         bmi !wait-              // No! Let's wait
e25a: ad 15 d0  -         lda DIS00
e25d: 60        -         rts                     // Return
e25e: 48        - print_char_:pha                     // Save accu
e25f: 8d 15 d0  -         sta DIS00              // Save the char to the 
e262: a9 0d     -         lda #CMD_WRITE_CHAR
e264: 8d 14 d0  -         sta DISCMD
e267: ad 13 d0  -         lda DISCR
e26a: 09 80     -         ora #$80
e26c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e26f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e272: 30 fb     -         bmi !wait-              // No! Let's wait
e274: 68        -         pla                     // Restore input parameter in accu
e275: 60        -         rts                     // Return
e276: 8c 8a e2  - print_text_:sty (!end+)+1       // Save y register
e279: 8d 8c e2  -         sta (!end+)+3
e27c: a0 00     -         ldy #0              // Index for the char within the string
e27e: b1 e0     -         lda (zpRegE0),y     // load character
e280: f0 07     -         beq !end+
e282: 20 5e e2  -         jsr print_char_
e285: c8        -         iny
e286: 4c 7e e2  -         jmp !next-
e289: a0 00     -         ldy #0
e28b: a9 00     -         lda #0
e28d: 60        -         rts
e28e: 48        - print_hex_:pha
e28f: a9 00     -         lda #<hex_chars
e291: 85 e0     -         sta zpRegE0
e293: a9 f0     -         lda #>hex_chars
e295: 85 e1     -         sta zpRegE1
e297: 68        -         pla
e298: 48        -         pha
e299: 4a        -         lsr
e29a: 4a        -         lsr
e29b: 4a        -         lsr
e29c: 4a        -         lsr
e29d: 29 0f     -         and #$0f
e29f: a8        -         tay
e2a0: b1 e0     -         lda (zpRegE0),y
e2a2: 20 5e e2  -         jsr print_char_
e2a5: 68        -         pla
e2a6: 48        -         pha
e2a7: 29 0f     -         and #$0f
e2a9: a8        -         tay
e2aa: b1 e0     -         lda (zpRegE0),y
e2ac: 20 5e e2  -         jsr print_char_
e2af: 68        -         pla
e2b0: 60        -         rts
e2b1: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e2b3: 8d 14 d0  -         sta DISCMD
e2b6: ad 13 d0  -         lda DISCR
e2b9: 09 80     -         ora #$80
e2bb: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2be: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2c1: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2c3: 60        -         rts
e2c4: a9 16     - draw_vertical_line_:lda #CMD_DRAW_VLINE
e2c6: 8d 14 d0  -         sta DISCMD
e2c9: ad 13 d0  -         lda DISCR
e2cc: 09 80     -         ora #$80
e2ce: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2d1: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2d4: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2d6: 60        -         rts
e2d7: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e2d9: 8d 14 d0  -         sta DISCMD
e2dc: ad 13 d0  -         lda DISCR
e2df: 09 80     -         ora #$80
e2e1: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2e4: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2e7: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2e9: 60        -         rts
e2ea: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e2ec: 8d 14 d0  -         sta DISCMD
e2ef: ad 13 d0  -         lda DISCR
e2f2: 09 80     -         ora #$80
e2f4: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2f7: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2fa: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2fc: 60        -         rts
e2fd: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e2ff: 8d 14 d0  -         sta DISCMD
e302: ad 13 d0  -         lda DISCR
e305: 09 80     -         ora #$80
e307: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e30a: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e30d: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e30f: 60        -         rts
e310: a9 1e     - draw_sprites_:lda #CMD_DRAW_SPRITES
e312: 8d 14 d0  -         sta DISCMD
e315: ad 13 d0  -         lda DISCR
e318: 09 80     -         ora #$80
e31a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e31d: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e320: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e322: 60        -         rts
e323: a2 00     - init_sprites_:ldx #index
e325: a9 b2     -         lda #<address
e327: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e32a: a9 e5     -         lda #>address
e32c: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e32f: a2 08     -         ldx #index
e331: a9 e2     -         lda #<address
e333: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e336: a9 e5     -         lda #>address
e338: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e33b: a2 10     -         ldx #index
e33d: a9 f2     -         lda #<address
e33f: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e342: a9 e5     -         lda #>address
e344: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e347: a2 01     -         ldx #index
e349: a9 b2     -         lda #<address
e34b: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e34e: a9 e5     -         lda #>address
e350: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e353: a2 09     -         ldx #index
e355: a9 e2     -         lda #<address
e357: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e35a: a9 e5     -         lda #>address
e35c: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e35f: a2 11     -         ldx #index
e361: a9 f2     -         lda #<address
e363: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e366: a9 e5     -         lda #>address
e368: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e36b: a2 02     -         ldx #index
e36d: a9 b2     -         lda #<address
e36f: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e372: a9 e5     -         lda #>address
e374: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e377: a2 0a     -         ldx #index
e379: a9 e2     -         lda #<address
e37b: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e37e: a9 e5     -         lda #>address
e380: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e383: a2 12     -         ldx #index
e385: a9 f2     -         lda #<address
e387: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e38a: a9 e5     -         lda #>address
e38c: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e38f: a2 03     -         ldx #index
e391: a9 b2     -         lda #<address
e393: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e396: a9 e5     -         lda #>address
e398: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e39b: a2 0b     -         ldx #index
e39d: a9 e2     -         lda #<address
e39f: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e3a2: a9 e5     -         lda #>address
e3a4: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e3a7: a2 13     -         ldx #index
e3a9: a9 f2     -         lda #<address
e3ab: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e3ae: a9 e5     -         lda #>address
e3b0: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e3b3: a2 04     -         ldx #index
e3b5: a9 b2     -         lda #<address
e3b7: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e3ba: a9 e5     -         lda #>address
e3bc: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e3bf: a2 0c     -         ldx #index
e3c1: a9 e2     -         lda #<address
e3c3: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e3c6: a9 e5     -         lda #>address
e3c8: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e3cb: a2 14     -         ldx #index
e3cd: a9 f2     -         lda #<address
e3cf: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e3d2: a9 e5     -         lda #>address
e3d4: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e3d7: a2 05     -         ldx #index
e3d9: a9 b2     -         lda #<address
e3db: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e3de: a9 e5     -         lda #>address
e3e0: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e3e3: a2 0d     -         ldx #index
e3e5: a9 e2     -         lda #<address
e3e7: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e3ea: a9 e5     -         lda #>address
e3ec: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e3ef: a2 15     -         ldx #index
e3f1: a9 f2     -         lda #<address
e3f3: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e3f6: a9 e5     -         lda #>address
e3f8: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e3fb: a2 06     -         ldx #index
e3fd: a9 b2     -         lda #<address
e3ff: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e402: a9 e5     -         lda #>address
e404: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e407: a2 0e     -         ldx #index
e409: a9 e2     -         lda #<address
e40b: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e40e: a9 e5     -         lda #>address
e410: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e413: a2 16     -         ldx #index
e415: a9 f2     -         lda #<address
e417: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e41a: a9 e5     -         lda #>address
e41c: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e41f: a2 07     -         ldx #index
e421: a9 b2     -         lda #<address
e423: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e426: a9 e5     -         lda #>address
e428: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e42b: a2 0f     -         ldx #index
e42d: a9 e2     -         lda #<address
e42f: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e432: a9 e5     -         lda #>address
e434: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e437: a2 17     -         ldx #index
e439: a9 f2     -         lda #<address
e43b: 9d c2 e6  -         sta SPRITE_DATA_LO, x
e43e: a9 e5     -         lda #>address
e440: 9d e2 e6  -         sta SPRITE_DATA_HI, x                
e443: a2 00     -         ldx #index
e445: bd 02 e6  -         lda SPRITE_FLAGS, x
e448: 05 c0     -         ora SPRITE_ENABLE_FLAG
e44a: 9d 02 e6  -         sta SPRITE_FLAGS, x
e44d: a2 01     -         ldx #index
e44f: bd 02 e6  -         lda SPRITE_FLAGS, x
e452: 05 c0     -         ora SPRITE_ENABLE_FLAG
e454: 9d 02 e6  -         sta SPRITE_FLAGS, x
e457: a2 02     -         ldx #index
e459: bd 02 e6  -         lda SPRITE_FLAGS, x
e45c: 05 c0     -         ora SPRITE_ENABLE_FLAG
e45e: 9d 02 e6  -         sta SPRITE_FLAGS, x
e461: a2 03     -         ldx #index
e463: bd 02 e6  -         lda SPRITE_FLAGS, x
e466: 05 c0     -         ora SPRITE_ENABLE_FLAG
e468: 9d 02 e6  -         sta SPRITE_FLAGS, x
e46b: a2 04     -         ldx #index
e46d: bd 02 e6  -         lda SPRITE_FLAGS, x
e470: 05 c0     -         ora SPRITE_ENABLE_FLAG
e472: 9d 02 e6  -         sta SPRITE_FLAGS, x
e475: a2 05     -         ldx #index
e477: bd 02 e6  -         lda SPRITE_FLAGS, x
e47a: 05 c0     -         ora SPRITE_ENABLE_FLAG
e47c: 9d 02 e6  -         sta SPRITE_FLAGS, x
e47f: a2 06     -         ldx #index
e481: bd 02 e6  -         lda SPRITE_FLAGS, x
e484: 05 c0     -         ora SPRITE_ENABLE_FLAG
e486: 9d 02 e6  -         sta SPRITE_FLAGS, x
e489: a2 07     -         ldx #index
e48b: bd 02 e6  -         lda SPRITE_FLAGS, x
e48e: 05 c0     -         ora SPRITE_ENABLE_FLAG
e490: 9d 02 e6  -         sta SPRITE_FLAGS, x
e493: a2 08     -         ldx #index
e495: bd 02 e6  -         lda SPRITE_FLAGS, x
e498: 05 c0     -         ora SPRITE_ENABLE_FLAG
e49a: 9d 02 e6  -         sta SPRITE_FLAGS, x
e49d: a2 09     -         ldx #index
e49f: bd 02 e6  -         lda SPRITE_FLAGS, x
e4a2: 05 c0     -         ora SPRITE_ENABLE_FLAG
e4a4: 9d 02 e6  -         sta SPRITE_FLAGS, x
e4a7: a2 0a     -         ldx #index
e4a9: bd 02 e6  -         lda SPRITE_FLAGS, x
e4ac: 05 c0     -         ora SPRITE_ENABLE_FLAG
e4ae: 9d 02 e6  -         sta SPRITE_FLAGS, x
e4b1: a2 0b     -         ldx #index
e4b3: bd 02 e6  -         lda SPRITE_FLAGS, x
e4b6: 05 c0     -         ora SPRITE_ENABLE_FLAG
e4b8: 9d 02 e6  -         sta SPRITE_FLAGS, x
e4bb: a2 0c     -         ldx #index
e4bd: bd 02 e6  -         lda SPRITE_FLAGS, x
e4c0: 05 c0     -         ora SPRITE_ENABLE_FLAG
e4c2: 9d 02 e6  -         sta SPRITE_FLAGS, x
e4c5: a2 0d     -         ldx #index
e4c7: bd 02 e6  -         lda SPRITE_FLAGS, x
e4ca: 05 c0     -         ora SPRITE_ENABLE_FLAG
e4cc: 9d 02 e6  -         sta SPRITE_FLAGS, x
e4cf: a2 0e     -         ldx #index
e4d1: bd 02 e6  -         lda SPRITE_FLAGS, x
e4d4: 05 c0     -         ora SPRITE_ENABLE_FLAG
e4d6: 9d 02 e6  -         sta SPRITE_FLAGS, x
e4d9: a2 0f     -         ldx #index
e4db: bd 02 e6  -         lda SPRITE_FLAGS, x
e4de: 05 c0     -         ora SPRITE_ENABLE_FLAG
e4e0: 9d 02 e6  -         sta SPRITE_FLAGS, x
e4e3: a2 10     -         ldx #index
e4e5: bd 02 e6  -         lda SPRITE_FLAGS, x
e4e8: 05 c0     -         ora SPRITE_ENABLE_FLAG
e4ea: 9d 02 e6  -         sta SPRITE_FLAGS, x
e4ed: a2 11     -         ldx #index
e4ef: bd 02 e6  -         lda SPRITE_FLAGS, x
e4f2: 05 c0     -         ora SPRITE_ENABLE_FLAG
e4f4: 9d 02 e6  -         sta SPRITE_FLAGS, x
e4f7: a2 12     -         ldx #index
e4f9: bd 02 e6  -         lda SPRITE_FLAGS, x
e4fc: 05 c0     -         ora SPRITE_ENABLE_FLAG
e4fe: 9d 02 e6  -         sta SPRITE_FLAGS, x
e501: a2 13     -         ldx #index
e503: bd 02 e6  -         lda SPRITE_FLAGS, x
e506: 05 c0     -         ora SPRITE_ENABLE_FLAG
e508: 9d 02 e6  -         sta SPRITE_FLAGS, x
e50b: a2 14     -         ldx #index
e50d: bd 02 e6  -         lda SPRITE_FLAGS, x
e510: 05 c0     -         ora SPRITE_ENABLE_FLAG
e512: 9d 02 e6  -         sta SPRITE_FLAGS, x
e515: a2 15     -         ldx #index
e517: bd 02 e6  -         lda SPRITE_FLAGS, x
e51a: 05 c0     -         ora SPRITE_ENABLE_FLAG
e51c: 9d 02 e6  -         sta SPRITE_FLAGS, x
e51f: a2 16     -         ldx #index
e521: bd 02 e6  -         lda SPRITE_FLAGS, x
e524: 05 c0     -         ora SPRITE_ENABLE_FLAG
e526: 9d 02 e6  -         sta SPRITE_FLAGS, x
e529: a2 17     -         ldx #index
e52b: bd 02 e6  -         lda SPRITE_FLAGS, x
e52e: 05 c0     -         ora SPRITE_ENABLE_FLAG
e530: 9d 02 e6  -         sta SPRITE_FLAGS, x
e533: a9 02     -         lda #<SPRITE_DEFINITON_BLOCK
e535: 8d 15 d0  -         sta DIS00
e538: a9 e6     -         lda #>SPRITE_DEFINITON_BLOCK
e53a: 8d 16 d0  -         sta DIS01
e53d: a9 20     -         lda #32                 // Set number of sprites
e53f: 8d 17 d0  -         sta DIS02
e542: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
e544: 8d 14 d0  -         sta DISCMD              //                                          
e547: ad 13 d0  -         lda DISCR               // Load Display command register
e54a: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
e54c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e54f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e552: 30 fb     -         bmi !wait-              // No! Let's wait
e554: a9 b2     -         lda #<SPACE_ALIEN_A
e556: 8d 02 e7  -         sta ALIEN_A_SPRITE_ANIMATION_LO
e559: 8d 04 e7  -         sta ALIEN_A_SPRITE_ANIMATION_LO+2
e55c: a9 e5     -         lda #>SPACE_ALIEN_A
e55e: 8d 06 e7  -         sta ALIEN_A_SPRITE_ANIMATION_HI
e561: 8d 08 e7  -         sta ALIEN_A_SPRITE_ANIMATION_HI+2
e564: a9 c2     -         lda #<SPACE_ALIEN_A1
e566: 8d 03 e7  -         sta ALIEN_A_SPRITE_ANIMATION_LO+1
e569: a9 e5     -         lda #>SPACE_ALIEN_A1
e56b: 8d 07 e7  -         sta ALIEN_A_SPRITE_ANIMATION_HI+1
e56e: a9 d2     -         lda #<SPACE_ALIEN_A2
e570: 8d 05 e7  -         sta ALIEN_A_SPRITE_ANIMATION_LO+3
e573: a9 e5     -         lda #>SPACE_ALIEN_A2
e575: 8d 09 e7  -         sta ALIEN_A_SPRITE_ANIMATION_HI+3
e578: 60        -         rts
e579: a6 06     - animate_aliens:ldx ALIEN_ANIM_FRAME_HI
e57b: bd 02 e7  -         lda ALIEN_A_SPRITE_ANIMATION_LO,x
e57e: 8d c2 e6  -         sta SPRITE_DATA_LO+i    
e581: 8d c3 e6  -         sta SPRITE_DATA_LO+i    
e584: 8d c4 e6  -         sta SPRITE_DATA_LO+i    
e587: 8d c5 e6  -         sta SPRITE_DATA_LO+i    
e58a: 8d c6 e6  -         sta SPRITE_DATA_LO+i    
e58d: 8d c7 e6  -         sta SPRITE_DATA_LO+i    
e590: 8d c8 e6  -         sta SPRITE_DATA_LO+i    
e593: 8d c9 e6  -         sta SPRITE_DATA_LO+i    
e596: bd 06 e7  -         lda ALIEN_A_SPRITE_ANIMATION_HI,x
e599: 8d e2 e6  -         sta SPRITE_DATA_HI+i    
e59c: 8d e3 e6  -         sta SPRITE_DATA_HI+i    
e59f: 8d e4 e6  -         sta SPRITE_DATA_HI+i    
e5a2: 8d e5 e6  -         sta SPRITE_DATA_HI+i    
e5a5: 8d e6 e6  -         sta SPRITE_DATA_HI+i    
e5a8: 8d e7 e6  -         sta SPRITE_DATA_HI+i    
e5ab: 8d e8 e6  -         sta SPRITE_DATA_HI+i    
e5ae: 8d e9 e6  -         sta SPRITE_DATA_HI+i    
e5b1: 60        -         rts
e5b2: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
e5b4: 07 e0     -         .byte %00000111, %11100000
e5b6: 0f f0     -         .byte %00001111, %11110000
e5b8: 1d b8     -         .byte %00011101, %10111000
e5ba: 17 e8     -         .byte %00010111, %11101000
e5bc: 17 e8     -         .byte %00010111, %11101000
e5be: 02 40     -         .byte %00000010, %01000000
e5c0: 06 60     -         .byte %00000110, %01100000
e5c2: 02 40     - SPACE_ALIEN_A1:.byte %00000010, %01000000
e5c4: 07 e0     -         .byte %00000111, %11100000
e5c6: 0f f0     -         .byte %00001111, %11110000
e5c8: 1d b8     -         .byte %00011101, %10111000
e5ca: 17 e8     -         .byte %00010111, %11101000
e5cc: 07 c8     -         .byte %00000111, %11001000
e5ce: 02 60     -         .byte %00000010, %01100000
e5d0: 06 00     -         .byte %00000110, %00000000
e5d2: 02 40     - SPACE_ALIEN_A2:.byte %00000010, %01000000
e5d4: 07 e0     -         .byte %00000111, %11100000
e5d6: 0f f0     -         .byte %00001111, %11110000
e5d8: 1d b8     -         .byte %00011101, %10111000
e5da: 17 e8     -         .byte %00010111, %11101000
e5dc: 13 e0     -         .byte %00010011, %11100000
e5de: 06 40     -         .byte %00000110, %01000000
e5e0: 00 60     -         .byte %00000000, %01100000
e5e2: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
e5e4: 04 40     -         .byte %00000100, %01000000
e5e6: 03 80     -         .byte %00000011, %10000000
e5e8: 07 c0     -         .byte %00000111, %11000000
e5ea: 05 40     -         .byte %00000101, %01000000
e5ec: 07 c0     -         .byte %00000111, %11000000
e5ee: 0a a0     -         .byte %00001010, %10100000
e5f0: 0a a0     -         .byte %00001010, %10100000
e5f2: 00 00     - SPACE_ALIEN_C:.byte %00000000, %00000000
e5f4: 04 40     -         .byte %00000100, %01000000
e5f6: 0f e0     -         .byte %00001111, %11100000
e5f8: 19 30     -         .byte %00011001, %00110000
e5fa: 1f f0     -         .byte %00011111, %11110000
e5fc: 1f f0     -         .byte %00011111, %11110000
e5fe: 15 50     -         .byte %00010101, %01010000
e600: 0a a0     -         .byte %00001010, %10100000
e602: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
e60a: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
e612: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 16-23
e61a: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e622: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
e62a: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
e632: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 16-23
e63a: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e642: 20 20 20 20 20 20 20 20                          - SPRITE_YPOS:.byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 00-07
e64a: 30 30 30 30 30 30 30 30                          -         .byte $30, $30, $30, $30, $30, $30, $30, $30  // Sprite 08-15
e652: 40 40 40 40 40 40 40 40                          -         .byte $40, $40, $40, $40, $40, $40, $40, $40  // Sprite 16-23
e65a: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e662: 1f 1f 1f 1f 1f 1f 1f 1f                          - SPRITE_COLOR:.byte $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f  // Sprite 00-07
e66a: 23 23 23 23 23 23 23 23                          -         .byte $23, $23, $23, $23, $23, $23, $23, $23  // Sprite 08-15
e672: 2c 2c 2c 2c 2c 2c 2c 2c                          -         .byte $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2c  // Sprite 16-23
e67a: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e682: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
e68a: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
e692: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 16-23
e69a: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e6a2: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
e6aa: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
e6b2: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 16-23
e6ba: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e6c2: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
e6d2: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e6e2: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
e6f2: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e702: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_LO:.fill 4, 0
e706: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_HI:.fill 4, 0
e70a: a2 04     - find_next_invisible_bullet:ldx #(BULLET_COUNT-1)
e70c: bd 86 e7  -         lda ALIEN_BULLETS_STAT,x 
e70f: 30 09     -         bmi !next+ // Visible. Next.
e711: 09 80     -         ora #BULLET_ENABLE_FLAG
e713: 9d 86 e7  -         sta ALIEN_BULLETS_STAT,x
e716: 38        -         sec // Set carry flag (inicating we found a slot)
e717: 4c 1e e7  -         jmp !end+
e71a: ca        -         dex
e71b: 10 ef     -         bpl !loop-
e71d: 18        -         clc // Clear carry to indicate, we didn't found a free slot.
e71e: 60        -         rts
e71f: 20 29 e7  - update_alien_bullets:jsr move_bullets
e722: 20 3e e7  -         jsr check_bullets
e725: 20 58 e7  -         jsr draw_bullets
e728: 60        -         rts
e729: a2 05     - move_bullets:ldx #(BULLET_COUNT)
e72b: bd 86 e7  -         lda ALIEN_BULLETS_STAT,x
e72e: 10 0a     -         bpl !next+
e730: bd 90 e7  -         lda ALIEN_BULLETS_Y,x 
e733: 18        -         clc 
e734: 7d 95 e7  -         adc ALIEN_BULLETS_SPEED,x
e737: 9d 90 e7  -         sta ALIEN_BULLETS_Y,x
e73a: ca        -         dex
e73b: 10 ee     -         bpl !loop- 
e73d: 60        -         rts
e73e: a2 04     - check_bullets:ldx #(BULLET_COUNT-1)
e740: bd 86 e7  -         lda ALIEN_BULLETS_STAT,x
e743: 10 0f     -         bpl !next+
e745: bd 90 e7  -         lda ALIEN_BULLETS_Y,x
e748: c9 aa     -         cmp #BULLET_MAX_HEIGHT    // if ypos > BULLET_MAX_HEIGHT hide bullet 
e74a: 30 08     -         bmi !next+
e74c: bd 86 e7  - hide_bullet:lda ALIEN_BULLETS_STAT,x 
e74f: 29 7f     -         and #(~BULLET_ENABLE_FLAG)
e751: 9d 86 e7  -         sta ALIEN_BULLETS_STAT,x
e754: ca        -         dex
e755: 10 e9     -         bpl !loop-
e757: 60        -         rts
e758: a9 00     - draw_bullets:lda #0
e75a: 8d 16 d0  -         sta DIS01                   // xpos high
e75d: a9 04     -         lda #BULLET_LENGTH          // Length Low
e75f: 8d 18 d0  -         sta DIS03
e762: a9 00     -         lda #0                      // Length High
e764: 8d 19 d0  -         sta DIS04   
e767: a9 17     -         lda #BULLET_COLOR           // Color
e769: 8d 1a d0  -         sta DIS05
e76c: a2 04     -         ldx #(BULLET_COUNT-1)
e76e: bd 86 e7  -         lda ALIEN_BULLETS_STAT,x 
e771: 10 0f     -         bpl !next+
e773: bd 8b e7  -         lda ALIEN_BULLETS_X,x       // X-Pos low
e776: 8d 15 d0  -         sta DIS00
e779: bd 90 e7  -         lda ALIEN_BULLETS_Y,x 
e77c: 8d 17 d0  -         sta DIS02                   // ypos 
e77f: 20 c4 e2  -         jsr draw_vertical_line_
e782: ca        -         dex 
e783: 10 e9     -         bpl !loop-
e785: 60        -         rts
e786: 04 04 04 04 04                                   - ALIEN_BULLETS_STAT:.fill BULLET_COUNT, $04  // Bit 0..3 length
e78b: 00 00 00 00 00                                   - ALIEN_BULLETS_X:.fill BULLET_COUNT, $00  // xpos. If xpos > 255; stat bit 6 = 1
e790: 20 20 20 20 20                                   - ALIEN_BULLETS_Y:.fill BULLET_COUNT, $20  // ypos of the top
e795: 02 02 02 02 02                                   - ALIEN_BULLETS_SPEED:.fill BULLET_COUNT, $02

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 57 65 6c 63 6f 6d 65 20 74 6f 20 46 69 72 73 74  - msg_01: .text "Welcome to FirstKlaas OS v0.1"
f020: 4b 6c 61 61 73 20 4f 53 20 76 30 2e 31          
