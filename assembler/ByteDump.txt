******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: a9 00     -         lda #<main_isr
0805: 8d fe ff  -         sta $fffe 
0808: a9 0a     -         lda #>main_isr
080a: 8d ff ff  -         sta $ffff
080d: a9 00     -         lda #<main_isr
080f: 8d fa ff  -         sta $fffa 
0812: a9 0a     -         lda #>main_isr
0814: 8d fb ff  -         sta $fffb
0817: ad 13 d0  -         lda DISCR   // Set the auto adjust 
081a: 09 0c     -         ora #$0C    // and wrap flag
081c: 8d 13 d0  -         sta DISCR                
081f: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0821: 8d 0d dc  -         sta $dc0d
0824: a9 20     -         lda #color
0826: 20 3c e1  -         jsr set_fg_color_
0829: a9 02     -         lda #xpos
082b: 20 0c e1  -         jsr set_cursor_x_
082e: a9 01     -         lda #ypos
0830: 20 24 e1  -         jsr set_cursor_y_    
0833: a9 cf     -         lda #<addr
0835: 85 e0     -         sta zpRegE0
0837: a9 08     -         lda #>addr
0839: 85 e1     -         sta zpRegE1
083b: 20 b0 e1  -         jsr print_text_
083e: 20 5d e2  -         jsr init_sprites_
0841: 4c 41 08  -         jmp !end-
0844: a9 f0     - setup_timer:lda #$f0
0846: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
0849: a9 00     -         lda #$00
084b: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
084e: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
0850: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
0853: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
0855: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0858: 60        -         rts
0859: c8 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_top:.byte $c8,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
0869: cc cc cc cc                                     
086d: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$ba,$00
087d: cc cc ba 00                                     
0881: c7 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_bottom:.byte $c7,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
0891: cc cc cc cc                                     
0895: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$bb,$00
08a5: cc cc bb 00                                     
08a9: da da da da da da da da da da da da da da da da  - text_bar:.fill 37,$da 
08b9: da da da da da da da da da da da da da da da da 
08c9: da da da da da                                  
08ce: 00        -         .byte 0
08cf: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 4b 65 72  - welcome:.text "NE/OS v0.1 - Kernel Size 974 bytes"
08df: 6e 65 6c 20 53 69 7a 65 20 39 37 34 20 62 79 74 
08ef: 65 73                                           
08f1: 00        -         .byte 0
08f2: 46 52 41 4d 45 3a                                - txt_frame:.text "FRAME:"
08f8: 00        -         .byte 0

[ISR]
0a00: 48        - main_isr:pha
0a01: 8a        -         txa 
0a02: 48        -         pha 
0a03: 98        -         tya 
0a04: 48        -         pha
0a05: 48        -         pha
0a06: a9 05     -         lda #xlo
0a08: 8d 15 d0  -         sta DIS00
0a0b: a9 00     -         lda #xhi 
0a0d: 8d 16 d0  -         sta DIS01
0a10: a9 14     -         lda #y 
0a12: 8d 17 d0  -         sta DIS02
0a15: a9 fa     -         lda #width_lo 
0a17: 8d 18 d0  -         sta DIS03
0a1a: a9 00     -         lda #width_hi
0a1c: 8d 19 d0  -         sta DIS04
0a1f: a9 a0     -         lda #height
0a21: 8d 1a d0  -         sta DIS05
0a24: a9 37     -         lda #col 
0a26: 8d 1b d0  -         sta DIS06
0a29: 20 37 e2  -         jsr fill_rect_
0a2c: 68        -         pla 
0a2d: 20 4a e2  -         jsr draw_sprites_
0a30: 48        -         pha
0a31: a9 05     -         lda #xlo
0a33: 8d 15 d0  -         sta DIS00
0a36: a9 00     -         lda #xhi 
0a38: 8d 16 d0  -         sta DIS01
0a3b: a9 b5     -         lda #y 
0a3d: 8d 17 d0  -         sta DIS02
0a40: a9 fa     -         lda #width_lo 
0a42: 8d 18 d0  -         sta DIS03
0a45: a9 00     -         lda #width_hi
0a47: 8d 19 d0  -         sta DIS04
0a4a: a9 3b     -         lda #height
0a4c: 8d 1a d0  -         sta DIS05
0a4f: a9 2a     -         lda #col 
0a51: 8d 1b d0  -         sta DIS06
0a54: 20 37 e2  -         jsr fill_rect_
0a57: 68        -         pla 
0a58: 48        -         pha
0a59: a9 05     -         lda #xlo
0a5b: 8d 15 d0  -         sta DIS00
0a5e: a9 00     -         lda #xhi 
0a60: 8d 16 d0  -         sta DIS01
0a63: a9 b4     -         lda #y 
0a65: 8d 17 d0  -         sta DIS02
0a68: a9 fa     -         lda #lenlo 
0a6a: 8d 18 d0  -         sta DIS03
0a6d: a9 00     -         lda #lenhi
0a6f: 8d 19 d0  -         sta DIS04
0a72: a9 17     -         lda #col
0a74: 8d 1a d0  -         sta DIS05
0a77: 20 eb e1  -         jsr draw_horizonal_line_
0a7a: 68        -         pla 
0a7b: a9 2b     -         lda #color
0a7d: 20 3c e1  -         jsr set_fg_color_
0a80: a9 02     -         lda #xpos
0a82: 20 0c e1  -         jsr set_cursor_x_
0a85: a9 17     -         lda #ypos
0a87: 20 24 e1  -         jsr set_cursor_y_    
0a8a: a9 f2     -         lda #<addr
0a8c: 85 e0     -         sta zpRegE0
0a8e: a9 08     -         lda #>addr
0a90: 85 e1     -         sta zpRegE1
0a92: 20 b0 e1  -         jsr print_text_
0a95: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
0a98: 8d 63 e6  -         sta HTD_IN
0a9b: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
0a9e: 8d 64 e6  -         sta HTD_IN+1
0aa1: 20 68 e6  -         jsr bcd_convert_word_
0aa4: ad 67 e6  -         lda HTD_OUT+2
0aa7: 20 c8 e1  -         jsr print_hex_
0aaa: ad 66 e6  -         lda HTD_OUT+1
0aad: 20 c8 e1  -         jsr print_hex_
0ab0: ad 65 e6  -         lda HTD_OUT
0ab3: 20 c8 e1  -         jsr print_hex_
0ab6: 20 bf e5  -         jsr find_next_invisible_bullet
0ab9: 90 17     -         bcc draw_bullets
0abb: 8a        -         txa
0abc: 0a        -         asl
0abd: 18        -         clc
0abe: 69 80     -         adc #$80
0ac0: 9d 1f e6  -         sta ALIEN_BULLETS_STAT,x 
0ac3: a9 64     -         lda #100
0ac5: 9d 24 e6  -         sta ALIEN_BULLETS_X,x
0ac8: a9 00     -         lda #0
0aca: 9d 29 e6  -         sta ALIEN_BULLETS_y,x
0acd: a9 01     -         lda #1
0acf: 9d 2e e6  -         sta ALIEN_BULLETS_SPEED,x
0ad2: 20 d3 e5  - draw_bullets:jsr update_alien_bullets
0ad5: ad df e4  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
0ad8: c9 0a     -         cmp #10             // 10 is the minimum x position
0ada: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
0adc: a9 01     - left_underflow:lda #$01
0ade: 8d 2d 0b  -         sta operation+1
0ae1: 4c f0 0a  -         jmp go_down 
0ae4: ad e6 e4  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
0ae7: c9 ef     -         cmp #$ef            // Max xpos = 239
0ae9: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
0aeb: a9 ff     - right_overflow:lda #$ff            // By adding -1, we move left.
0aed: 8d 2d 0b  -         sta operation+1     // Write the new speed to the code (self modified)    
0af0: ad ff e4  - go_down:lda SPRITE_YPOS
0af3: c9 96     -         cmp #150
0af5: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
0af7: a0 08     - reset_ypos:ldy #8
0af9: a9 20     -         lda #$20              // Start Y position
0afb: 99 ff e4  -         sta SPRITE_YPOS,y 
0afe: 88        -         dey
0aff: 10 fa     -         bpl !loop-
0b01: a0 08     -         ldy #8
0b03: a9 30     -         lda #$30              // Start Y position
0b05: 99 07 e5  -         sta SPRITE_YPOS+8,y 
0b08: 88        -         dey
0b09: 10 fa     -         bpl !loop-
0b0b: a0 08     -         ldy #8
0b0d: a9 40     -         lda #$40              // Start Y position
0b0f: 99 0f e5  -         sta SPRITE_YPOS+16,y 
0b12: 88        -         dey
0b13: 10 fa     -         bpl !loop-
0b15: 4c 26 0b  -         jmp move    
0b18: a0 18     - decrease:ldy #24             // Calculate position fpr 24 sprites
0b1a: b9 ff e4  -         lda SPRITE_YPOS,y 
0b1d: 18        -         clc
0b1e: 69 04     -         adc #4
0b20: 99 ff e4  -         sta SPRITE_YPOS,y 
0b23: 88        -         dey
0b24: 10 f4     -         bpl !loop-
0b26: a0 07     - move:   ldy #7               // Y is the sprite index. We have 8 sprites in a row 
0b28: b9 df e4  -         lda SPRITE_XPOS,y    // Load current x position of the sprite   
0b2b: 18        -         clc
0b2c: 69 01     - operation:adc #1               // Add the speed
0b2e: 99 df e4  -         sta SPRITE_XPOS,y    // save the new xpos 
0b31: 99 e7 e4  -         sta SPRITE_XPOS+8,y  // Also for the second row
0b34: 99 ef e4  -         sta SPRITE_XPOS+16,y // Also for the second row
0b37: 88        -         dey
0b38: 10 ee     -         bpl !loop-
0b3a: ad 0d dc  - exit:   lda $dc0d            // Acknowledge the IRQ            
0b3d: 68        -         pla
0b3e: a8        -         tay 
0b3f: 68        -         pla 
0b40: aa        -         tax 
0b41: 68        -         pla
0b42: 40        -         rti

[Kernel Routines Entry Points]
e000: 4c 00 e1  - get_key:jmp get_key_
e003: 4c 0c e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c 24 e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 98 e1  - print_char:jmp print_char_

[Kernel Routines]
e100: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e103: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e105: 29 70     -         and #KEY_MOD_MASK
e107: aa        -         tax                     // Save modifiers
e108: ad 10 d0  -         lda KBD                 // Current key code to accu
e10b: 60        -         rts                     // Return
e10c: 48        - set_cursor_x_:pha                     // Save accu
e10d: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e110: a9 03     -         lda #CMD_SET_CURSOR_X
e112: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e115: ad 13 d0  -         lda DISCR
e118: 09 80     -         ora #$80
e11a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e11d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e120: 30 fb     -         bmi !wait-              // No! Let's wait
e122: 68        -         pla                     // Restore input parameter in accu
e123: 60        -         rts                     // Return
e124: 48        - set_cursor_y_:pha                     // Save accu
e125: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e128: a9 04     -         lda #CMD_SET_CURSOR_Y
e12a: 8d 14 d0  -         sta DISCMD
e12d: ad 13 d0  -         lda DISCR
e130: 09 80     -         ora #$80
e132: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e135: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e138: 30 fb     -         bmi !wait-              // No! Let's wait
e13a: 68        -         pla                     // Restore input parameter in accu
e13b: 60        -         rts                     // Return
e13c: 48        - set_fg_color_:pha                     // Save accu
e13d: 8d 15 d0  -         sta DIS00              // Save the color to the 
e140: a9 07     -         lda #CMD_SET_FG_COLOR
e142: 8d 14 d0  -         sta DISCMD
e145: ad 13 d0  -         lda DISCR
e148: 09 80     -         ora #$80
e14a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e14d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e150: 30 fb     -         bmi !wait-              // No! Let's wait
e152: 68        -         pla                     // Restore input parameter in accu
e153: 60        -         rts                     // Return
e154: 48        - set_bg_color_:pha                     // Save accu
e155: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e158: a9 08     -         lda #CMD_SET_BG_COLOR
e15a: 8d 14 d0  -         sta DISCMD
e15d: ad 13 d0  -         lda DISCR
e160: 09 80     -         ora #$80
e162: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e165: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e168: 30 fb     -         bmi !wait-              // No! Let's wait
e16a: 68        -         pla                     // Restore input parameter in accu
e16b: 60        -         rts                     // Return
e16c: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e16e: 8d 14 d0  -         sta DISCMD
e171: ad 13 d0  -         lda DISCR
e174: 09 80     -         ora #$80
e176: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e179: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e17c: 30 fb     -         bmi !wait-              // No! Let's wait
e17e: ad 15 d0  -         lda DIS00
e181: 60        -         rts                     // Return
e182: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e184: 8d 14 d0  -         sta DISCMD
e187: ad 13 d0  -         lda DISCR
e18a: 09 80     -         ora #$80
e18c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e18f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e192: 30 fb     -         bmi !wait-              // No! Let's wait
e194: ad 15 d0  -         lda DIS00
e197: 60        -         rts                     // Return
e198: 48        - print_char_:pha                     // Save accu
e199: 8d 15 d0  -         sta DIS00              // Save the char to the 
e19c: a9 0d     -         lda #CMD_WRITE_CHAR
e19e: 8d 14 d0  -         sta DISCMD
e1a1: ad 13 d0  -         lda DISCR
e1a4: 09 80     -         ora #$80
e1a6: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1a9: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1ac: 30 fb     -         bmi !wait-              // No! Let's wait
e1ae: 68        -         pla                     // Restore input parameter in accu
e1af: 60        -         rts                     // Return
e1b0: 8c c4 e1  - print_text_:sty (!end+)+1       // Save y register
e1b3: 8d c6 e1  -         sta (!end+)+3
e1b6: a0 00     -         ldy #0              // Index for the char within the string
e1b8: b1 e0     -         lda (zpRegE0),y     // load character
e1ba: f0 07     -         beq !end+
e1bc: 20 98 e1  -         jsr print_char_
e1bf: c8        -         iny
e1c0: 4c b8 e1  -         jmp !next-
e1c3: a0 00     -         ldy #0
e1c5: a9 00     -         lda #0
e1c7: 60        -         rts
e1c8: 48        - print_hex_:pha
e1c9: a9 00     -         lda #<hex_chars
e1cb: 85 e0     -         sta zpRegE0
e1cd: a9 f0     -         lda #>hex_chars
e1cf: 85 e1     -         sta zpRegE1
e1d1: 68        -         pla
e1d2: 48        -         pha
e1d3: 4a        -         lsr
e1d4: 4a        -         lsr
e1d5: 4a        -         lsr
e1d6: 4a        -         lsr
e1d7: 29 0f     -         and #$0f
e1d9: a8        -         tay
e1da: b1 e0     -         lda (zpRegE0),y
e1dc: 20 98 e1  -         jsr print_char_
e1df: 68        -         pla
e1e0: 48        -         pha
e1e1: 29 0f     -         and #$0f
e1e3: a8        -         tay
e1e4: b1 e0     -         lda (zpRegE0),y
e1e6: 20 98 e1  -         jsr print_char_
e1e9: 68        -         pla
e1ea: 60        -         rts
e1eb: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e1ed: 8d 14 d0  -         sta DISCMD
e1f0: ad 13 d0  -         lda DISCR
e1f3: 09 80     -         ora #$80
e1f5: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1f8: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e1fb: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e1fd: 60        -         rts
e1fe: a9 16     - draw_vertical_line_:lda #CMD_DRAW_VLINE
e200: 8d 14 d0  -         sta DISCMD
e203: ad 13 d0  -         lda DISCR
e206: 09 80     -         ora #$80
e208: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e20b: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e20e: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e210: 60        -         rts
e211: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e213: 8d 14 d0  -         sta DISCMD
e216: ad 13 d0  -         lda DISCR
e219: 09 80     -         ora #$80
e21b: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e21e: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e221: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e223: 60        -         rts
e224: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e226: 8d 14 d0  -         sta DISCMD
e229: ad 13 d0  -         lda DISCR
e22c: 09 80     -         ora #$80
e22e: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e231: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e234: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e236: 60        -         rts
e237: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e239: 8d 14 d0  -         sta DISCMD
e23c: ad 13 d0  -         lda DISCR
e23f: 09 80     -         ora #$80
e241: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e244: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e247: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e249: 60        -         rts
e24a: a9 1e     - draw_sprites_:lda #CMD_DRAW_SPRITES
e24c: 8d 14 d0  -         sta DISCMD
e24f: ad 13 d0  -         lda DISCR
e252: 09 80     -         ora #$80
e254: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e257: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e25a: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e25c: 60        -         rts
e25d: a2 00     - init_sprites_:ldx #index
e25f: a9 8f     -         lda #<address
e261: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e264: a9 e4     -         lda #>address
e266: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e269: a2 08     -         ldx #index
e26b: a9 9f     -         lda #<address
e26d: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e270: a9 e4     -         lda #>address
e272: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e275: a2 10     -         ldx #index
e277: a9 af     -         lda #<address
e279: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e27c: a9 e4     -         lda #>address
e27e: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e281: a2 01     -         ldx #index
e283: a9 8f     -         lda #<address
e285: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e288: a9 e4     -         lda #>address
e28a: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e28d: a2 09     -         ldx #index
e28f: a9 9f     -         lda #<address
e291: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e294: a9 e4     -         lda #>address
e296: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e299: a2 11     -         ldx #index
e29b: a9 af     -         lda #<address
e29d: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e2a0: a9 e4     -         lda #>address
e2a2: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e2a5: a2 02     -         ldx #index
e2a7: a9 8f     -         lda #<address
e2a9: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e2ac: a9 e4     -         lda #>address
e2ae: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e2b1: a2 0a     -         ldx #index
e2b3: a9 9f     -         lda #<address
e2b5: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e2b8: a9 e4     -         lda #>address
e2ba: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e2bd: a2 12     -         ldx #index
e2bf: a9 af     -         lda #<address
e2c1: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e2c4: a9 e4     -         lda #>address
e2c6: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e2c9: a2 03     -         ldx #index
e2cb: a9 8f     -         lda #<address
e2cd: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e2d0: a9 e4     -         lda #>address
e2d2: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e2d5: a2 0b     -         ldx #index
e2d7: a9 9f     -         lda #<address
e2d9: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e2dc: a9 e4     -         lda #>address
e2de: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e2e1: a2 13     -         ldx #index
e2e3: a9 af     -         lda #<address
e2e5: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e2e8: a9 e4     -         lda #>address
e2ea: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e2ed: a2 04     -         ldx #index
e2ef: a9 8f     -         lda #<address
e2f1: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e2f4: a9 e4     -         lda #>address
e2f6: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e2f9: a2 0c     -         ldx #index
e2fb: a9 9f     -         lda #<address
e2fd: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e300: a9 e4     -         lda #>address
e302: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e305: a2 14     -         ldx #index
e307: a9 af     -         lda #<address
e309: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e30c: a9 e4     -         lda #>address
e30e: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e311: a2 05     -         ldx #index
e313: a9 8f     -         lda #<address
e315: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e318: a9 e4     -         lda #>address
e31a: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e31d: a2 0d     -         ldx #index
e31f: a9 9f     -         lda #<address
e321: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e324: a9 e4     -         lda #>address
e326: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e329: a2 15     -         ldx #index
e32b: a9 af     -         lda #<address
e32d: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e330: a9 e4     -         lda #>address
e332: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e335: a2 06     -         ldx #index
e337: a9 8f     -         lda #<address
e339: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e33c: a9 e4     -         lda #>address
e33e: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e341: a2 0e     -         ldx #index
e343: a9 9f     -         lda #<address
e345: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e348: a9 e4     -         lda #>address
e34a: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e34d: a2 16     -         ldx #index
e34f: a9 af     -         lda #<address
e351: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e354: a9 e4     -         lda #>address
e356: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e359: a2 07     -         ldx #index
e35b: a9 8f     -         lda #<address
e35d: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e360: a9 e4     -         lda #>address
e362: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e365: a2 0f     -         ldx #index
e367: a9 9f     -         lda #<address
e369: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e36c: a9 e4     -         lda #>address
e36e: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e371: a2 17     -         ldx #index
e373: a9 af     -         lda #<address
e375: 9d 7f e5  -         sta SPRITE_DATA_LO, x
e378: a9 e4     -         lda #>address
e37a: 9d 9f e5  -         sta SPRITE_DATA_HI, x                
e37d: a2 00     -         ldx #index
e37f: bd bf e4  -         lda SPRITE_FLAGS, x
e382: 05 c0     -         ora SPRITE_ENABLE_FLAG
e384: 9d bf e4  -         sta SPRITE_FLAGS, x
e387: a2 01     -         ldx #index
e389: bd bf e4  -         lda SPRITE_FLAGS, x
e38c: 05 c0     -         ora SPRITE_ENABLE_FLAG
e38e: 9d bf e4  -         sta SPRITE_FLAGS, x
e391: a2 02     -         ldx #index
e393: bd bf e4  -         lda SPRITE_FLAGS, x
e396: 05 c0     -         ora SPRITE_ENABLE_FLAG
e398: 9d bf e4  -         sta SPRITE_FLAGS, x
e39b: a2 03     -         ldx #index
e39d: bd bf e4  -         lda SPRITE_FLAGS, x
e3a0: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3a2: 9d bf e4  -         sta SPRITE_FLAGS, x
e3a5: a2 04     -         ldx #index
e3a7: bd bf e4  -         lda SPRITE_FLAGS, x
e3aa: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3ac: 9d bf e4  -         sta SPRITE_FLAGS, x
e3af: a2 05     -         ldx #index
e3b1: bd bf e4  -         lda SPRITE_FLAGS, x
e3b4: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3b6: 9d bf e4  -         sta SPRITE_FLAGS, x
e3b9: a2 06     -         ldx #index
e3bb: bd bf e4  -         lda SPRITE_FLAGS, x
e3be: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3c0: 9d bf e4  -         sta SPRITE_FLAGS, x
e3c3: a2 07     -         ldx #index
e3c5: bd bf e4  -         lda SPRITE_FLAGS, x
e3c8: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3ca: 9d bf e4  -         sta SPRITE_FLAGS, x
e3cd: a2 08     -         ldx #index
e3cf: bd bf e4  -         lda SPRITE_FLAGS, x
e3d2: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3d4: 9d bf e4  -         sta SPRITE_FLAGS, x
e3d7: a2 09     -         ldx #index
e3d9: bd bf e4  -         lda SPRITE_FLAGS, x
e3dc: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3de: 9d bf e4  -         sta SPRITE_FLAGS, x
e3e1: a2 0a     -         ldx #index
e3e3: bd bf e4  -         lda SPRITE_FLAGS, x
e3e6: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3e8: 9d bf e4  -         sta SPRITE_FLAGS, x
e3eb: a2 0b     -         ldx #index
e3ed: bd bf e4  -         lda SPRITE_FLAGS, x
e3f0: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3f2: 9d bf e4  -         sta SPRITE_FLAGS, x
e3f5: a2 0c     -         ldx #index
e3f7: bd bf e4  -         lda SPRITE_FLAGS, x
e3fa: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3fc: 9d bf e4  -         sta SPRITE_FLAGS, x
e3ff: a2 0d     -         ldx #index
e401: bd bf e4  -         lda SPRITE_FLAGS, x
e404: 05 c0     -         ora SPRITE_ENABLE_FLAG
e406: 9d bf e4  -         sta SPRITE_FLAGS, x
e409: a2 0e     -         ldx #index
e40b: bd bf e4  -         lda SPRITE_FLAGS, x
e40e: 05 c0     -         ora SPRITE_ENABLE_FLAG
e410: 9d bf e4  -         sta SPRITE_FLAGS, x
e413: a2 0f     -         ldx #index
e415: bd bf e4  -         lda SPRITE_FLAGS, x
e418: 05 c0     -         ora SPRITE_ENABLE_FLAG
e41a: 9d bf e4  -         sta SPRITE_FLAGS, x
e41d: a2 10     -         ldx #index
e41f: bd bf e4  -         lda SPRITE_FLAGS, x
e422: 05 c0     -         ora SPRITE_ENABLE_FLAG
e424: 9d bf e4  -         sta SPRITE_FLAGS, x
e427: a2 11     -         ldx #index
e429: bd bf e4  -         lda SPRITE_FLAGS, x
e42c: 05 c0     -         ora SPRITE_ENABLE_FLAG
e42e: 9d bf e4  -         sta SPRITE_FLAGS, x
e431: a2 12     -         ldx #index
e433: bd bf e4  -         lda SPRITE_FLAGS, x
e436: 05 c0     -         ora SPRITE_ENABLE_FLAG
e438: 9d bf e4  -         sta SPRITE_FLAGS, x
e43b: a2 13     -         ldx #index
e43d: bd bf e4  -         lda SPRITE_FLAGS, x
e440: 05 c0     -         ora SPRITE_ENABLE_FLAG
e442: 9d bf e4  -         sta SPRITE_FLAGS, x
e445: a2 14     -         ldx #index
e447: bd bf e4  -         lda SPRITE_FLAGS, x
e44a: 05 c0     -         ora SPRITE_ENABLE_FLAG
e44c: 9d bf e4  -         sta SPRITE_FLAGS, x
e44f: a2 15     -         ldx #index
e451: bd bf e4  -         lda SPRITE_FLAGS, x
e454: 05 c0     -         ora SPRITE_ENABLE_FLAG
e456: 9d bf e4  -         sta SPRITE_FLAGS, x
e459: a2 16     -         ldx #index
e45b: bd bf e4  -         lda SPRITE_FLAGS, x
e45e: 05 c0     -         ora SPRITE_ENABLE_FLAG
e460: 9d bf e4  -         sta SPRITE_FLAGS, x
e463: a2 17     -         ldx #index
e465: bd bf e4  -         lda SPRITE_FLAGS, x
e468: 05 c0     -         ora SPRITE_ENABLE_FLAG
e46a: 9d bf e4  -         sta SPRITE_FLAGS, x
e46d: a9 bf     -         lda #<SPRITE_DEFINITON_BLOCK
e46f: 8d 15 d0  -         sta DIS00
e472: a9 e4     -         lda #>SPRITE_DEFINITON_BLOCK
e474: 8d 16 d0  -         sta DIS01
e477: a9 20     -         lda #32                 // Set number of sprites
e479: 8d 17 d0  -         sta DIS02
e47c: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
e47e: 8d 14 d0  -         sta DISCMD              //                                          
e481: ad 13 d0  -         lda DISCR               // Load Display command register
e484: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
e486: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e489: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e48c: 30 fb     -         bmi !wait-              // No! Let's wait
e48e: 60        -         rts
e48f: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
e491: 07 e0     -         .byte %00000111, %11100000
e493: 0f f0     -         .byte %00001111, %11110000
e495: 1d b8     -         .byte %00011101, %10111000
e497: 17 e8     -         .byte %00010111, %11101000
e499: 17 e8     -         .byte %00010111, %11101000
e49b: 02 40     -         .byte %00000010, %01000000
e49d: 06 60     -         .byte %00000110, %01100000
e49f: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
e4a1: 04 40     -         .byte %00000100, %01000000
e4a3: 03 80     -         .byte %00000011, %10000000
e4a5: 07 c0     -         .byte %00000111, %11000000
e4a7: 05 40     -         .byte %00000101, %01000000
e4a9: 07 c0     -         .byte %00000111, %11000000
e4ab: 0a a0     -         .byte %00001010, %10100000
e4ad: 0a a0     -         .byte %00001010, %10100000
e4af: 00 00     - SPACE_ALIEN_C:.byte %00000000, %00000000
e4b1: 04 40     -         .byte %00000100, %01000000
e4b3: 0f e0     -         .byte %00001111, %11100000
e4b5: 19 30     -         .byte %00011001, %00110000
e4b7: 1f f0     -         .byte %00011111, %11110000
e4b9: 1f f0     -         .byte %00011111, %11110000
e4bb: 15 50     -         .byte %00010101, %01010000
e4bd: 0a a0     -         .byte %00001010, %10100000
e4bf: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
e4c7: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
e4cf: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 16-23
e4d7: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e4df: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
e4e7: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
e4ef: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 16-23
e4f7: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e4ff: 20 20 20 20 20 20 20 20                          - SPRITE_YPOS:.byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 00-07
e507: 30 30 30 30 30 30 30 30                          -         .byte $30, $30, $30, $30, $30, $30, $30, $30  // Sprite 08-15
e50f: 40 40 40 40 40 40 40 40                          -         .byte $40, $40, $40, $40, $40, $40, $40, $40  // Sprite 16-23
e517: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e51f: 1f 1f 1f 1f 1f 1f 1f 1f                          - SPRITE_COLOR:.byte $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f  // Sprite 00-07
e527: 23 23 23 23 23 23 23 23                          -         .byte $23, $23, $23, $23, $23, $23, $23, $23  // Sprite 08-15
e52f: 2c 2c 2c 2c 2c 2c 2c 2c                          -         .byte $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2c  // Sprite 16-23
e537: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e53f: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
e547: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
e54f: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 16-23
e557: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e55f: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
e567: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
e56f: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 16-23
e577: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e57f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
e58f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e59f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
e5af: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e5bf: ae 1e e6  - find_next_invisible_bullet:ldx ALIEN_BULLETS_COUNT
e5c2: bd 1f e6  -         lda ALIEN_BULLETS_STAT,x 
e5c5: 30 07     -         bmi !next+ // Invisible. Next.
e5c7: 09 80     -         ora #$80
e5c9: 9d 1f e6  -         sta ALIEN_BULLETS_STAT, x
e5cc: 38        -         sec // Set carry flag (inicating we found a slot)
e5cd: 60        -         rts // So we avoid a jump. But good practice?
e5ce: ca        -         dex
e5cf: 10 f1     -         bpl !loop-
e5d1: 18        -         clc // Clear carry to indicate, we didn't found a free slot.
e5d2: 60        -         rts
e5d3: ae 1e e6  - update_alien_bullets:ldx ALIEN_BULLETS_COUNT
e5d6: bd 1f e6  -         lda ALIEN_BULLETS_STAT,x // Get status info for bullet.
e5d9: 10 3f     -         bpl !next+ // If bit 7 = 0 => bullet is not visible
e5db: bd 24 e6  - draw_bullet:lda ALIEN_BULLETS_X,x    // X-Pos low
e5de: 8d 15 d0  -         sta DIS00
e5e1: bd 1f e6  -         lda ALIEN_BULLETS_STAT,x // Status byte
e5e4: 2a        -         rol 
e5e5: 2a        -         rol                      // Bring bit 6 to pos 0
e5e6: 2a        -         rol 
e5e7: 29 01     -         and #1 
e5e9: 8d 16 d0  -         sta DIS01   // xpos high
e5ec: bd 29 e6  -         lda ALIEN_BULLETS_y,x 
e5ef: 8d 17 d0  -         sta DIS02   // ypos 
e5f2: a9 04     -         lda #4      // Length Low
e5f4: 8d 18 d0  -         sta DIS03
e5f7: a9 00     -         lda #0      // Length High
e5f9: 8d 19 d0  -         sta DIS04   
e5fc: a9 17     -         lda #23     // Color
e5fe: 8d 1a d0  -         sta DIS05
e601: 20 eb e1  -         jsr draw_horizonal_line_
e604: bd 29 e6  - move_bullet:lda ALIEN_BULLETS_y,x 
e607: 18        -         clc 
e608: 7d 2e e6  -         adc ALIEN_BULLETS_SPEED,x 
e60b: 9d 29 e6  -         sta ALIEN_BULLETS_y,x 
e60e: c9 64     - check_bullet:cmp #100    // if ypos > 100 hide bullet 
e610: 30 08     -         bmi !next+
e612: bd 1f e6  - hide_bullet:lda ALIEN_BULLETS_STAT,x 
e615: 29 7f     -         and #%01111111
e617: 9d 1f e6  -         sta ALIEN_BULLETS_STAT,x
e61a: ca        -         dex
e61b: 10 b9     -         bpl !loop-
e61d: 60        -         rts
e61e: 05        - ALIEN_BULLETS_COUNT:.byte $05 
e61f: 04 04 04 04 04                                   - ALIEN_BULLETS_STAT:.fill $05, $04 // Bit 0..3 length
e624: 00 00 00 00 00                                   - ALIEN_BULLETS_X:.fill $05, $00 // xpos. If xpos > 255; stat bit 6 = 1
e629: 00 00 00 00 00                                   - ALIEN_BULLETS_y:.fill $05, $00 // ypos of the top
e62e: 02 02 02 02 02                                   - ALIEN_BULLETS_SPEED:.fill $05, $02
e633: 00 00 01 00 00 02 00 00 04 00 00 08              - BCD_LOOKUP_TABLE:.byte    $00, $00, $01, $00, $00, $02, $00, $00, $04, $00, $00, $08
e63f: 00 00 16 00 00 32 00 00 64 00 01 28              -         .byte    $00, $00, $16, $00, $00, $32, $00, $00, $64, $00, $01, $28
e64b: 00 02 56 00 05 12 00 10 24 00 20 48              -         .byte    $00, $02, $56, $00, $05, $12, $00, $10, $24, $00, $20, $48
e657: 00 40 96 00 81 92 01 63 84 03 27 68              -         .byte    $00, $40, $96, $00, $81, $92, $01, $63, $84, $03, $27, $68
e663: 00 00     - HTD_IN: .byte $00, $00
e665: 00 00 00  - HTD_OUT:.byte $00, $00, $00 
e668: f8        - bcd_convert_word_:sed 
e669: a9 00     -         lda #0
e66b: 8d 65 e6  -         sta HTD_OUT
e66e: 8d 66 e6  -         sta HTD_OUT+1
e671: 8d 67 e6  -         sta HTD_OUT+2
e674: a2 2d     -         ldx #$2d
e676: 0e 63 e6  -         asl HTD_IN 
e679: 2e 64 e6  -         rol HTD_IN+1
e67c: 90 1c     -         bcc htd1
e67e: ad 65 e6  -         lda HTD_OUT
e681: 18        -         clc 
e682: 7d 35 e6  -         adc BCD_LOOKUP_TABLE+2,x
e685: 8d 65 e6  -         sta HTD_OUT
e688: ad 66 e6  -         lda HTD_OUT+1
e68b: 7d 34 e6  -         adc BCD_LOOKUP_TABLE+1,x
e68e: 8d 66 e6  -         sta HTD_OUT+1
e691: ad 67 e6  -         lda HTD_OUT+2
e694: 7d 33 e6  -         adc BCD_LOOKUP_TABLE,x
e697: 8d 67 e6  -         sta HTD_OUT+2
e69a: ca        - htd1:   dex
e69b: ca        -         dex 
e69c: ca        -         dex 
e69d: 10 d7     -         bpl !loop- 
e69f: d8        -         cld 
e6a0: 60        -         rts
e6a1: a9 1f     - rand8,rand8b1-1:lda rand8b1:#31
e6a3: 0a        -         asl
e6a4: 49 35     - rand8a1-1:eor rand8a1:#53
e6a6: 8d a2 e6  -         sta rand8b1
e6a9: 6d a5 e6  -         adc rand8a1
e6ac: 8d a5 e6  -         sta rand8a1
e6af: 60        -         rts
e6b0: 48        - set_seed:pha
e6b1: 29 d9     -         and #217
e6b3: 18        -         clc
e6b4: 69 0f     -         adc #<21263
e6b6: 8d a5 e6  -         sta rand8a1
e6b9: 68        -         pla
e6ba: 29 26     -         and #255-217
e6bc: 69 53     -         adc #>21263
e6be: 8d a2 e6  -         sta rand8b1
e6c1: 60        -         rts
e6c2: 48        - byte_to_hex:pha                     // Save value to stack.
e6c3: 29 0f     -         and #%00001111
e6c5: 85 e0     -         sta zpRegE0             // store the lower nibble
e6c7: 68        -         pla                     // Load the original value
e6c8: 48        -         pha                     // and save it again
e6c9: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e6ca: 4a        -         lsr
e6cb: 4a        -         lsr
e6cc: 4a        -         lsr
e6cd: 85 e1     -         sta zpRegE1             // store the higher nibble
e6cf: 68        -         pla                     // restore the accu
e6d0: 60        -         rts
e6d1: a5 e0     - convert565:lda zpRegE0             // red value
e6d3: 0a        -         asl                     // shift three to the left as we
e6d4: 0a        -         asl                     // need to move the lower 5 bits of red
e6d5: 0a        -         asl                     // to the bits 7-5
e6d6: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e6d8: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e6da: 4a        -         lsr                     // lower bits of the output highbyte
e6db: 4a        -         lsr
e6dc: 4a        -         lsr
e6dd: 29 07     -         and #%00000111          // Only the lower three bits.
e6df: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e6e1: 85 e0     -         sta zpRegE0             // Store the final high byte
e6e3: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e6e5: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e6e6: 0a        -         asl                     // it with zeros
e6e7: 0a        -         asl
e6e8: 0a        -         asl
e6e9: 0a        -         asl
e6ea: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e6ec: a5 e2     -         lda zpRegE2             // Load blue
e6ee: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e6f0: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e6f2: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e6f4: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 57 65 6c 63 6f 6d 65 20 74 6f 20 46 69 72 73 74  - msg_01: .text "Welcome to FirstKlaas OS v0.1"
f020: 4b 6c 61 61 73 20 4f 53 20 76 30 2e 31          
