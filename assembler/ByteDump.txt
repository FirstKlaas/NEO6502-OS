******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: a9 00     -         lda #<main_isr
0805: 8d fe ff  -         sta $fffe 
0808: a9 0a     -         lda #>main_isr
080a: 8d ff ff  -         sta $ffff
080d: a9 00     -         lda #<main_isr
080f: 8d fa ff  -         sta $fffa 
0812: a9 0a     -         lda #>main_isr
0814: 8d fb ff  -         sta $fffb
0817: ad 13 d0  -         lda DISCR   // Set the auto adjust 
081a: 09 0c     -         ora #$0C    // and wrap flag
081c: 8d 13 d0  -         sta DISCR                
081f: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0821: 8d 0d dc  -         sta $dc0d
0824: a9 20     -         lda #color
0826: 20 3c e1  -         jsr set_fg_color_
0829: a9 02     -         lda #xpos
082b: 20 0c e1  -         jsr set_cursor_x_
082e: a9 01     -         lda #ypos
0830: 20 24 e1  -         jsr set_cursor_y_    
0833: a9 cf     -         lda #<addr
0835: 85 e0     -         sta zpRegE0
0837: a9 08     -         lda #>addr
0839: 85 e1     -         sta zpRegE1
083b: 20 b0 e1  -         jsr print_text_
083e: 20 4a e2  -         jsr init_sprites_
0841: 4c 41 08  -         jmp !end-
0844: a9 f0     - setup_timer:lda #$f0
0846: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
0849: a9 00     -         lda #$00
084b: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
084e: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
0850: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
0853: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
0855: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0858: 60        -         rts
0859: c8 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_top:.byte $c8,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
0869: cc cc cc cc                                     
086d: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$ba,$00
087d: cc cc ba 00                                     
0881: c7 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_bottom:.byte $c7,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
0891: cc cc cc cc                                     
0895: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$bb,$00
08a5: cc cc bb 00                                     
08a9: da da da da da da da da da da da da da da da da  - text_bar:.fill 37,$da 
08b9: da da da da da da da da da da da da da da da da 
08c9: da da da da da                                  
08ce: 00        -         .byte 0
08cf: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 4b 65 72  - welcome:.text "NE/OS v0.1 - Kernel Size 974 bytes"
08df: 6e 65 6c 20 53 69 7a 65 20 39 37 34 20 62 79 74 
08ef: 65 73                                           
08f1: 00        -         .byte 0

[ISR]
0a00: 48        - main_isr:pha
0a01: 8a        -         txa 
0a02: 48        -         pha 
0a03: 98        -         tya 
0a04: 48        -         pha
0a05: 48        -         pha
0a06: a9 05     -         lda #xlo
0a08: 8d 15 d0  -         sta DIS00
0a0b: a9 00     -         lda #xhi 
0a0d: 8d 16 d0  -         sta DIS01
0a10: a9 14     -         lda #y 
0a12: 8d 17 d0  -         sta DIS02
0a15: a9 fa     -         lda #width_lo 
0a17: 8d 18 d0  -         sta DIS03
0a1a: a9 00     -         lda #width_hi
0a1c: 8d 19 d0  -         sta DIS04
0a1f: a9 a0     -         lda #height
0a21: 8d 1a d0  -         sta DIS05
0a24: a9 37     -         lda #col 
0a26: 8d 1b d0  -         sta DIS06
0a29: 20 24 e2  -         jsr fill_rect_
0a2c: 68        -         pla 
0a2d: 20 37 e2  -         jsr draw_sprites_
0a30: 48        -         pha
0a31: a9 05     -         lda #xlo
0a33: 8d 15 d0  -         sta DIS00
0a36: a9 00     -         lda #xhi 
0a38: 8d 16 d0  -         sta DIS01
0a3b: a9 b5     -         lda #y 
0a3d: 8d 17 d0  -         sta DIS02
0a40: a9 fa     -         lda #width_lo 
0a42: 8d 18 d0  -         sta DIS03
0a45: a9 00     -         lda #width_hi
0a47: 8d 19 d0  -         sta DIS04
0a4a: a9 3b     -         lda #height
0a4c: 8d 1a d0  -         sta DIS05
0a4f: a9 2a     -         lda #col 
0a51: 8d 1b d0  -         sta DIS06
0a54: 20 24 e2  -         jsr fill_rect_
0a57: 68        -         pla 
0a58: 48        -         pha
0a59: a9 05     -         lda #xlo
0a5b: 8d 15 d0  -         sta DIS00
0a5e: a9 00     -         lda #xhi 
0a60: 8d 16 d0  -         sta DIS01
0a63: a9 b4     -         lda #y 
0a65: 8d 17 d0  -         sta DIS02
0a68: a9 fa     -         lda #lenlo 
0a6a: 8d 18 d0  -         sta DIS03
0a6d: a9 00     -         lda #lenhi
0a6f: 8d 19 d0  -         sta DIS04
0a72: a9 17     -         lda #col
0a74: 8d 1a d0  -         sta DIS05
0a77: 20 eb e1  -         jsr draw_horizonal_line_
0a7a: 68        -         pla 
0a7b: a9 2b     -         lda #color
0a7d: 20 3c e1  -         jsr set_fg_color_
0a80: a9 02     -         lda #xpos
0a82: 20 0c e1  -         jsr set_cursor_x_
0a85: a9 17     -         lda #ypos
0a87: 20 24 e1  -         jsr set_cursor_y_    
0a8a: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
0a8d: 8d dc e5  -         sta HTD_IN
0a90: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
0a93: 8d dd e5  -         sta HTD_IN+1
0a96: 20 e1 e5  -         jsr bcd_convert_word_
0a99: ad e0 e5  -         lda HTD_OUT+2
0a9c: 20 c8 e1  -         jsr print_hex_
0a9f: ad df e5  -         lda HTD_OUT+1
0aa2: 20 c8 e1  -         jsr print_hex_
0aa5: ad de e5  -         lda HTD_OUT
0aa8: 20 c8 e1  -         jsr print_hex_
0aab: ad cc e4  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
0aae: c9 0a     -         cmp #10             // 10 is the minimum x position
0ab0: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
0ab2: a9 01     - left_underflow:lda #$01
0ab4: 8d 03 0b  -         sta operation+1
0ab7: 4c c6 0a  -         jmp go_down 
0aba: ad d3 e4  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
0abd: c9 ef     -         cmp #$ef            // Max xpos = 239
0abf: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
0ac1: a9 ff     - right_overflow:lda #$ff            // By adding -1, we move left.
0ac3: 8d 03 0b  -         sta operation+1     // Write the new speed to the code (self modified)    
0ac6: ad ec e4  - go_down:lda SPRITE_YPOS
0ac9: c9 96     -         cmp #150
0acb: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
0acd: a0 08     - reset_ypos:ldy #8
0acf: a9 20     -         lda #$20              // Start Y position
0ad1: 99 ec e4  -         sta SPRITE_YPOS,y 
0ad4: 88        -         dey
0ad5: 10 fa     -         bpl !loop-
0ad7: a0 08     -         ldy #8
0ad9: a9 30     -         lda #$30              // Start Y position
0adb: 99 f4 e4  -         sta SPRITE_YPOS+8,y 
0ade: 88        -         dey
0adf: 10 fa     -         bpl !loop-
0ae1: a0 08     -         ldy #8
0ae3: a9 40     -         lda #$40              // Start Y position
0ae5: 99 fc e4  -         sta SPRITE_YPOS+16,y 
0ae8: 88        -         dey
0ae9: 10 fa     -         bpl !loop-
0aeb: 4c fc 0a  -         jmp move    
0aee: a0 18     - decrease:ldy #24             // Calculate position fpr 24 sprites
0af0: b9 ec e4  -         lda SPRITE_YPOS,y 
0af3: 18        -         clc
0af4: 69 04     -         adc #4
0af6: 99 ec e4  -         sta SPRITE_YPOS,y 
0af9: 88        -         dey
0afa: 10 f4     -         bpl !loop-
0afc: a0 07     - move:   ldy #7               // Y is the sprite index. We have 8 sprites in a row 
0afe: b9 cc e4  -         lda SPRITE_XPOS,y    // Load current x position of the sprite   
0b01: 18        -         clc
0b02: 69 01     - operation:adc #1               // Add the speed
0b04: 99 cc e4  -         sta SPRITE_XPOS,y    // save the new xpos 
0b07: 99 d4 e4  -         sta SPRITE_XPOS+8,y  // Also for the second row
0b0a: 99 dc e4  -         sta SPRITE_XPOS+16,y // Also for the second row
0b0d: 88        -         dey
0b0e: 10 ee     -         bpl !loop-
0b10: ad 0d dc  - exit:   lda $dc0d            // Acknowledge the IRQ            
0b13: 68        -         pla
0b14: a8        -         tay 
0b15: 68        -         pla 
0b16: aa        -         tax 
0b17: 68        -         pla
0b18: 40        -         rti

[Kernel Routines Entry Points]
e000: 4c 00 e1  - get_key:jmp get_key_
e003: 4c 0c e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c 24 e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 98 e1  - print_char:jmp print_char_

[Kernel Routines]
e100: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e103: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e105: 29 70     -         and #KEY_MOD_MASK
e107: aa        -         tax                     // Save modifiers
e108: ad 10 d0  -         lda KBD                 // Current key code to accu
e10b: 60        -         rts                     // Return
e10c: 48        - set_cursor_x_:pha                     // Save accu
e10d: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e110: a9 03     -         lda #CMD_SET_CURSOR_X
e112: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e115: ad 13 d0  -         lda DISCR
e118: 09 80     -         ora #$80
e11a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e11d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e120: 30 fb     -         bmi !wait-              // No! Let's wait
e122: 68        -         pla                     // Restore input parameter in accu
e123: 60        -         rts                     // Return
e124: 48        - set_cursor_y_:pha                     // Save accu
e125: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e128: a9 04     -         lda #CMD_SET_CURSOR_Y
e12a: 8d 14 d0  -         sta DISCMD
e12d: ad 13 d0  -         lda DISCR
e130: 09 80     -         ora #$80
e132: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e135: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e138: 30 fb     -         bmi !wait-              // No! Let's wait
e13a: 68        -         pla                     // Restore input parameter in accu
e13b: 60        -         rts                     // Return
e13c: 48        - set_fg_color_:pha                     // Save accu
e13d: 8d 15 d0  -         sta DIS00              // Save the color to the 
e140: a9 07     -         lda #CMD_SET_FG_COLOR
e142: 8d 14 d0  -         sta DISCMD
e145: ad 13 d0  -         lda DISCR
e148: 09 80     -         ora #$80
e14a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e14d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e150: 30 fb     -         bmi !wait-              // No! Let's wait
e152: 68        -         pla                     // Restore input parameter in accu
e153: 60        -         rts                     // Return
e154: 48        - set_bg_color_:pha                     // Save accu
e155: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e158: a9 08     -         lda #CMD_SET_BG_COLOR
e15a: 8d 14 d0  -         sta DISCMD
e15d: ad 13 d0  -         lda DISCR
e160: 09 80     -         ora #$80
e162: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e165: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e168: 30 fb     -         bmi !wait-              // No! Let's wait
e16a: 68        -         pla                     // Restore input parameter in accu
e16b: 60        -         rts                     // Return
e16c: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e16e: 8d 14 d0  -         sta DISCMD
e171: ad 13 d0  -         lda DISCR
e174: 09 80     -         ora #$80
e176: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e179: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e17c: 30 fb     -         bmi !wait-              // No! Let's wait
e17e: ad 15 d0  -         lda DIS00
e181: 60        -         rts                     // Return
e182: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e184: 8d 14 d0  -         sta DISCMD
e187: ad 13 d0  -         lda DISCR
e18a: 09 80     -         ora #$80
e18c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e18f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e192: 30 fb     -         bmi !wait-              // No! Let's wait
e194: ad 15 d0  -         lda DIS00
e197: 60        -         rts                     // Return
e198: 48        - print_char_:pha                     // Save accu
e199: 8d 15 d0  -         sta DIS00              // Save the char to the 
e19c: a9 0d     -         lda #CMD_WRITE_CHAR
e19e: 8d 14 d0  -         sta DISCMD
e1a1: ad 13 d0  -         lda DISCR
e1a4: 09 80     -         ora #$80
e1a6: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1a9: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1ac: 30 fb     -         bmi !wait-              // No! Let's wait
e1ae: 68        -         pla                     // Restore input parameter in accu
e1af: 60        -         rts                     // Return
e1b0: 8c c4 e1  - print_text_:sty (!end+)+1       // Save y register
e1b3: 8d c6 e1  -         sta (!end+)+3
e1b6: a0 00     -         ldy #0              // Index for the char within the string
e1b8: b1 e0     -         lda (zpRegE0),y     // load character
e1ba: f0 07     -         beq !end+
e1bc: 20 98 e1  -         jsr print_char_
e1bf: c8        -         iny
e1c0: 4c b8 e1  -         jmp !next-
e1c3: a0 00     -         ldy #0
e1c5: a9 00     -         lda #0
e1c7: 60        -         rts
e1c8: 48        - print_hex_:pha
e1c9: a9 00     -         lda #<hex_chars
e1cb: 85 e0     -         sta zpRegE0
e1cd: a9 f0     -         lda #>hex_chars
e1cf: 85 e1     -         sta zpRegE1
e1d1: 68        -         pla
e1d2: 48        -         pha
e1d3: 4a        -         lsr
e1d4: 4a        -         lsr
e1d5: 4a        -         lsr
e1d6: 4a        -         lsr
e1d7: 29 0f     -         and #$0f
e1d9: a8        -         tay
e1da: b1 e0     -         lda (zpRegE0),y
e1dc: 20 98 e1  -         jsr print_char_
e1df: 68        -         pla
e1e0: 48        -         pha
e1e1: 29 0f     -         and #$0f
e1e3: a8        -         tay
e1e4: b1 e0     -         lda (zpRegE0),y
e1e6: 20 98 e1  -         jsr print_char_
e1e9: 68        -         pla
e1ea: 60        -         rts
e1eb: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e1ed: 8d 14 d0  -         sta DISCMD
e1f0: ad 13 d0  -         lda DISCR
e1f3: 09 80     -         ora #$80
e1f5: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1f8: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e1fb: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e1fd: 60        -         rts
e1fe: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e200: 8d 14 d0  -         sta DISCMD
e203: ad 13 d0  -         lda DISCR
e206: 09 80     -         ora #$80
e208: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e20b: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e20e: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e210: 60        -         rts
e211: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e213: 8d 14 d0  -         sta DISCMD
e216: ad 13 d0  -         lda DISCR
e219: 09 80     -         ora #$80
e21b: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e21e: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e221: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e223: 60        -         rts
e224: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e226: 8d 14 d0  -         sta DISCMD
e229: ad 13 d0  -         lda DISCR
e22c: 09 80     -         ora #$80
e22e: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e231: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e234: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e236: 60        -         rts
e237: a9 1e     - draw_sprites_:lda #CMD_DRAW_SPRITES
e239: 8d 14 d0  -         sta DISCMD
e23c: ad 13 d0  -         lda DISCR
e23f: 09 80     -         ora #$80
e241: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e244: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e247: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e249: 60        -         rts
e24a: a2 00     - init_sprites_:ldx #index
e24c: a9 7c     -         lda #<address
e24e: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e251: a9 e4     -         lda #>address
e253: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e256: a2 08     -         ldx #index
e258: a9 8c     -         lda #<address
e25a: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e25d: a9 e4     -         lda #>address
e25f: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e262: a2 10     -         ldx #index
e264: a9 9c     -         lda #<address
e266: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e269: a9 e4     -         lda #>address
e26b: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e26e: a2 01     -         ldx #index
e270: a9 7c     -         lda #<address
e272: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e275: a9 e4     -         lda #>address
e277: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e27a: a2 09     -         ldx #index
e27c: a9 8c     -         lda #<address
e27e: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e281: a9 e4     -         lda #>address
e283: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e286: a2 11     -         ldx #index
e288: a9 9c     -         lda #<address
e28a: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e28d: a9 e4     -         lda #>address
e28f: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e292: a2 02     -         ldx #index
e294: a9 7c     -         lda #<address
e296: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e299: a9 e4     -         lda #>address
e29b: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e29e: a2 0a     -         ldx #index
e2a0: a9 8c     -         lda #<address
e2a2: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e2a5: a9 e4     -         lda #>address
e2a7: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e2aa: a2 12     -         ldx #index
e2ac: a9 9c     -         lda #<address
e2ae: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e2b1: a9 e4     -         lda #>address
e2b3: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e2b6: a2 03     -         ldx #index
e2b8: a9 7c     -         lda #<address
e2ba: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e2bd: a9 e4     -         lda #>address
e2bf: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e2c2: a2 0b     -         ldx #index
e2c4: a9 8c     -         lda #<address
e2c6: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e2c9: a9 e4     -         lda #>address
e2cb: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e2ce: a2 13     -         ldx #index
e2d0: a9 9c     -         lda #<address
e2d2: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e2d5: a9 e4     -         lda #>address
e2d7: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e2da: a2 04     -         ldx #index
e2dc: a9 7c     -         lda #<address
e2de: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e2e1: a9 e4     -         lda #>address
e2e3: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e2e6: a2 0c     -         ldx #index
e2e8: a9 8c     -         lda #<address
e2ea: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e2ed: a9 e4     -         lda #>address
e2ef: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e2f2: a2 14     -         ldx #index
e2f4: a9 9c     -         lda #<address
e2f6: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e2f9: a9 e4     -         lda #>address
e2fb: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e2fe: a2 05     -         ldx #index
e300: a9 7c     -         lda #<address
e302: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e305: a9 e4     -         lda #>address
e307: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e30a: a2 0d     -         ldx #index
e30c: a9 8c     -         lda #<address
e30e: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e311: a9 e4     -         lda #>address
e313: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e316: a2 15     -         ldx #index
e318: a9 9c     -         lda #<address
e31a: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e31d: a9 e4     -         lda #>address
e31f: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e322: a2 06     -         ldx #index
e324: a9 7c     -         lda #<address
e326: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e329: a9 e4     -         lda #>address
e32b: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e32e: a2 0e     -         ldx #index
e330: a9 8c     -         lda #<address
e332: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e335: a9 e4     -         lda #>address
e337: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e33a: a2 16     -         ldx #index
e33c: a9 9c     -         lda #<address
e33e: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e341: a9 e4     -         lda #>address
e343: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e346: a2 07     -         ldx #index
e348: a9 7c     -         lda #<address
e34a: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e34d: a9 e4     -         lda #>address
e34f: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e352: a2 0f     -         ldx #index
e354: a9 8c     -         lda #<address
e356: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e359: a9 e4     -         lda #>address
e35b: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e35e: a2 17     -         ldx #index
e360: a9 9c     -         lda #<address
e362: 9d 6c e5  -         sta SPRITE_DATA_LO, x
e365: a9 e4     -         lda #>address
e367: 9d 8c e5  -         sta SPRITE_DATA_HI, x                
e36a: a2 00     -         ldx #index
e36c: bd ac e4  -         lda SPRITE_FLAGS, x
e36f: 05 c0     -         ora SPRITE_ENABLE_FLAG
e371: 9d ac e4  -         sta SPRITE_FLAGS, x
e374: a2 01     -         ldx #index
e376: bd ac e4  -         lda SPRITE_FLAGS, x
e379: 05 c0     -         ora SPRITE_ENABLE_FLAG
e37b: 9d ac e4  -         sta SPRITE_FLAGS, x
e37e: a2 02     -         ldx #index
e380: bd ac e4  -         lda SPRITE_FLAGS, x
e383: 05 c0     -         ora SPRITE_ENABLE_FLAG
e385: 9d ac e4  -         sta SPRITE_FLAGS, x
e388: a2 03     -         ldx #index
e38a: bd ac e4  -         lda SPRITE_FLAGS, x
e38d: 05 c0     -         ora SPRITE_ENABLE_FLAG
e38f: 9d ac e4  -         sta SPRITE_FLAGS, x
e392: a2 04     -         ldx #index
e394: bd ac e4  -         lda SPRITE_FLAGS, x
e397: 05 c0     -         ora SPRITE_ENABLE_FLAG
e399: 9d ac e4  -         sta SPRITE_FLAGS, x
e39c: a2 05     -         ldx #index
e39e: bd ac e4  -         lda SPRITE_FLAGS, x
e3a1: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3a3: 9d ac e4  -         sta SPRITE_FLAGS, x
e3a6: a2 06     -         ldx #index
e3a8: bd ac e4  -         lda SPRITE_FLAGS, x
e3ab: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3ad: 9d ac e4  -         sta SPRITE_FLAGS, x
e3b0: a2 07     -         ldx #index
e3b2: bd ac e4  -         lda SPRITE_FLAGS, x
e3b5: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3b7: 9d ac e4  -         sta SPRITE_FLAGS, x
e3ba: a2 08     -         ldx #index
e3bc: bd ac e4  -         lda SPRITE_FLAGS, x
e3bf: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3c1: 9d ac e4  -         sta SPRITE_FLAGS, x
e3c4: a2 09     -         ldx #index
e3c6: bd ac e4  -         lda SPRITE_FLAGS, x
e3c9: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3cb: 9d ac e4  -         sta SPRITE_FLAGS, x
e3ce: a2 0a     -         ldx #index
e3d0: bd ac e4  -         lda SPRITE_FLAGS, x
e3d3: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3d5: 9d ac e4  -         sta SPRITE_FLAGS, x
e3d8: a2 0b     -         ldx #index
e3da: bd ac e4  -         lda SPRITE_FLAGS, x
e3dd: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3df: 9d ac e4  -         sta SPRITE_FLAGS, x
e3e2: a2 0c     -         ldx #index
e3e4: bd ac e4  -         lda SPRITE_FLAGS, x
e3e7: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3e9: 9d ac e4  -         sta SPRITE_FLAGS, x
e3ec: a2 0d     -         ldx #index
e3ee: bd ac e4  -         lda SPRITE_FLAGS, x
e3f1: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3f3: 9d ac e4  -         sta SPRITE_FLAGS, x
e3f6: a2 0e     -         ldx #index
e3f8: bd ac e4  -         lda SPRITE_FLAGS, x
e3fb: 05 c0     -         ora SPRITE_ENABLE_FLAG
e3fd: 9d ac e4  -         sta SPRITE_FLAGS, x
e400: a2 0f     -         ldx #index
e402: bd ac e4  -         lda SPRITE_FLAGS, x
e405: 05 c0     -         ora SPRITE_ENABLE_FLAG
e407: 9d ac e4  -         sta SPRITE_FLAGS, x
e40a: a2 10     -         ldx #index
e40c: bd ac e4  -         lda SPRITE_FLAGS, x
e40f: 05 c0     -         ora SPRITE_ENABLE_FLAG
e411: 9d ac e4  -         sta SPRITE_FLAGS, x
e414: a2 11     -         ldx #index
e416: bd ac e4  -         lda SPRITE_FLAGS, x
e419: 05 c0     -         ora SPRITE_ENABLE_FLAG
e41b: 9d ac e4  -         sta SPRITE_FLAGS, x
e41e: a2 12     -         ldx #index
e420: bd ac e4  -         lda SPRITE_FLAGS, x
e423: 05 c0     -         ora SPRITE_ENABLE_FLAG
e425: 9d ac e4  -         sta SPRITE_FLAGS, x
e428: a2 13     -         ldx #index
e42a: bd ac e4  -         lda SPRITE_FLAGS, x
e42d: 05 c0     -         ora SPRITE_ENABLE_FLAG
e42f: 9d ac e4  -         sta SPRITE_FLAGS, x
e432: a2 14     -         ldx #index
e434: bd ac e4  -         lda SPRITE_FLAGS, x
e437: 05 c0     -         ora SPRITE_ENABLE_FLAG
e439: 9d ac e4  -         sta SPRITE_FLAGS, x
e43c: a2 15     -         ldx #index
e43e: bd ac e4  -         lda SPRITE_FLAGS, x
e441: 05 c0     -         ora SPRITE_ENABLE_FLAG
e443: 9d ac e4  -         sta SPRITE_FLAGS, x
e446: a2 16     -         ldx #index
e448: bd ac e4  -         lda SPRITE_FLAGS, x
e44b: 05 c0     -         ora SPRITE_ENABLE_FLAG
e44d: 9d ac e4  -         sta SPRITE_FLAGS, x
e450: a2 17     -         ldx #index
e452: bd ac e4  -         lda SPRITE_FLAGS, x
e455: 05 c0     -         ora SPRITE_ENABLE_FLAG
e457: 9d ac e4  -         sta SPRITE_FLAGS, x
e45a: a9 ac     -         lda #<SPRITE_DEFINITON_BLOCK
e45c: 8d 15 d0  -         sta DIS00
e45f: a9 e4     -         lda #>SPRITE_DEFINITON_BLOCK
e461: 8d 16 d0  -         sta DIS01
e464: a9 20     -         lda #32                 // Set number of sprites
e466: 8d 17 d0  -         sta DIS02
e469: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
e46b: 8d 14 d0  -         sta DISCMD              //                                          
e46e: ad 13 d0  -         lda DISCR               // Load Display command register
e471: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
e473: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e476: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e479: 30 fb     -         bmi !wait-              // No! Let's wait
e47b: 60        -         rts
e47c: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
e47e: 07 e0     -         .byte %00000111, %11100000
e480: 0f f0     -         .byte %00001111, %11110000
e482: 1d b8     -         .byte %00011101, %10111000
e484: 17 e8     -         .byte %00010111, %11101000
e486: 17 e8     -         .byte %00010111, %11101000
e488: 02 40     -         .byte %00000010, %01000000
e48a: 06 60     -         .byte %00000110, %01100000
e48c: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
e48e: 04 40     -         .byte %00000100, %01000000
e490: 03 80     -         .byte %00000011, %10000000
e492: 07 c0     -         .byte %00000111, %11000000
e494: 05 40     -         .byte %00000101, %01000000
e496: 07 c0     -         .byte %00000111, %11000000
e498: 0a a0     -         .byte %00001010, %10100000
e49a: 0a a0     -         .byte %00001010, %10100000
e49c: 00 00     - SPACE_ALIEN_C:.byte %00000000, %00000000
e49e: 04 40     -         .byte %00000100, %01000000
e4a0: 0f e0     -         .byte %00001111, %11100000
e4a2: 19 30     -         .byte %00011001, %00110000
e4a4: 1f f0     -         .byte %00011111, %11110000
e4a6: 1f f0     -         .byte %00011111, %11110000
e4a8: 15 50     -         .byte %00010101, %01010000
e4aa: 0a a0     -         .byte %00001010, %10100000
e4ac: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
e4b4: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
e4bc: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 16-23
e4c4: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e4cc: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
e4d4: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
e4dc: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 16-23
e4e4: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e4ec: 20 20 20 20 20 20 20 20                          - SPRITE_YPOS:.byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 00-07
e4f4: 30 30 30 30 30 30 30 30                          -         .byte $30, $30, $30, $30, $30, $30, $30, $30  // Sprite 08-15
e4fc: 40 40 40 40 40 40 40 40                          -         .byte $40, $40, $40, $40, $40, $40, $40, $40  // Sprite 16-23
e504: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e50c: 1f 1f 1f 1f 1f 1f 1f 1f                          - SPRITE_COLOR:.byte $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f  // Sprite 00-07
e514: 23 23 23 23 23 23 23 23                          -         .byte $23, $23, $23, $23, $23, $23, $23, $23  // Sprite 08-15
e51c: 2c 2c 2c 2c 2c 2c 2c 2c                          -         .byte $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2c  // Sprite 16-23
e524: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e52c: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
e534: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
e53c: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 16-23
e544: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e54c: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
e554: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
e55c: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 16-23
e564: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e56c: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
e57c: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e58c: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
e59c: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e5ac: 00 00 01 00 00 02 00 00 04 00 00 08              - BCD_LOOKUP_TABLE:.byte    $00, $00, $01, $00, $00, $02, $00, $00, $04, $00, $00, $08
e5b8: 00 00 16 00 00 32 00 00 64 00 01 28              -         .byte    $00, $00, $16, $00, $00, $32, $00, $00, $64, $00, $01, $28
e5c4: 00 02 56 00 05 12 00 10 24 00 20 48              -         .byte    $00, $02, $56, $00, $05, $12, $00, $10, $24, $00, $20, $48
e5d0: 00 40 96 00 81 92 01 63 84 03 27 68              -         .byte    $00, $40, $96, $00, $81, $92, $01, $63, $84, $03, $27, $68
e5dc: 00 00     - HTD_IN: .byte $00, $00
e5de: 00 00 00  - HTD_OUT:.byte $00, $00, $00 
e5e1: f8        - bcd_convert_word_:sed 
e5e2: a9 00     -         lda #0
e5e4: 8d de e5  -         sta HTD_OUT
e5e7: 8d df e5  -         sta HTD_OUT+1
e5ea: 8d e0 e5  -         sta HTD_OUT+2
e5ed: a2 2d     -         ldx #$2d
e5ef: 0e dc e5  -         asl HTD_IN 
e5f2: 2e dd e5  -         rol HTD_IN+1
e5f5: 90 1c     -         bcc htd1
e5f7: ad de e5  -         lda HTD_OUT
e5fa: 18        -         clc 
e5fb: 7d ae e5  -         adc BCD_LOOKUP_TABLE+2,x
e5fe: 8d de e5  -         sta HTD_OUT
e601: ad df e5  -         lda HTD_OUT+1
e604: 7d ad e5  -         adc BCD_LOOKUP_TABLE+1,x
e607: 8d df e5  -         sta HTD_OUT+1
e60a: ad e0 e5  -         lda HTD_OUT+2
e60d: 7d ac e5  -         adc BCD_LOOKUP_TABLE,x
e610: 8d e0 e5  -         sta HTD_OUT+2
e613: ca        - htd1:   dex
e614: ca        -         dex 
e615: ca        -         dex 
e616: 10 d7     -         bpl !loop- 
e618: d8        -         cld 
e619: 60        -         rts
e61a: 48        - byte_to_hex:pha                     // Save value to stack.
e61b: 29 0f     -         and #%00001111
e61d: 85 e0     -         sta zpRegE0             // store the lower nibble
e61f: 68        -         pla                     // Load the original value
e620: 48        -         pha                     // and save it again
e621: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e622: 4a        -         lsr
e623: 4a        -         lsr
e624: 4a        -         lsr
e625: 85 e1     -         sta zpRegE1             // store the higher nibble
e627: 68        -         pla                     // restore the accu
e628: 60        -         rts
e629: a5 e0     - convert565:lda zpRegE0             // red value
e62b: 0a        -         asl                     // shift three to the left as we
e62c: 0a        -         asl                     // need to move the lower 5 bits of red
e62d: 0a        -         asl                     // to the bits 7-5
e62e: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e630: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e632: 4a        -         lsr                     // lower bits of the output highbyte
e633: 4a        -         lsr
e634: 4a        -         lsr
e635: 29 07     -         and #%00000111          // Only the lower three bits.
e637: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e639: 85 e0     -         sta zpRegE0             // Store the final high byte
e63b: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e63d: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e63e: 0a        -         asl                     // it with zeros
e63f: 0a        -         asl
e640: 0a        -         asl
e641: 0a        -         asl
e642: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e644: a5 e2     -         lda zpRegE2             // Load blue
e646: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e648: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e64a: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e64c: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 57 65 6c 63 6f 6d 65 20 74 6f 20 46 69 72 73 74  - msg_01: .text "Welcome to FirstKlaas OS v0.1"
f020: 4b 6c 61 61 73 20 4f 53 20 76 30 2e 31          
