******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: ad 13 d0  -         lda DISCR   // Set the auto adjust 
0806: 09 0c     -         ora #$0C    // and wrap flag
0808: 8d 13 d0  -         sta DISCR                
080b: 20 29 e3  -         jsr debug_register_
080e: a9 00     -         lda #xpos
0810: 20 0c e1  -         jsr set_cursor_x_
0813: a9 00     -         lda #ypos
0815: 20 24 e1  -         jsr set_cursor_y_    
0818: a9 02     -         lda #color
081a: 20 3c e1  -         jsr set_fg_color_
081d: a9 48     -         lda #<border_top
081f: 85 e0     -         sta zpRegE0
0821: a9 08     -         lda #>border_top
0823: 85 e1     -         sta zpRegE1
0825: 20 b0 e1  -         jsr print_text_
0828: a9 b2     -         lda #color
082a: 20 3c e1  -         jsr set_fg_color_
082d: a9 02     -         lda #xpos
082f: 20 0c e1  -         jsr set_cursor_x_
0832: a9 01     -         lda #ypos
0834: 20 24 e1  -         jsr set_cursor_y_    
0837: a9 70     -         lda #<welcome
0839: 85 e0     -         sta zpRegE0
083b: a9 08     -         lda #>welcome
083d: 85 e1     -         sta zpRegE1
083f: 20 b0 e1  -         jsr print_text_
0842: 20 eb e1  -         jsr init_sprites_
0845: 4c 45 08  - end:    jmp end
0848: c8 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_top:.byte $c8,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
0858: cc cc cc cc                                     
085c: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$ba,$00
086c: cc cc ba 00                                     
0870: 57 65 6c 63 6f 6d 65 20 74 6f 20 74 68 65 20 70  - welcome:.text "Welcome to the pleasure Dome!"
0880: 6c 65 61 73 75 72 65 20 44 6f 6d 65 21          
088d: 00        -         .byte 0

[Kernel Routines Entry Points]
e000: 4c 00 e1  - get_key:jmp get_key_
e003: 4c 0c e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c 24 e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 98 e1  - print_char:jmp print_char_

[Kernel Routines]
e100: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e103: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e105: 29 70     -         and #KEY_MOD_MASK
e107: aa        -         tax                     // Save modifiers
e108: ad 10 d0  -         lda KBD                 // Current key code to accu
e10b: 60        -         rts                     // Return
e10c: 48        - set_cursor_x_:pha                     // Save accu
e10d: 8d 15 d0  -         sta DIS_00              // Save the xpos to the 
e110: a9 03     -         lda #CMD_SET_CURSOR_X
e112: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e115: ad 13 d0  -         lda DISCR
e118: 09 80     -         ora #$80
e11a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e11d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e120: 30 fb     -         bmi !wait-              // No! Let's wait
e122: 68        -         pla                     // Restore input parameter in accu
e123: 60        -         rts                     // Return
e124: 48        - set_cursor_y_:pha                     // Save accu
e125: 8d 15 d0  -         sta DIS_00              // Save the xpos to the 
e128: a9 04     -         lda #CMD_SET_CURSOR_Y
e12a: 8d 14 d0  -         sta DISCMD
e12d: ad 13 d0  -         lda DISCR
e130: 09 80     -         ora #$80
e132: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e135: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e138: 30 fb     -         bmi !wait-              // No! Let's wait
e13a: 68        -         pla                     // Restore input parameter in accu
e13b: 60        -         rts                     // Return
e13c: 48        - set_fg_color_:pha                     // Save accu
e13d: 8d 15 d0  -         sta DIS_00              // Save the color to the 
e140: a9 07     -         lda #CMD_SET_FG_COLOR
e142: 8d 14 d0  -         sta DISCMD
e145: ad 13 d0  -         lda DISCR
e148: 09 80     -         ora #$80
e14a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e14d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e150: 30 fb     -         bmi !wait-              // No! Let's wait
e152: 68        -         pla                     // Restore input parameter in accu
e153: 60        -         rts                     // Return
e154: 48        - set_bg_color_:pha                     // Save accu
e155: 8d 15 d0  -         sta DIS_00              // Save the xpos to the 
e158: a9 08     -         lda #CMD_SET_BG_COLOR
e15a: 8d 14 d0  -         sta DISCMD
e15d: ad 13 d0  -         lda DISCR
e160: 09 80     -         ora #$80
e162: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e165: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e168: 30 fb     -         bmi !wait-              // No! Let's wait
e16a: 68        -         pla                     // Restore input parameter in accu
e16b: 60        -         rts                     // Return
e16c: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e16e: 8d 14 d0  -         sta DISCMD
e171: ad 13 d0  -         lda DISCR
e174: 09 80     -         ora #$80
e176: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e179: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e17c: 30 fb     -         bmi !wait-              // No! Let's wait
e17e: ad 15 d0  -         lda DIS_00
e181: 60        -         rts                     // Return
e182: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e184: 8d 14 d0  -         sta DISCMD
e187: ad 13 d0  -         lda DISCR
e18a: 09 80     -         ora #$80
e18c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e18f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e192: 30 fb     -         bmi !wait-              // No! Let's wait
e194: ad 15 d0  -         lda DIS_00
e197: 60        -         rts                     // Return
e198: 48        - print_char_:pha                     // Save accu
e199: 8d 15 d0  -         sta DIS_00              // Save the char to the 
e19c: a9 0d     -         lda #CMD_WRITE_CHAR
e19e: 8d 14 d0  -         sta DISCMD
e1a1: ad 13 d0  -         lda DISCR
e1a4: 09 80     -         ora #$80
e1a6: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1a9: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1ac: 30 fb     -         bmi !wait-              // No! Let's wait
e1ae: 68        -         pla                     // Restore input parameter in accu
e1af: 60        -         rts                     // Return
e1b0: 8c c4 e1  - print_text_:sty (!end+)+1       // Save y register
e1b3: 8d c6 e1  -         sta (!end+)+3
e1b6: a0 00     -         ldy #0              // Index for the char within the string
e1b8: b1 e0     -         lda (zpRegE0),y     // load character
e1ba: f0 07     -         beq !end+
e1bc: 20 98 e1  -         jsr print_char_
e1bf: c8        -         iny
e1c0: 4c b8 e1  -         jmp !next-
e1c3: a0 00     -         ldy #0
e1c5: a9 00     -         lda #0
e1c7: 60        -         rts
e1c8: 48        - print_hex_:pha
e1c9: a9 00     -         lda #<hex_chars
e1cb: 85 e0     -         sta zpRegE0
e1cd: a9 f0     -         lda #>hex_chars
e1cf: 85 e1     -         sta zpRegE1
e1d1: 68        -         pla
e1d2: 48        -         pha
e1d3: 4a        -         lsr
e1d4: 4a        -         lsr
e1d5: 4a        -         lsr
e1d6: 4a        -         lsr
e1d7: 29 0f     -         and #$0f
e1d9: a8        -         tay
e1da: b1 e0     -         lda (zpRegE0),y
e1dc: 20 98 e1  -         jsr print_char_
e1df: 68        -         pla
e1e0: 48        -         pha
e1e1: 29 0f     -         and #$0f
e1e3: a8        -         tay
e1e4: b1 e0     -         lda (zpRegE0),y
e1e6: 20 98 e1  -         jsr print_char_
e1e9: 68        -         pla
e1ea: 60        -         rts
e1eb: a2 00     - init_sprites_:ldx #0
e1ed: a9 19     -         lda #<SPACE_ALIEN_A
e1ef: 9d e9 e2  -         sta SPRITE_DATA_LO, x
e1f2: a9 e2     -         lda #>SPACE_ALIEN_A
e1f4: 9d 09 e3  -         sta SPRITE_DATA_HI, x
e1f7: a9 29     -         lda #<SPRITE_DEFINITON_BLOCK
e1f9: 8d 15 d0  -         sta DIS_00
e1fc: a9 e2     -         lda #>SPRITE_DEFINITON_BLOCK
e1fe: 8d 16 d0  -         sta DIS_01
e201: a9 20     -         lda #32
e203: 8d 17 d0  -         sta DIS_02
e206: a9 17     -         lda #CMD_SET_SDB
e208: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e20b: ad 13 d0  -         lda DISCR
e20e: 09 80     -         ora #$80
e210: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e213: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e216: 30 fb     -         bmi !wait-              // No! Let's wait
e218: 60        -         rts
e219: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
e21b: 07 e0     -         .byte %00000111, %11100000
e21d: 0f f0     -         .byte %00001111, %11110000
e21f: 1d b8     -         .byte %00011101, %10111000
e221: 17 e8     -         .byte %00010111, %11101000
e223: 17 e8     -         .byte %00010111, %11101000
e225: 02 40     -         .byte %00000010, %01000000
e227: 06 60     -         .byte %00000110, %01100000
e229: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.fill 32, 0
e239: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e249: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_XPOS:.fill 32, 0
e259: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e269: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_YPOS:.fill 32, 0
e279: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e289: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_COLOR:.fill 32, 0
e299: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e2a9: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_WIDTH:.byte 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
e2b9: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e2c9: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_HEIGHT:.byte  8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
e2d9: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e2e9: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
e2f9: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e309: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
e319: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e329: a9 28     - debug_register_:lda #xpos
e32b: 20 0c e1  -         jsr set_cursor_x_
e32e: a9 01     -         lda #ypos
e330: 20 24 e1  -         jsr set_cursor_y_    
e333: a9 98     -         lda #color
e335: 20 3c e1  -         jsr set_fg_color_
e338: a9 c6     -         lda #<debug_txt_01
e33a: 85 e0     -         sta zpRegE0
e33c: a9 e3     -         lda #>debug_txt_01
e33e: 85 e1     -         sta zpRegE1
e340: 20 b0 e1  -         jsr print_text_
e343: a9 0b     -         lda #color
e345: 20 3c e1  -         jsr set_fg_color_
e348: a9 2e     -         lda #xpos
e34a: 20 0c e1  -         jsr set_cursor_x_
e34d: a9 01     -         lda #ypos
e34f: 20 24 e1  -         jsr set_cursor_y_    
e352: ad 14 d0  -         lda addr
e355: 20 c8 e1  -         jsr print_hex_
e358: a9 20     -         lda #char
e35a: 20 98 e1  -         jsr print_char_
e35d: ad 13 d0  -         lda addr
e360: 20 c8 e1  -         jsr print_hex_
e363: a9 28     -         lda #xpos
e365: 20 0c e1  -         jsr set_cursor_x_
e368: a9 02     -         lda #ypos
e36a: 20 24 e1  -         jsr set_cursor_y_    
e36d: ad 15 d0  -         lda addr
e370: 20 c8 e1  -         jsr print_hex_
e373: a9 20     -         lda #char
e375: 20 98 e1  -         jsr print_char_
e378: ad 16 d0  -         lda addr
e37b: 20 c8 e1  -         jsr print_hex_
e37e: a9 20     -         lda #char
e380: 20 98 e1  -         jsr print_char_
e383: ad 17 d0  -         lda addr
e386: 20 c8 e1  -         jsr print_hex_
e389: a9 20     -         lda #char
e38b: 20 98 e1  -         jsr print_char_
e38e: ad 18 d0  -         lda addr
e391: 20 c8 e1  -         jsr print_hex_
e394: a9 28     -         lda #xpos
e396: 20 0c e1  -         jsr set_cursor_x_
e399: a9 03     -         lda #ypos
e39b: 20 24 e1  -         jsr set_cursor_y_    
e39e: ad 19 d0  -         lda addr
e3a1: 20 c8 e1  -         jsr print_hex_
e3a4: a9 20     -         lda #char
e3a6: 20 98 e1  -         jsr print_char_
e3a9: ad 1a d0  -         lda addr
e3ac: 20 c8 e1  -         jsr print_hex_
e3af: a9 20     -         lda #char
e3b1: 20 98 e1  -         jsr print_char_
e3b4: ad 1b d0  -         lda addr
e3b7: 20 c8 e1  -         jsr print_hex_
e3ba: a9 20     -         lda #char
e3bc: 20 98 e1  -         jsr print_char_
e3bf: ad 1c d0  -         lda addr
e3c2: 20 c8 e1  -         jsr print_hex_
e3c5: 60        -         rts
e3c6: 44 49 53 50 4c                                   - debug_txt_01:.text "DISPL"
e3cb: 00        -         .byte 0
e3cc: 48        - byte_to_hex:pha                     // Save value to stack.
e3cd: 29 0f     -         and #%00001111
e3cf: 85 e0     -         sta zpRegE0             // store the lower nibble
e3d1: 68        -         pla                     // Load the original value
e3d2: 48        -         pha                     // and save it again
e3d3: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e3d4: 4a        -         lsr
e3d5: 4a        -         lsr
e3d6: 4a        -         lsr
e3d7: 85 e1     -         sta zpRegE1             // store the higher nibble
e3d9: 68        -         pla                     // restore the accu
e3da: 60        -         rts
e3db: a5 e0     - convert565:lda zpRegE0             // red value
e3dd: 0a        -         asl                     // shift three to the left as we
e3de: 0a        -         asl                     // need to move the lower 5 bits of red
e3df: 0a        -         asl                     // to the bits 7-5
e3e0: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e3e2: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e3e4: 4a        -         lsr                     // lower bits of the output highbyte
e3e5: 4a        -         lsr
e3e6: 4a        -         lsr
e3e7: 29 07     -         and #%00000111          // Only the lower three bits.
e3e9: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e3eb: 85 e0     -         sta zpRegE0             // Store the final high byte
e3ed: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e3ef: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e3f0: 0a        -         asl                     // it with zeros
e3f1: 0a        -         asl
e3f2: 0a        -         asl
e3f3: 0a        -         asl
e3f4: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e3f6: a5 e2     -         lda zpRegE2             // Load blue
e3f8: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e3fa: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e3fc: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e3fe: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 57 65 6c 63 6f 6d 65 20 74 6f 20 46 69 72 73 74  - msg_01: .text "Welcome to FirstKlaas OS v0.1"
f020: 4b 6c 61 61 73 20 4f 53 20 76 30 2e 31          
