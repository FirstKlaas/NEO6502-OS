******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: a9 00     -         lda #<main_isr
0805: 8d fe ff  -         sta $fffe 
0808: a9 0a     -         lda #>main_isr
080a: 8d ff ff  -         sta $ffff
080d: a9 00     -         lda #<main_isr
080f: 8d fa ff  -         sta $fffa 
0812: a9 0a     -         lda #>main_isr
0814: 8d fb ff  -         sta $fffb
0817: ad 13 d0  -         lda DISCR   // Set the auto adjust 
081a: 09 0c     -         ora #$0C    // and wrap flag
081c: 8d 13 d0  -         sta DISCR                
081f: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0821: 8d 0d dc  -         sta $dc0d
0824: a9 00     -         lda #xpos
0826: 20 0c e1  -         jsr set_cursor_x_
0829: a9 00     -         lda #ypos
082b: 20 24 e1  -         jsr set_cursor_y_    
082e: a9 20     -         lda #color
0830: 20 3c e1  -         jsr set_fg_color_
0833: a9 a7     -         lda #<addr
0835: 85 e0     -         sta zpRegE0
0837: a9 08     -         lda #>addr
0839: 85 e1     -         sta zpRegE1
083b: 20 b0 e1  -         jsr print_text_
083e: a9 00     -         lda #xpos
0840: 20 0c e1  -         jsr set_cursor_x_
0843: a9 02     -         lda #ypos
0845: 20 24 e1  -         jsr set_cursor_y_    
0848: a9 20     -         lda #color
084a: 20 3c e1  -         jsr set_fg_color_
084d: a9 cf     -         lda #<addr
084f: 85 e0     -         sta zpRegE0
0851: a9 08     -         lda #>addr
0853: 85 e1     -         sta zpRegE1
0855: 20 b0 e1  -         jsr print_text_
0858: a9 01     -         lda #xpos
085a: 20 0c e1  -         jsr set_cursor_x_
085d: a9 01     -         lda #ypos
085f: 20 24 e1  -         jsr set_cursor_y_    
0862: a9 20     -         lda #color
0864: 20 3c e1  -         jsr set_fg_color_
0867: a9 f7     -         lda #<addr
0869: 85 e0     -         sta zpRegE0
086b: a9 08     -         lda #>addr
086d: 85 e1     -         sta zpRegE1
086f: 20 b0 e1  -         jsr print_text_
0872: a9 20     -         lda #color
0874: 20 3c e1  -         jsr set_fg_color_
0877: a9 02     -         lda #xpos
0879: 20 0c e1  -         jsr set_cursor_x_
087c: a9 01     -         lda #ypos
087e: 20 24 e1  -         jsr set_cursor_y_    
0881: a9 1d     -         lda #<addr
0883: 85 e0     -         sta zpRegE0
0885: a9 09     -         lda #>addr
0887: 85 e1     -         sta zpRegE1
0889: 20 b0 e1  -         jsr print_text_
088c: 20 eb e1  -         jsr init_sprites_
088f: 4c 8f 08  -         jmp !end-
0892: a9 f0     - setup_timer:lda #$f0
0894: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
0897: a9 00     -         lda #$00
0899: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
089c: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
089e: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
08a1: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
08a3: 8d 0e dc  -         sta $dc0e       // Load values and start timer
08a6: 60        -         rts
08a7: c8 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_top:.byte $c8,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
08b7: cc cc cc cc                                     
08bb: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$ba,$00
08cb: cc cc ba 00                                     
08cf: c7 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  - border_bottom:.byte $c7,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc
08df: cc cc cc cc                                     
08e3: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  -         .byte $cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$cc,$bb,$00
08f3: cc cc bb 00                                     
08f7: da da da da da da da da da da da da da da da da  - text_bar:.fill 37,$da 
0907: da da da da da da da da da da da da da da da da 
0917: da da da da da                                  
091c: 00        -         .byte 0
091d: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 4b 65 72  - welcome:.text "NE/OS v0.1 - Kernel Size 974 bytes"
092d: 6e 65 6c 20 53 69 7a 65 20 39 37 34 20 62 79 74 
093d: 65 73                                           
093f: 00        -         .byte 0

[ISR]
0a00: 48        - main_isr:pha
0a01: 8a        -         txa 
0a02: 48        -         pha 
0a03: 98        -         tya 
0a04: 48        -         pha
0a05: a0 07     -         ldy #7              // Y is the sprite index. We have 8 sprites in a row 
0a07: b9 ed e3  -         lda SPRITE_XPOS,y   // Load current x position of the sprite   
0a0a: 18        -         clc
0a0b: 69 01     - operation:adc #1              // Add the speed
0a0d: c9 0a     - check_left:cmp #10             // 10 is the minimum value for the left side
0a0f: 10 0a     -         bpl check_right     // There is still room
0a11: 48        -         pha 
0a12: a9 69     -         lda #$69            // ADC command
0a14: 8d 0b 0a  -         sta operation
0a17: 68        -         pla 
0a18: 4c 26 0a  -         jmp keep_op
0a1b: c9 7d     - check_right:cmp #125
0a1d: 30 07     -         bmi keep_op
0a1f: 48        -         pha 
0a20: a9 e9     -         lda #$e9            // SBC command
0a22: 8d 0b 0a  -         sta operation
0a25: 68        -         pla 
0a26: 99 ed e3  - keep_op:sta SPRITE_XPOS,y   // save the new xpos 
0a29: 99 f5 e3  -         sta SPRITE_XPOS+8,y // Also for the second row
0a2c: 88        -         dey
0a2d: 10 d8     -         bpl !move_right-
0a2f: ad 0d dc  -         lda $dc0d           // Acknowledge the IRQ            
0a32: 68        -         pla
0a33: a8        -         tay 
0a34: 68        -         pla 
0a35: aa        -         tax 
0a36: 68        -         pla
0a37: 40        -         rti

[Kernel Routines Entry Points]
e000: 4c 00 e1  - get_key:jmp get_key_
e003: 4c 0c e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c 24 e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 98 e1  - print_char:jmp print_char_

[Kernel Routines]
e100: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e103: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e105: 29 70     -         and #KEY_MOD_MASK
e107: aa        -         tax                     // Save modifiers
e108: ad 10 d0  -         lda KBD                 // Current key code to accu
e10b: 60        -         rts                     // Return
e10c: 48        - set_cursor_x_:pha                     // Save accu
e10d: 8d 15 d0  -         sta DIS_00              // Save the xpos to the 
e110: a9 03     -         lda #CMD_SET_CURSOR_X
e112: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e115: ad 13 d0  -         lda DISCR
e118: 09 80     -         ora #$80
e11a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e11d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e120: 30 fb     -         bmi !wait-              // No! Let's wait
e122: 68        -         pla                     // Restore input parameter in accu
e123: 60        -         rts                     // Return
e124: 48        - set_cursor_y_:pha                     // Save accu
e125: 8d 15 d0  -         sta DIS_00              // Save the xpos to the 
e128: a9 04     -         lda #CMD_SET_CURSOR_Y
e12a: 8d 14 d0  -         sta DISCMD
e12d: ad 13 d0  -         lda DISCR
e130: 09 80     -         ora #$80
e132: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e135: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e138: 30 fb     -         bmi !wait-              // No! Let's wait
e13a: 68        -         pla                     // Restore input parameter in accu
e13b: 60        -         rts                     // Return
e13c: 48        - set_fg_color_:pha                     // Save accu
e13d: 8d 15 d0  -         sta DIS_00              // Save the color to the 
e140: a9 07     -         lda #CMD_SET_FG_COLOR
e142: 8d 14 d0  -         sta DISCMD
e145: ad 13 d0  -         lda DISCR
e148: 09 80     -         ora #$80
e14a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e14d: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e150: 30 fb     -         bmi !wait-              // No! Let's wait
e152: 68        -         pla                     // Restore input parameter in accu
e153: 60        -         rts                     // Return
e154: 48        - set_bg_color_:pha                     // Save accu
e155: 8d 15 d0  -         sta DIS_00              // Save the xpos to the 
e158: a9 08     -         lda #CMD_SET_BG_COLOR
e15a: 8d 14 d0  -         sta DISCMD
e15d: ad 13 d0  -         lda DISCR
e160: 09 80     -         ora #$80
e162: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e165: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e168: 30 fb     -         bmi !wait-              // No! Let's wait
e16a: 68        -         pla                     // Restore input parameter in accu
e16b: 60        -         rts                     // Return
e16c: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e16e: 8d 14 d0  -         sta DISCMD
e171: ad 13 d0  -         lda DISCR
e174: 09 80     -         ora #$80
e176: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e179: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e17c: 30 fb     -         bmi !wait-              // No! Let's wait
e17e: ad 15 d0  -         lda DIS_00
e181: 60        -         rts                     // Return
e182: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e184: 8d 14 d0  -         sta DISCMD
e187: ad 13 d0  -         lda DISCR
e18a: 09 80     -         ora #$80
e18c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e18f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e192: 30 fb     -         bmi !wait-              // No! Let's wait
e194: ad 15 d0  -         lda DIS_00
e197: 60        -         rts                     // Return
e198: 48        - print_char_:pha                     // Save accu
e199: 8d 15 d0  -         sta DIS_00              // Save the char to the 
e19c: a9 0d     -         lda #CMD_WRITE_CHAR
e19e: 8d 14 d0  -         sta DISCMD
e1a1: ad 13 d0  -         lda DISCR
e1a4: 09 80     -         ora #$80
e1a6: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1a9: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1ac: 30 fb     -         bmi !wait-              // No! Let's wait
e1ae: 68        -         pla                     // Restore input parameter in accu
e1af: 60        -         rts                     // Return
e1b0: 8c c4 e1  - print_text_:sty (!end+)+1       // Save y register
e1b3: 8d c6 e1  -         sta (!end+)+3
e1b6: a0 00     -         ldy #0              // Index for the char within the string
e1b8: b1 e0     -         lda (zpRegE0),y     // load character
e1ba: f0 07     -         beq !end+
e1bc: 20 98 e1  -         jsr print_char_
e1bf: c8        -         iny
e1c0: 4c b8 e1  -         jmp !next-
e1c3: a0 00     -         ldy #0
e1c5: a9 00     -         lda #0
e1c7: 60        -         rts
e1c8: 48        - print_hex_:pha
e1c9: a9 00     -         lda #<hex_chars
e1cb: 85 e0     -         sta zpRegE0
e1cd: a9 f0     -         lda #>hex_chars
e1cf: 85 e1     -         sta zpRegE1
e1d1: 68        -         pla
e1d2: 48        -         pha
e1d3: 4a        -         lsr
e1d4: 4a        -         lsr
e1d5: 4a        -         lsr
e1d6: 4a        -         lsr
e1d7: 29 0f     -         and #$0f
e1d9: a8        -         tay
e1da: b1 e0     -         lda (zpRegE0),y
e1dc: 20 98 e1  -         jsr print_char_
e1df: 68        -         pla
e1e0: 48        -         pha
e1e1: 29 0f     -         and #$0f
e1e3: a8        -         tay
e1e4: b1 e0     -         lda (zpRegE0),y
e1e6: 20 98 e1  -         jsr print_char_
e1e9: 68        -         pla
e1ea: 60        -         rts
e1eb: a2 00     - init_sprites_:ldx #index
e1ed: a9 6d     -         lda #<address
e1ef: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e1f2: a9 e3     -         lda #>address
e1f4: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e1f7: a2 08     -         ldx #index
e1f9: a9 bd     -         lda #<address
e1fb: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e1fe: a9 e3     -         lda #>address
e200: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e203: a2 01     -         ldx #index
e205: a9 6d     -         lda #<address
e207: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e20a: a9 e3     -         lda #>address
e20c: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e20f: a2 09     -         ldx #index
e211: a9 bd     -         lda #<address
e213: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e216: a9 e3     -         lda #>address
e218: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e21b: a2 02     -         ldx #index
e21d: a9 6d     -         lda #<address
e21f: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e222: a9 e3     -         lda #>address
e224: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e227: a2 0a     -         ldx #index
e229: a9 bd     -         lda #<address
e22b: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e22e: a9 e3     -         lda #>address
e230: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e233: a2 03     -         ldx #index
e235: a9 6d     -         lda #<address
e237: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e23a: a9 e3     -         lda #>address
e23c: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e23f: a2 0b     -         ldx #index
e241: a9 bd     -         lda #<address
e243: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e246: a9 e3     -         lda #>address
e248: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e24b: a2 04     -         ldx #index
e24d: a9 6d     -         lda #<address
e24f: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e252: a9 e3     -         lda #>address
e254: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e257: a2 0c     -         ldx #index
e259: a9 bd     -         lda #<address
e25b: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e25e: a9 e3     -         lda #>address
e260: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e263: a2 05     -         ldx #index
e265: a9 6d     -         lda #<address
e267: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e26a: a9 e3     -         lda #>address
e26c: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e26f: a2 0d     -         ldx #index
e271: a9 bd     -         lda #<address
e273: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e276: a9 e3     -         lda #>address
e278: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e27b: a2 06     -         ldx #index
e27d: a9 6d     -         lda #<address
e27f: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e282: a9 e3     -         lda #>address
e284: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e287: a2 0e     -         ldx #index
e289: a9 bd     -         lda #<address
e28b: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e28e: a9 e3     -         lda #>address
e290: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e293: a2 07     -         ldx #index
e295: a9 6d     -         lda #<address
e297: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e29a: a9 e3     -         lda #>address
e29c: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e29f: a2 0f     -         ldx #index
e2a1: a9 bd     -         lda #<address
e2a3: 9d 8d e4  -         sta SPRITE_DATA_LO, x
e2a6: a9 e3     -         lda #>address
e2a8: 9d ad e4  -         sta SPRITE_DATA_HI, x                
e2ab: a2 00     -         ldx #index
e2ad: bd cd e3  -         lda SPRITE_FLAGS, x
e2b0: 05 c0     -         ora SPRITE_ENABLE_FLAG
e2b2: 9d cd e3  -         sta SPRITE_FLAGS, x
e2b5: a2 01     -         ldx #index
e2b7: bd cd e3  -         lda SPRITE_FLAGS, x
e2ba: 05 c0     -         ora SPRITE_ENABLE_FLAG
e2bc: 9d cd e3  -         sta SPRITE_FLAGS, x
e2bf: a2 02     -         ldx #index
e2c1: bd cd e3  -         lda SPRITE_FLAGS, x
e2c4: 05 c0     -         ora SPRITE_ENABLE_FLAG
e2c6: 9d cd e3  -         sta SPRITE_FLAGS, x
e2c9: a2 03     -         ldx #index
e2cb: bd cd e3  -         lda SPRITE_FLAGS, x
e2ce: 05 c0     -         ora SPRITE_ENABLE_FLAG
e2d0: 9d cd e3  -         sta SPRITE_FLAGS, x
e2d3: a2 04     -         ldx #index
e2d5: bd cd e3  -         lda SPRITE_FLAGS, x
e2d8: 05 c0     -         ora SPRITE_ENABLE_FLAG
e2da: 9d cd e3  -         sta SPRITE_FLAGS, x
e2dd: a2 05     -         ldx #index
e2df: bd cd e3  -         lda SPRITE_FLAGS, x
e2e2: 05 c0     -         ora SPRITE_ENABLE_FLAG
e2e4: 9d cd e3  -         sta SPRITE_FLAGS, x
e2e7: a2 06     -         ldx #index
e2e9: bd cd e3  -         lda SPRITE_FLAGS, x
e2ec: 05 c0     -         ora SPRITE_ENABLE_FLAG
e2ee: 9d cd e3  -         sta SPRITE_FLAGS, x
e2f1: a2 07     -         ldx #index
e2f3: bd cd e3  -         lda SPRITE_FLAGS, x
e2f6: 05 c0     -         ora SPRITE_ENABLE_FLAG
e2f8: 9d cd e3  -         sta SPRITE_FLAGS, x
e2fb: a2 08     -         ldx #index
e2fd: bd cd e3  -         lda SPRITE_FLAGS, x
e300: 05 c0     -         ora SPRITE_ENABLE_FLAG
e302: 9d cd e3  -         sta SPRITE_FLAGS, x
e305: a2 09     -         ldx #index
e307: bd cd e3  -         lda SPRITE_FLAGS, x
e30a: 05 c0     -         ora SPRITE_ENABLE_FLAG
e30c: 9d cd e3  -         sta SPRITE_FLAGS, x
e30f: a2 0a     -         ldx #index
e311: bd cd e3  -         lda SPRITE_FLAGS, x
e314: 05 c0     -         ora SPRITE_ENABLE_FLAG
e316: 9d cd e3  -         sta SPRITE_FLAGS, x
e319: a2 0b     -         ldx #index
e31b: bd cd e3  -         lda SPRITE_FLAGS, x
e31e: 05 c0     -         ora SPRITE_ENABLE_FLAG
e320: 9d cd e3  -         sta SPRITE_FLAGS, x
e323: a2 0c     -         ldx #index
e325: bd cd e3  -         lda SPRITE_FLAGS, x
e328: 05 c0     -         ora SPRITE_ENABLE_FLAG
e32a: 9d cd e3  -         sta SPRITE_FLAGS, x
e32d: a2 0d     -         ldx #index
e32f: bd cd e3  -         lda SPRITE_FLAGS, x
e332: 05 c0     -         ora SPRITE_ENABLE_FLAG
e334: 9d cd e3  -         sta SPRITE_FLAGS, x
e337: a2 0e     -         ldx #index
e339: bd cd e3  -         lda SPRITE_FLAGS, x
e33c: 05 c0     -         ora SPRITE_ENABLE_FLAG
e33e: 9d cd e3  -         sta SPRITE_FLAGS, x
e341: a2 0f     -         ldx #index
e343: bd cd e3  -         lda SPRITE_FLAGS, x
e346: 05 c0     -         ora SPRITE_ENABLE_FLAG
e348: 9d cd e3  -         sta SPRITE_FLAGS, x
e34b: a9 cd     -         lda #<SPRITE_DEFINITON_BLOCK
e34d: 8d 15 d0  -         sta DIS_00
e350: a9 e3     -         lda #>SPRITE_DEFINITON_BLOCK
e352: 8d 16 d0  -         sta DIS_01
e355: a9 20     -         lda #32                 // Set number of sprites
e357: 8d 17 d0  -         sta DIS_02
e35a: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
e35c: 8d 14 d0  -         sta DISCMD              //                                          
e35f: ad 13 d0  -         lda DISCR               // Load Display command register
e362: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
e364: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e367: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e36a: 30 fb     -         bmi !wait-              // No! Let's wait
e36c: 60        -         rts
e36d: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
e36f: 07 e0     -         .byte %00000111, %11100000
e371: 0f f0     -         .byte %00001111, %11110000
e373: 1d b8     -         .byte %00011101, %10111000
e375: 17 e8     -         .byte %00010111, %11101000
e377: 17 e8     -         .byte %00010111, %11101000
e379: 02 40     -         .byte %00000010, %01000000
e37b: 06 60     -         .byte %00000110, %01100000
e37d: 00 0c 30 00                                      - SPACE_ALIEN_A2:.byte %00000000, %00001100, %00110000, %00000000
e381: 00 0c 30 00                                      -         .byte %00000000, %00001100, %00110000, %00000000
e385: 00 3f fc 00                                      -         .byte %00000000, %00111111, %11111100, %00000000
e389: 00 3f fc 00                                      -         .byte %00000000, %00111111, %11111100, %00000000
e38d: 00 ff ff 00                                      -         .byte %00000000, %11111111, %11111111, %00000000
e391: 00 ff ff 00                                      -         .byte %00000000, %11111111, %11111111, %00000000
e395: 03 f3 cf c0                                      -         .byte %00000011, %11110011, %11001111, %11000000
e399: 03 f3 cf c0                                      -         .byte %00000011, %11110011, %11001111, %11000000
e39d: 03 3f fc c0                                      -         .byte %00000011, %00111111, %11111100, %11000000
e3a1: 03 3f fc c0                                      -         .byte %00000011, %00111111, %11111100, %11000000
e3a5: 03 3f fc c0                                      -         .byte %00000011, %00111111, %11111100, %11000000
e3a9: 03 3f fc c0                                      -         .byte %00000011, %00111111, %11111100, %11000000
e3ad: 00 0c 30 00                                      -         .byte %00000000, %00001100, %00110000, %00000000
e3b1: 00 0c 30 00                                      -         .byte %00000000, %00001100, %00110000, %00000000
e3b5: 00 3c 3c 00                                      -         .byte %00000000, %00111100, %00111100, %00000000
e3b9: 00 3c 3c 00                                      -         .byte %00000000, %00111100, %00111100, %00000000
e3bd: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
e3bf: 04 40     -         .byte %00000100, %01000000
e3c1: 03 80     -         .byte %00000011, %10000000
e3c3: 07 c0     -         .byte %00000111, %11000000
e3c5: 05 40     -         .byte %00000101, %01000000
e3c7: 07 c0     -         .byte %00000111, %11000000
e3c9: 0a a0     -         .byte %00001010, %10100000
e3cb: 0a a0     -         .byte %00001010, %10100000
e3cd: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
e3d5: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
e3dd: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e3e5: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e3ed: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
e3f5: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
e3fd: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e405: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e40d: 10 10 10 10 10 10 10 10                          - SPRITE_YPOS:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
e415: 20 20 20 20 20 20 20 20                          -         .byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 08-15
e41d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e425: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e42d: 1f 23 2c 31 3d 21 39 1f                          - SPRITE_COLOR:.byte $1f, $23, $2c, $31, $3d, $21, $39, $1f  // Sprite 00-07
e435: 2c 3d 31 39 23 21 2c 31                          -         .byte $2c, $3d, $31, $39, $23, $21, $2c, $31  // Sprite 08-15
e43d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e445: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e44d: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
e455: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
e45d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e465: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e46d: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
e475: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
e47d: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 16-23
e485: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
e48d: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
e49d: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e4ad: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
e4bd: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
e4cd: a9 28     - debug_register_:lda #xpos
e4cf: 20 0c e1  -         jsr set_cursor_x_
e4d2: a9 01     -         lda #ypos
e4d4: 20 24 e1  -         jsr set_cursor_y_    
e4d7: a9 98     -         lda #color
e4d9: 20 3c e1  -         jsr set_fg_color_
e4dc: a9 6a     -         lda #<debug_txt_01
e4de: 85 e0     -         sta zpRegE0
e4e0: a9 e5     -         lda #>debug_txt_01
e4e2: 85 e1     -         sta zpRegE1
e4e4: 20 b0 e1  -         jsr print_text_
e4e7: a9 0b     -         lda #color
e4e9: 20 3c e1  -         jsr set_fg_color_
e4ec: a9 2e     -         lda #xpos
e4ee: 20 0c e1  -         jsr set_cursor_x_
e4f1: a9 01     -         lda #ypos
e4f3: 20 24 e1  -         jsr set_cursor_y_    
e4f6: ad 14 d0  -         lda addr
e4f9: 20 c8 e1  -         jsr print_hex_
e4fc: a9 20     -         lda #char
e4fe: 20 98 e1  -         jsr print_char_
e501: ad 13 d0  -         lda addr
e504: 20 c8 e1  -         jsr print_hex_
e507: a9 28     -         lda #xpos
e509: 20 0c e1  -         jsr set_cursor_x_
e50c: a9 02     -         lda #ypos
e50e: 20 24 e1  -         jsr set_cursor_y_    
e511: ad 15 d0  -         lda addr
e514: 20 c8 e1  -         jsr print_hex_
e517: a9 20     -         lda #char
e519: 20 98 e1  -         jsr print_char_
e51c: ad 16 d0  -         lda addr
e51f: 20 c8 e1  -         jsr print_hex_
e522: a9 20     -         lda #char
e524: 20 98 e1  -         jsr print_char_
e527: ad 17 d0  -         lda addr
e52a: 20 c8 e1  -         jsr print_hex_
e52d: a9 20     -         lda #char
e52f: 20 98 e1  -         jsr print_char_
e532: ad 18 d0  -         lda addr
e535: 20 c8 e1  -         jsr print_hex_
e538: a9 28     -         lda #xpos
e53a: 20 0c e1  -         jsr set_cursor_x_
e53d: a9 03     -         lda #ypos
e53f: 20 24 e1  -         jsr set_cursor_y_    
e542: ad 19 d0  -         lda addr
e545: 20 c8 e1  -         jsr print_hex_
e548: a9 20     -         lda #char
e54a: 20 98 e1  -         jsr print_char_
e54d: ad 1a d0  -         lda addr
e550: 20 c8 e1  -         jsr print_hex_
e553: a9 20     -         lda #char
e555: 20 98 e1  -         jsr print_char_
e558: ad 1b d0  -         lda addr
e55b: 20 c8 e1  -         jsr print_hex_
e55e: a9 20     -         lda #char
e560: 20 98 e1  -         jsr print_char_
e563: ad 1c d0  -         lda addr
e566: 20 c8 e1  -         jsr print_hex_
e569: 60        -         rts
e56a: 44 49 53 50 4c                                   - debug_txt_01:.text "DISPL"
e56f: 00        -         .byte 0
e570: 48        - byte_to_hex:pha                     // Save value to stack.
e571: 29 0f     -         and #%00001111
e573: 85 e0     -         sta zpRegE0             // store the lower nibble
e575: 68        -         pla                     // Load the original value
e576: 48        -         pha                     // and save it again
e577: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e578: 4a        -         lsr
e579: 4a        -         lsr
e57a: 4a        -         lsr
e57b: 85 e1     -         sta zpRegE1             // store the higher nibble
e57d: 68        -         pla                     // restore the accu
e57e: 60        -         rts
e57f: a5 e0     - convert565:lda zpRegE0             // red value
e581: 0a        -         asl                     // shift three to the left as we
e582: 0a        -         asl                     // need to move the lower 5 bits of red
e583: 0a        -         asl                     // to the bits 7-5
e584: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e586: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e588: 4a        -         lsr                     // lower bits of the output highbyte
e589: 4a        -         lsr
e58a: 4a        -         lsr
e58b: 29 07     -         and #%00000111          // Only the lower three bits.
e58d: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e58f: 85 e0     -         sta zpRegE0             // Store the final high byte
e591: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e593: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e594: 0a        -         asl                     // it with zeros
e595: 0a        -         asl
e596: 0a        -         asl
e597: 0a        -         asl
e598: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e59a: a5 e2     -         lda zpRegE2             // Load blue
e59c: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e59e: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e5a0: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e5a2: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 57 65 6c 63 6f 6d 65 20 74 6f 20 46 69 72 73 74  - msg_01: .text "Welcome to FirstKlaas OS v0.1"
f020: 4b 6c 61 61 73 20 4f 53 20 76 30 2e 31          
