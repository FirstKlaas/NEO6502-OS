******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: a9 7f     -         lda #CIA_IRQ_MASK
0805: 8d 0d dc  -         sta REG_CIA_ICR
0808: ad 13 d0  -         lda DISCR   // Set the auto adjust 
080b: 09 0c     -         ora #$0C    // and wrap flag
080d: 8d 13 d0  -         sta DISCR                
0810: a9 29     -         lda #color 
0812: 8d 15 d0  -         sta DIS00
0815: 20 c2 e3  -         jsr GFX.fill_screen_
0818: a9 2e     -         lda #color
081a: 20 09 e2  -         jsr set_fg_color_
081d: a9 02     -         lda #xpos
081f: 20 d9 e1  -         jsr set_cursor_x_
0822: a9 01     -         lda #ypos
0824: 20 f1 e1  -         jsr set_cursor_y_    
0827: a9 2e     -         lda #<addr
0829: 85 e0     -         sta zpRegE0
082b: a9 f0     -         lda #>addr
082d: 85 e1     -         sta zpRegE1
082f: 20 7d e2  -         jsr print_text_
0832: a9 1f     -         lda #color
0834: 20 09 e2  -         jsr set_fg_color_
0837: a9 3f     -         lda #xlo
0839: 8d 15 d0  -         sta DIS00
083c: a9 00     -         lda #xhi
083e: 8d 16 d0  -         sta DIS01
0841: a9 54     -         lda #y
0843: 8d 17 d0  -         sta DIS02
0846: a9 08     -         lda #rad
0848: 8d 18 d0  -         sta DIS03
084b: a9 1b     -         lda #color 
084d: 8d 19 d0  -         sta DIS04 
0850: 20 63 e3  -         jsr GFX.fill_circle_ 
0853: a9 0a     -         lda #xpos
0855: 20 d9 e1  -         jsr set_cursor_x_
0858: a9 0a     -         lda #ypos
085a: 20 f1 e1  -         jsr set_cursor_y_    
085d: a9 64     -         lda #<addr
085f: 85 e0     -         sta zpRegE0
0861: a9 f0     -         lda #>addr
0863: 85 e1     -         sta zpRegE1
0865: 20 7d e2  -         jsr print_text_
0868: a9 0a     -         lda #xpos
086a: 20 d9 e1  -         jsr set_cursor_x_
086d: a9 0c     -         lda #ypos
086f: 20 f1 e1  -         jsr set_cursor_y_    
0872: a9 74     -         lda #<addr
0874: 85 e0     -         sta zpRegE0
0876: a9 f0     -         lda #>addr
0878: 85 e1     -         sta zpRegE1
087a: 20 7d e2  -         jsr print_text_
087d: 78        -         sei
087e: a9 ad     -         lda #<label
0880: 8d fa ff  -         sta $fffa 
0883: a9 08     -         lda #>label
0885: 8d fb ff  -         sta $fffb
0888: 58        -         cli
0889: 78        -         sei
088a: a9 ad     -         lda #<label
088c: 8d fe ff  -         sta $fffe 
088f: a9 08     -         lda #>label
0891: 8d ff ff  -         sta $ffff
0894: 58        -         cli
0895: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0897: 8d 0d dc  -         sta $dc0d
089a: ad ac 08  - endless:lda PROGRAM_ADR_CR
089d: 10 fb     -         bpl endless
089f: a9 7f     -         lda #CIA_IRQ_MASK
08a1: 8d 0d dc  -         sta REG_CIA_ICR
08a4: 20 6d 10  -         jsr SpaceInvaders.run
08a7: 4c a7 08  -         jmp *
08aa: 00        - PROGRAM_ADR_LO:.byte 0
08ab: 00        - PROGRAM_ADR_HI:.byte 0
08ac: 00        - PROGRAM_ADR_CR:.byte 0
08ad: 48        - test_isr:pha
08ae: da        -         phx
08af: 5a        -         phy
08b0: ad 0d dc  -         lda REG_CIA_ICR
08b3: 48        -         pha
08b4: a9 00     -         lda #xlo
08b6: 8d 15 d0  -         sta DIS00
08b9: a9 00     -         lda #xhi 
08bb: 8d 16 d0  -         sta DIS01
08be: a9 b0     -         lda #y 
08c0: 8d 17 d0  -         sta DIS02
08c3: a9 00     -         lda #width_lo 
08c5: 8d 18 d0  -         sta DIS03
08c8: a9 64     -         lda #width_hi
08ca: 8d 19 d0  -         sta DIS04
08cd: a9 18     -         lda #height
08cf: 8d 1a d0  -         sta DIS05
08d2: a9 04     -         lda #col 
08d4: 8d 1b d0  -         sta DIS06
08d7: 20 04 e3  -         jsr GFX.fill_rect_
08da: 68        -         pla 
08db: a9 09     -         lda #xpos
08dd: 20 d9 e1  -         jsr set_cursor_x_
08e0: a9 17     -         lda #ypos
08e2: 20 f1 e1  -         jsr set_cursor_y_    
08e5: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
08e8: 85 e0     -         sta zpRegE0
08ea: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
08ed: 85 e1     -         sta zpRegE1
08ef: 20 3f e1  -         jsr Math.bcd_convert_word_
08f2: a5 e4     -         lda zpRegE4
08f4: 20 95 e2  -         jsr print_hex_
08f7: a5 e3     -         lda zpRegE3
08f9: 20 95 e2  -         jsr print_hex_
08fc: a5 e2     -         lda zpRegE2
08fe: 20 95 e2  -         jsr print_hex_
0901: a9 02     -         lda #xpos
0903: 20 d9 e1  -         jsr set_cursor_x_
0906: a9 1a     -         lda #ypos
0908: 20 f1 e1  -         jsr set_cursor_y_    
090b: a9 51     -         lda #<addr
090d: 85 e0     -         sta zpRegE0
090f: a9 f0     -         lda #>addr
0911: 85 e1     -         sta zpRegE1
0913: 20 7d e2  -         jsr print_text_
0916: ce 44 09  -         dec GAME_COUNTDOWN
0919: d0 0f     -         bne exit
091b: a9 6d     -         lda #<SpaceInvaders.run
091d: 8d aa 08  -         sta PROGRAM_ADR_LO
0920: a9 10     -         lda #>SpaceInvaders.run
0922: 8d ab 08  -         sta PROGRAM_ADR_HI
0925: a9 80     -         lda #$80
0927: 8d ac 08  -         sta PROGRAM_ADR_CR
092a: 7a        - exit:   ply 
092b: fa        -         plx 
092c: 68        -         pla 
092d: 40        -         rti
092e: a9 f0     - setup_timer:lda #$f0
0930: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
0933: a9 00     -         lda #$00
0935: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
0938: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
093a: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
093d: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
093f: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0942: 60        -         rts
0943: 00        - IRQ_DATA:.byte $00
0944: ff        - GAME_COUNTDOWN:.byte $ff
0945: 48        - kernel_isr:pha
0946: da        -         phx
0947: 5a        -         phy
0948: ad 0d dc  -         lda REG_CIA_ICR
094b: ce 44 09  -         dec GAME_COUNTDOWN
094e: d0 36     -         bne exit
0950: a9 80     -         lda #$80
0952: 8d ac 08  -         sta PROGRAM_ADR_CR
0955: 4c 86 09  -         jmp exit
0958: 8d 43 09  - start_isr:sta IRQ_DATA
095b: 8d ff d0  -         sta DEBUG
095e: a9 04     - test_frame_irq:lda #FRAME_INTERRUPT_FLAG
0960: 2c 43 09  -         bit IRQ_DATA
0963: f0 03     -         beq test_keyboard
0965: 4c 86 09  -         jmp exit
0968: a9 08     - test_keyboard:lda #KBD_INTERRUPT_FLAG
096a: 2c 43 09  -         bit IRQ_DATA
096d: f0 06     -         beq test_timer_a 
096f: 20 8a 09  -         jsr handle_key_event
0972: 4c 86 09  -         jmp exit
0975: a9 01     - test_timer_a:lda #TIMER_A_INTERRUPT_FLAG
0977: 2c 43 09  -         bit IRQ_DATA
097a: f0 03     -         beq test_timer_b
097c: 4c 86 09  -         jmp exit
097f: a9 02     - test_timer_b:lda #TIMER_B_INTERRUPT_FLAG
0981: 2c 43 09  -         bit IRQ_DATA
0984: f0 00     -         beq exit
0986: 7a        - exit:   ply 
0987: fa        -         plx 
0988: 68        -         pla 
0989: 40        -         rti
098a: ad 10 d0  - handle_key_event:lda KBD
098d: c9 32     -         cmp #$32    // Key 2
098f: d0 1f     -         bne exit
0991: a9 ea     -         lda #code
0993: 8d ff d0  -         sta DEBUG
0996: a9 7f     -         lda #CIA_IRQ_MASK
0998: 8d 0d dc  -         sta REG_CIA_ICR
099b: a9 20     -         lda #color 
099d: 8d 15 d0  -         sta DIS00
09a0: 20 c2 e3  -         jsr GFX.fill_screen_
09a3: a9 3f     -         lda #color 
09a5: 8d 15 d0  -         sta DIS00
09a8: 20 c2 e3  -         jsr GFX.fill_screen_
09ab: a9 80     -         lda #$80
09ad: 8d ac 08  -         sta PROGRAM_ADR_CR
09b0: 60        - exit:   rts

[Space Invaders]
1000: 48        - dummy_isr:pha
1001: da        -         phx
1002: 5a        -         phy
1003: 48        -         pha
1004: a9 00     -         lda #xlo
1006: 8d 15 d0  -         sta DIS00
1009: a9 00     -         lda #xhi 
100b: 8d 16 d0  -         sta DIS01
100e: a9 b0     -         lda #y 
1010: 8d 17 d0  -         sta DIS02
1013: a9 00     -         lda #width_lo 
1015: 8d 18 d0  -         sta DIS03
1018: a9 64     -         lda #width_hi
101a: 8d 19 d0  -         sta DIS04
101d: a9 18     -         lda #height
101f: 8d 1a d0  -         sta DIS05
1022: a9 04     -         lda #col 
1024: 8d 1b d0  -         sta DIS06
1027: 20 04 e3  -         jsr GFX.fill_rect_
102a: 68        -         pla 
102b: a9 09     -         lda #xpos
102d: 20 d9 e1  -         jsr set_cursor_x_
1030: a9 17     -         lda #ypos
1032: 20 f1 e1  -         jsr set_cursor_y_    
1035: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
1038: 85 e0     -         sta zpRegE0
103a: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
103d: 85 e1     -         sta zpRegE1
103f: 20 3f e1  -         jsr Math.bcd_convert_word_
1042: a5 e4     -         lda zpRegE4
1044: 20 95 e2  -         jsr print_hex_
1047: a5 e3     -         lda zpRegE3
1049: 20 95 e2  -         jsr print_hex_
104c: a5 e2     -         lda zpRegE2
104e: 20 95 e2  -         jsr print_hex_
1051: a9 02     -         lda #xpos
1053: 20 d9 e1  -         jsr set_cursor_x_
1056: a9 1a     -         lda #ypos
1058: 20 f1 e1  -         jsr set_cursor_y_    
105b: a9 51     -         lda #<addr
105d: 85 e0     -         sta zpRegE0
105f: a9 f0     -         lda #>addr
1061: 85 e1     -         sta zpRegE1
1063: 20 7d e2  -         jsr print_text_
1066: ad 0d dc  -         lda REG_CIA_ICR
1069: 7a        -         ply 
106a: fa        -         plx 
106b: 68        -         pla 
106c: 40        -         rti
106d: a9 7f     - run:    lda #CIA_IRQ_MASK
106f: 8d 0d dc  -         sta REG_CIA_ICR
1072: a9 2a     -         lda #color 
1074: 8d 15 d0  -         sta DIS00
1077: 20 c2 e3  -         jsr GFX.fill_screen_
107a: 20 dd 19  -         jsr init_alien_animation
107d: 20 ab 17  -         jsr initialize_sprite_definition_block
1080: a9 00     -         lda #state
1082: 20 88 10  -         jsr switch_game_state
1085: 4c 85 10  -         jmp *
1088: 85 04     - switch_game_state:sta ZP_GAME_STATE
108a: c9 00     - gs_intro:cmp #GAME_STATE_INTRO
108c: d0 06     -         bne gs_level_start
108e: 20 9b 11  -         jsr Intro.init
1091: 4c ba 10  -         jmp exit
1094: c9 01     - gs_level_start:cmp #GAME_STATE_LEVEL_START
1096: d0 03     -         bne gs_fight
1098: 4c ba 10  -         jmp exit
109b: c9 02     - gs_fight:cmp #GAME_STATE_FIGHT
109d: d0 06     -         bne gs_won
109f: 20 f6 12  -         jsr Fight.init
10a2: 4c ba 10  -         jmp exit
10a5: c9 03     - gs_won: cmp #GAME_STATE_WON 
10a7: d0 03     -         bne gs_lost
10a9: 4c ba 10  -         jmp exit
10ac: c9 04     - gs_lost:cmp #GAME_STATE_LOST
10ae: d0 03     -         bne gs_debug 
10b0: 4c ba 10  -         jmp exit
10b3: c9 05     - gs_debug:cmp #GAME_STATE_DEBUG 
10b5: d0 03     -         bne exit
10b7: 20 db 14  -         jsr Debug.init
10ba: 60        - exit:   rts
10bb: a6 07     - animate_aliens:ldx ALIEN_ANIM_FRAME_HI // Why ???
10bd: bd 8b 17  -         lda ALIEN_A_SPRITE_ANIMATION_LO,x
10c0: 8d 4b 17  -         sta SPRITE_DATA_LO+i    
10c3: 8d 4c 17  -         sta SPRITE_DATA_LO+i    
10c6: 8d 4d 17  -         sta SPRITE_DATA_LO+i    
10c9: 8d 4e 17  -         sta SPRITE_DATA_LO+i    
10cc: 8d 4f 17  -         sta SPRITE_DATA_LO+i    
10cf: 8d 50 17  -         sta SPRITE_DATA_LO+i    
10d2: 8d 51 17  -         sta SPRITE_DATA_LO+i    
10d5: 8d 52 17  -         sta SPRITE_DATA_LO+i    
10d8: bd 8f 17  -         lda ALIEN_A_SPRITE_ANIMATION_HI,x
10db: 8d 6b 17  -         sta SPRITE_DATA_HI+i    
10de: 8d 6c 17  -         sta SPRITE_DATA_HI+i    
10e1: 8d 6d 17  -         sta SPRITE_DATA_HI+i    
10e4: 8d 6e 17  -         sta SPRITE_DATA_HI+i    
10e7: 8d 6f 17  -         sta SPRITE_DATA_HI+i    
10ea: 8d 70 17  -         sta SPRITE_DATA_HI+i    
10ed: 8d 71 17  -         sta SPRITE_DATA_HI+i    
10f0: 8d 72 17  -         sta SPRITE_DATA_HI+i    
10f3: bd 93 17  -         lda ALIEN_B_SPRITE_ANIMATION_LO,x
10f6: 8d 53 17  -         sta SPRITE_DATA_LO+i    
10f9: 8d 54 17  -         sta SPRITE_DATA_LO+i    
10fc: 8d 55 17  -         sta SPRITE_DATA_LO+i    
10ff: 8d 56 17  -         sta SPRITE_DATA_LO+i    
1102: 8d 57 17  -         sta SPRITE_DATA_LO+i    
1105: 8d 58 17  -         sta SPRITE_DATA_LO+i    
1108: 8d 59 17  -         sta SPRITE_DATA_LO+i    
110b: 8d 5a 17  -         sta SPRITE_DATA_LO+i    
110e: bd 97 17  -         lda ALIEN_B_SPRITE_ANIMATION_HI,x
1111: 8d 73 17  -         sta SPRITE_DATA_HI+i    
1114: 8d 74 17  -         sta SPRITE_DATA_HI+i    
1117: 8d 75 17  -         sta SPRITE_DATA_HI+i    
111a: 8d 76 17  -         sta SPRITE_DATA_HI+i    
111d: 8d 77 17  -         sta SPRITE_DATA_HI+i    
1120: 8d 78 17  -         sta SPRITE_DATA_HI+i    
1123: 8d 79 17  -         sta SPRITE_DATA_HI+i    
1126: 8d 7a 17  -         sta SPRITE_DATA_HI+i    
1129: 60        -         rts
112a: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
112c: 07 e0     -         .byte %00000111, %11100000
112e: 0f f0     -         .byte %00001111, %11110000
1130: 1d b8     -         .byte %00011101, %10111000
1132: 17 e8     -         .byte %00010111, %11101000
1134: 17 e8     -         .byte %00010111, %11101000
1136: 02 40     -         .byte %00000010, %01000000
1138: 06 60     -         .byte %00000110, %01100000
113a: 02 40     - SPACE_ALIEN_A1:.byte %00000010, %01000000
113c: 07 e0     -         .byte %00000111, %11100000
113e: 0f f0     -         .byte %00001111, %11110000
1140: 1d b8     -         .byte %00011101, %10111000
1142: 17 e8     -         .byte %00010111, %11101000
1144: 07 c0     -         .byte %00000111, %11000000
1146: 02 60     -         .byte %00000010, %01100000
1148: 06 00     -         .byte %00000110, %00000000
114a: 02 40     - SPACE_ALIEN_A2:.byte %00000010, %01000000
114c: 07 e0     -         .byte %00000111, %11100000
114e: 0f f0     -         .byte %00001111, %11110000
1150: 1d b8     -         .byte %00011101, %10111000
1152: 17 e8     -         .byte %00010111, %11101000
1154: 03 e0     -         .byte %00000011, %11100000
1156: 06 40     -         .byte %00000110, %01000000
1158: 00 60     -         .byte %00000000, %01100000
115a: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
115c: 04 40     -         .byte %00000100, %01000000
115e: 03 80     -         .byte %00000011, %10000000
1160: 07 c0     -         .byte %00000111, %11000000
1162: 05 40     -         .byte %00000101, %01000000
1164: 07 c0     -         .byte %00000111, %11000000
1166: 0a a0     -         .byte %00001010, %10100000
1168: 0a a0     -         .byte %00001010, %10100000
116a: 00 00     - SPACE_ALIEN_B1:.byte %00000000, %00000000
116c: 04 40     -         .byte %00000100, %01000000
116e: 03 80     -         .byte %00000011, %10000000
1170: 07 c0     -         .byte %00000111, %11000000
1172: 05 40     -         .byte %00000101, %01000000
1174: 07 c0     -         .byte %00000111, %11000000
1176: 0a a0     -         .byte %00001010, %10100000
1178: 15 40     -         .byte %00010101, %01000000
117a: 00 00     - SPACE_ALIEN_B2:.byte %00000000, %00000000
117c: 04 40     -         .byte %00000100, %01000000
117e: 03 80     -         .byte %00000011, %10000000
1180: 07 c0     -         .byte %00000111, %11000000
1182: 05 40     -         .byte %00000101, %01000000
1184: 07 c0     -         .byte %00000111, %11000000
1186: 0a a0     -         .byte %00001010, %10100000
1188: 05 50     -         .byte %00000101, %01010000
118a: 00 00     - SPACE_ALIEN_C:.byte %00000000, %00000000
118c: 04 40     -         .byte %00000100, %01000000
118e: 0f e0     -         .byte %00001111, %11100000
1190: 19 30     -         .byte %00011001, %00110000
1192: 1f f0     -         .byte %00011111, %11110000
1194: 1f f0     -         .byte %00011111, %11110000
1196: 15 50     -         .byte %00010101, %01010000
1198: 0a a0     -         .byte %00001010, %10100000
119a: 00        - START_DELAY:.byte 00
119b: a9 04     - init:   lda #FRAME_INTERRUPT_FLAG
119d: 8d 0d dc  -         sta $dc0d
11a0: a9 0a     -         lda #xpos
11a2: 20 d9 e1  -         jsr set_cursor_x_
11a5: a9 02     -         lda #ypos
11a7: 20 f1 e1  -         jsr set_cursor_y_    
11aa: 78        -         sei
11ab: a9 c1     -         lda #<label
11ad: 8d fa ff  -         sta $fffa 
11b0: a9 11     -         lda #>label
11b2: 8d fb ff  -         sta $fffb
11b5: 58        -         cli
11b6: a9 64     -         lda #100
11b8: 8d 9a 11  -         sta START_DELAY
11bb: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
11bd: 8d 0d dc  -         sta $dc0d
11c0: 60        -         rts
11c1: 48        - run:    pha 
11c2: da        -         phx
11c3: 5a        -         phy  
11c4: ad 0d dc  -         lda REG_CIA_ICR
11c7: a9 0a     -         lda #xpos
11c9: 20 d9 e1  -         jsr set_cursor_x_
11cc: a9 06     -         lda #ypos
11ce: 20 f1 e1  -         jsr set_cursor_y_    
11d1: a9 4d     -         lda #<addr
11d3: 85 e0     -         sta zpRegE0
11d5: a9 12     -         lda #>addr
11d7: 85 e1     -         sta zpRegE1
11d9: 20 7d e2  -         jsr print_text_
11dc: a9 0a     -         lda #xpos
11de: 20 d9 e1  -         jsr set_cursor_x_
11e1: a9 09     -         lda #ypos
11e3: 20 f1 e1  -         jsr set_cursor_y_    
11e6: a9 68     -         lda #<addr
11e8: 85 e0     -         sta zpRegE0
11ea: a9 12     -         lda #>addr
11ec: 85 e1     -         sta zpRegE1
11ee: 20 7d e2  -         jsr print_text_
11f1: a9 0a     -         lda #xpos
11f3: 20 d9 e1  -         jsr set_cursor_x_
11f6: a9 0b     -         lda #ypos
11f8: 20 f1 e1  -         jsr set_cursor_y_    
11fb: a9 7a     -         lda #<addr
11fd: 85 e0     -         sta zpRegE0
11ff: a9 12     -         lda #>addr
1201: 85 e1     -         sta zpRegE1
1203: 20 7d e2  -         jsr print_text_
1206: a9 0a     -         lda #xpos
1208: 20 d9 e1  -         jsr set_cursor_x_
120b: a9 0d     -         lda #ypos
120d: 20 f1 e1  -         jsr set_cursor_y_    
1210: ad 9a 11  -         lda addr
1213: 20 95 e2  -         jsr print_hex_
1216: a9 0e     -         lda #xpos
1218: 20 d9 e1  -         jsr set_cursor_x_
121b: a9 0d     -         lda #ypos
121d: 20 f1 e1  -         jsr set_cursor_y_    
1220: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
1223: 85 e0     -         sta zpRegE0
1225: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
1228: 85 e1     -         sta zpRegE1
122a: 20 3f e1  -         jsr Math.bcd_convert_word_
122d: a5 e4     -         lda zpRegE4
122f: 20 95 e2  -         jsr print_hex_
1232: a5 e3     -         lda zpRegE3
1234: 20 95 e2  -         jsr print_hex_
1237: a5 e2     -         lda zpRegE2
1239: 20 95 e2  -         jsr print_hex_
123c: ce 9a 11  -         dec START_DELAY
123f: d0 08     -         bne !exit_isr+
1241: a9 05     -         lda #state
1243: 20 88 10  -         jsr switch_game_state
1246: 4c 49 12  -         jmp !exit_isr+
1249: 7a        -         ply 
124a: fa        -         plx 
124b: 68        -         pla 
124c: 40        -         rti
124d: 53 50 41 43 45 20 49 4e 56 41 44 45 52 20 4f 4e  - intro_message:.text "SPACE INVADER ON NEOS65C02"
125d: 20 4e 45 4f 53 36 35 43 30 32                   
1267: 00        -         .byte 0
1268: 41 20 20 53 54 41 52 54 20 4e 45 57 20 47 41 4d  - men_start_game:.text "A  START NEW GAME"
1278: 45                                              
1279: 00        -         .byte 0       
127a: 42 20 20 42 41 43 4b 20 54 4f 20 4d 41 49 4e 20  - men_sback_to_main:.text "B  BACK TO MAIN MENU"
128a: 4d 45 4e 55                                     
128e: 00        -         .byte 0       
128f: 00 00     - CURRENT_VELOCITY:.word $0000
1291: 00 00     - TARGET_VELOCITY:.word $0000
1293: a9 04     - init:   lda #FRAME_INTERRUPT_FLAG
1295: 8d 0d dc  -         sta $dc0d
1298: 78        -         sei
1299: a9 f6     -         lda #<label
129b: 8d fa ff  -         sta $fffa 
129e: a9 12     -         lda #>label
12a0: 8d fb ff  -         sta $fffb
12a3: 58        -         cli
12a4: a2 1f     -         ldx #31
12a6: a9 80     -         lda #$80
12a8: 9d 8b 16  -         sta SPRITE_FLAGS,x 
12ab: ca        -         dex 
12ac: 10 fa     -         bpl !loop- 
12ae: a2 07     -         ldx #7
12b0: a9 00     -         lda #0
12b2: 9d cb 16  -         sta SPRITE_YPOS,x 
12b5: 9d bb 16  -         sta SPRITE_XPOS+16,x 
12b8: ca        -         dex 
12b9: 10 f7     -         bpl !loop- 
12bb: a2 07     -         ldx #7
12bd: a9 ff     -         lda #255
12bf: 9d d3 16  -         sta SPRITE_YPOS+8,x 
12c2: 9d c3 16  -         sta SPRITE_XPOS+24,x 
12c5: ca        -         dex 
12c6: 10 f7     -         bpl !loop- 
12c8: a2 07     -         ldx #7
12ca: a9 20     -         lda #$20
12cc: 9d cb 16  -         sta SPRITE_YPOS,x 
12cf: ca        -         dex 
12d0: 10 fa     -         bpl !loop-
12d2: a2 07     -         ldx #7
12d4: a9 30     -         lda #$30
12d6: 9d d3 16  -         sta SPRITE_YPOS+8,x 
12d9: ca        -         dex 
12da: 10 fa     -         bpl !loop-
12dc: a2 07     -         ldx #7
12de: a9 40     -         lda #$40
12e0: 9d db 16  -         sta SPRITE_YPOS+16,x 
12e3: ca        -         dex 
12e4: 10 fa     -         bpl !loop-
12e6: a2 07     -         ldx #7
12e8: a9 50     -         lda #$50
12ea: 9d db 16  -         sta SPRITE_YPOS+16,x 
12ed: ca        -         dex 
12ee: 10 fa     -         bpl !loop-
12f0: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
12f2: 8d 0d dc  -         sta $dc0d
12f5: 60        -         rts
12f6: a9 7f     - animate,init:lda #CIA_IRQ_MASK
12f8: 8d 0d dc  -         sta REG_CIA_ICR
12fb: 78        -         sei
12fc: a9 0e     -         lda #<label
12fe: 8d fa ff  -         sta $fffa 
1301: a9 13     -         lda #>label
1303: 8d fb ff  -         sta $fffb
1306: 58        -         cli
1307: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
1309: 8d 0d dc  -         sta $dc0d
130c: 60        -         rts
130d: 04        - shot_delay:.byte $04
130e: 48        - run:    pha
130f: da        -         phx 
1310: 5a        -         phy 
1311: ad 0d dc  -         lda REG_CIA_ICR
1314: a9 29     -         lda #color 
1316: 8d 15 d0  -         sta DIS00
1319: 20 c2 e3  -         jsr GFX.fill_screen_
131c: 48        -         pha
131d: a9 05     -         lda #xlo
131f: 8d 15 d0  -         sta DIS00
1322: a9 00     -         lda #xhi 
1324: 8d 16 d0  -         sta DIS01
1327: a9 14     -         lda #y 
1329: 8d 17 d0  -         sta DIS02
132c: a9 fa     -         lda #width_lo 
132e: 8d 18 d0  -         sta DIS03
1331: a9 00     -         lda #width_hi
1333: 8d 19 d0  -         sta DIS04
1336: a9 a0     -         lda #height
1338: 8d 1a d0  -         sta DIS05
133b: a9 37     -         lda #col 
133d: 8d 1b d0  -         sta DIS06
1340: 20 04 e3  -         jsr GFX.fill_rect_
1343: 68        -         pla 
1344: a5 06     -         lda ALIEN_ANIM_FRAME_LO
1346: 18        -         clc
1347: 69 40     -         adc #%01000000
1349: 85 06     -         sta ALIEN_ANIM_FRAME_LO
134b: a5 07     -         lda ALIEN_ANIM_FRAME_HI
134d: 69 00     -         adc #00
134f: 29 03     -         and #3
1351: 85 07     -         sta ALIEN_ANIM_FRAME_HI
1353: 20 bb 10  -         jsr SpaceInvaders.animate_aliens
1356: 20 17 e3  -         jsr GFX.draw_sprites_
1359: 48        -         pha
135a: a9 05     -         lda #xlo
135c: 8d 15 d0  -         sta DIS00
135f: a9 00     -         lda #xhi 
1361: 8d 16 d0  -         sta DIS01
1364: a9 b4     -         lda #y 
1366: 8d 17 d0  -         sta DIS02
1369: a9 fa     -         lda #width_lo 
136b: 8d 18 d0  -         sta DIS03
136e: a9 00     -         lda #width_hi
1370: 8d 19 d0  -         sta DIS04
1373: a9 3c     -         lda #height
1375: 8d 1a d0  -         sta DIS05
1378: a9 2a     -         lda #col 
137a: 8d 1b d0  -         sta DIS06
137d: 20 04 e3  -         jsr GFX.fill_rect_
1380: 68        -         pla 
1381: 48        -         pha
1382: a9 05     -         lda #xlo
1384: 8d 15 d0  -         sta DIS00
1387: a9 00     -         lda #xhi 
1389: 8d 16 d0  -         sta DIS01
138c: a9 14     -         lda #y 
138e: 8d 17 d0  -         sta DIS02
1391: a9 fa     -         lda #width_lo 
1393: 8d 18 d0  -         sta DIS03
1396: a9 00     -         lda #width_hi
1398: 8d 19 d0  -         sta DIS04
139b: a9 a0     -         lda #height
139d: 8d 1a d0  -         sta DIS05
13a0: a9 17     -         lda #col 
13a2: 8d 1b d0  -         sta DIS06
13a5: 20 f1 e2  -         jsr GFX.draw_rect_
13a8: 68        -         pla 
13a9: a9 2b     -         lda #color
13ab: 20 09 e2  -         jsr set_fg_color_
13ae: a9 02     -         lda #xpos
13b0: 20 d9 e1  -         jsr set_cursor_x_
13b3: a9 1a     -         lda #ypos
13b5: 20 f1 e1  -         jsr set_cursor_y_    
13b8: a9 51     -         lda #<addr
13ba: 85 e0     -         sta zpRegE0
13bc: a9 f0     -         lda #>addr
13be: 85 e1     -         sta zpRegE1
13c0: 20 7d e2  -         jsr print_text_
13c3: a9 09     -         lda #xpos
13c5: 20 d9 e1  -         jsr set_cursor_x_
13c8: a9 17     -         lda #ypos
13ca: 20 f1 e1  -         jsr set_cursor_y_    
13cd: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
13d0: 85 e0     -         sta zpRegE0
13d2: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
13d5: 85 e1     -         sta zpRegE1
13d7: 20 3f e1  -         jsr Math.bcd_convert_word_
13da: a5 e4     -         lda zpRegE4
13dc: 20 95 e2  -         jsr print_hex_
13df: a5 e3     -         lda zpRegE3
13e1: 20 95 e2  -         jsr print_hex_
13e4: a5 e2     -         lda zpRegE2
13e6: 20 95 e2  -         jsr print_hex_
13e9: a9 02     -         lda #xpos
13eb: 20 d9 e1  -         jsr set_cursor_x_
13ee: a9 17     -         lda #ypos
13f0: 20 f1 e1  -         jsr set_cursor_y_    
13f3: a9 58     -         lda #<addr
13f5: 85 e0     -         sta zpRegE0
13f7: a9 f0     -         lda #>addr
13f9: 85 e1     -         sta zpRegE1
13fb: 20 7d e2  -         jsr print_text_
13fe: a9 02     -         lda #xpos
1400: 20 d9 e1  -         jsr set_cursor_x_
1403: a9 18     -         lda #ypos
1405: 20 f1 e1  -         jsr set_cursor_y_    
1408: a9 5e     -         lda #<addr
140a: 85 e0     -         sta zpRegE0
140c: a9 f0     -         lda #>addr
140e: 85 e1     -         sta zpRegE1
1410: 20 7d e2  -         jsr print_text_
1413: a9 09     -         lda #xpos
1415: 20 d9 e1  -         jsr set_cursor_x_
1418: a9 18     -         lda #ypos
141a: 20 f1 e1  -         jsr set_cursor_y_    
141d: a5 02     -         lda SCORE_LO       
141f: 85 e0     -         sta zpRegE0
1421: a5 03     -         lda SCORE_HI       
1423: 85 e1     -         sta zpRegE1
1425: 20 3f e1  -         jsr Math.bcd_convert_word_
1428: a5 e4     -         lda zpRegE4
142a: 20 95 e2  -         jsr print_hex_
142d: a5 e3     -         lda zpRegE3
142f: 20 95 e2  -         jsr print_hex_
1432: a5 e2     -         lda zpRegE2
1434: 20 95 e2  -         jsr print_hex_
1437: ce 0d 13  -         dec shot_delay      // Shot delay countdown
143a: d0 27     -         bne draw_bullets    // Still positive. No Shot
143c: 20 71 e1  -         jsr Math.rand8           // New delay in frames ( 0..255)
143f: 29 07     -         and #7
1441: 69 07     -         adc #7              // Increase to at least 7 frames. 
1443: 8d 0d 13  -         sta shot_delay      // Store new delay
1446: 20 2e 1a  -         jsr find_next_invisible_bullet
1449: 90 18     -         bcc draw_bullets    // We couln't find any free slot. So just draw.    
144b: 20 71 e1  -         jsr Math.rand8  // Random value to accu
144e: 29 0f     -         and #15    // One of the first sixteen aliens
1450: a8        -         tay        // Using y as alien index
1451: b9 ab 16  -         lda SPRITE_XPOS,y
1454: 18        -         clc
1455: 69 08     -         adc #8
1457: 9d af 1a  -         sta ALIEN_BULLETS_X,x
145a: b9 cb 16  -         lda SPRITE_YPOS,y
145d: 18        -         clc
145e: 69 04     -         adc #4
1460: 9d b4 1a  -         sta ALIEN_BULLETS_Y,x
1463: 20 43 1a  - draw_bullets:jsr update_alien_bullets
1466: ad ab 16  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
1469: c9 0a     -         cmp #10             // 10 is the minimum x position
146b: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
146d: a9 01     - left_underflow:lda #$01
146f: 8d be 14  -         sta operation+1
1472: 4c 81 14  -         jmp go_down 
1475: ad b2 16  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
1478: c9 ef     -         cmp #$ef            // Max xpos = 239
147a: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
147c: a9 ff     - right_overflow:lda #$ff            // By adding -1, we move left.
147e: 8d be 14  -         sta operation+1     // Write the new speed to the code (self modified)    
1481: ad cb 16  - go_down:lda SPRITE_YPOS
1484: c9 96     -         cmp #150
1486: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
1488: a0 07     - reset_ypos:ldy #7
148a: a9 20     -         lda #$20              // Start Y position
148c: 99 cb 16  -         sta SPRITE_YPOS,y 
148f: 88        -         dey
1490: 10 fa     -         bpl !loop-
1492: a0 07     -         ldy #7
1494: a9 30     -         lda #$30              // Start Y position
1496: 99 d3 16  -         sta SPRITE_YPOS+8,y 
1499: 88        -         dey
149a: 10 fa     -         bpl !loop-
149c: a0 07     -         ldy #7
149e: a9 40     -         lda #$40              // Start Y position
14a0: 99 db 16  -         sta SPRITE_YPOS+16,y 
14a3: 88        -         dey
14a4: 10 fa     -         bpl !loop-
14a6: 4c b7 14  -         jmp move
14a9: a0 17     - decrease:ldy #23             // Calculate position fpr 24 sprites
14ab: b9 cb 16  -         lda SPRITE_YPOS,y 
14ae: 18        -         clc
14af: 69 04     -         adc #4
14b1: 99 cb 16  -         sta SPRITE_YPOS,y 
14b4: 88        -         dey
14b5: 10 f4     -         bpl !loop-
14b7: a0 07     - move:   ldy #7               // Y is the sprite index. We have 8 sprites in a row 
14b9: b9 ab 16  -         lda SPRITE_XPOS,y    // Load current x position of the sprite   
14bc: 18        -         clc
14bd: 69 01     - operation:adc #1               // Add the speed
14bf: 99 ab 16  -         sta SPRITE_XPOS,y    // save the new xpos 
14c2: 99 b3 16  -         sta SPRITE_XPOS+8,y  // Also for the second row
14c5: 99 bb 16  -         sta SPRITE_XPOS+16,y // Also for the second row
14c8: 88        -         dey
14c9: 10 ee     -         bpl !loop-
14cb: ad 0d dc  - exit:   lda $dc0d            // Acknowledge the IRQ            
14ce: 7a        -         ply
14cf: fa        -         plx  
14d0: 68        -         pla
14d1: 40        -         rti
14d2: 00        - COLOR_OFFSET:.byte 0
14d3: 00 00 00 00                                      - WORST_TIME:.fill 4,0
14d7: 00 00 00 00                                      - TS:     .fill 4,0
14db: a9 7f     - init:   lda #CIA_IRQ_MASK
14dd: 8d 0d dc  -         sta REG_CIA_ICR
14e0: 78        -         sei
14e1: a9 f2     -         lda #<label
14e3: 8d fa ff  -         sta $fffa 
14e6: a9 14     -         lda #>label
14e8: 8d fb ff  -         sta $fffb
14eb: 58        -         cli
14ec: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
14ee: 8d 0d dc  -         sta $dc0d
14f1: 60        -         rts
14f2: 48        - run_debug:pha 
14f3: da        -         phx 
14f4: 5a        -         phy
14f5: 20 0e e4  -         jsr GFX.get_millis
14f8: ad 15 d0  -         lda DIS00
14fb: 8d d7 14  -         sta TS 
14fe: ad 16 d0  -         lda DIS01
1501: 8d d8 14  -         sta TS+1
1504: ad 17 d0  -         lda DIS02
1507: 8d d9 14  -         sta TS+2
150a: ad 18 d0  -         lda DIS03
150d: 8d da 14  -         sta TS+3
1510: 20 fb e3  -         jsr GFX.get_clock_cycle
1513: a2 03     -         ldx #3
1515: bd 15 d0  -         lda DIS00,x 
1518: 95 fc     -         sta zpRegFC,x
151a: ca        -         dex 
151b: 10 f8     -         bpl !ccl-
151d: a0 ef     -         ldy #239 // We 239 Lines
151f: ae d2 14  -         ldx COLOR_OFFSET
1522: a9 00     -         lda #0
1524: 8d 15 d0  -         sta DIS00       // Xpos Low
1527: 8d 16 d0  -         sta DIS01       // Xpos High
152a: 98        -         tya 
152b: 8d 17 d0  -         sta DIS02       // Ypos 
152e: a9 01     -         lda #1
1530: 8d 18 d0  -         sta DIS03       // Width low
1533: a9 40     -         lda #64
1535: 8d 19 d0  -         sta DIS04       // Width high
1538: 8a        -         txa 
1539: 29 3f     -         and #%00111111  // Only 64 colors (0..63)
153b: 8d 1a d0  -         sta DIS05       // Color
153e: 20 b8 e2  -         jsr GFX.draw_horizonal_line_
1541: e8        -         inx             // Next line next color
1542: 88        -         dey             // Next line ypos
1543: d0 dd     -         bne !loop-
1545: ee d2 14  -         inc COLOR_OFFSET // Next frame we start with a higher index
1548: 48        -         pha
1549: a9 00     -         lda #xlo
154b: 8d 15 d0  -         sta DIS00
154e: a9 00     -         lda #xhi 
1550: 8d 16 d0  -         sta DIS01
1553: a9 00     -         lda #y 
1555: 8d 17 d0  -         sta DIS02
1558: a9 32     -         lda #width_lo 
155a: 8d 18 d0  -         sta DIS03
155d: a9 00     -         lda #width_hi
155f: 8d 19 d0  -         sta DIS04
1562: a9 f0     -         lda #height
1564: 8d 1a d0  -         sta DIS05
1567: a9 29     -         lda #col 
1569: 8d 1b d0  -         sta DIS06
156c: 20 04 e3  -         jsr GFX.fill_rect_
156f: 68        -         pla 
1570: a9 00     -         lda #xpos
1572: 20 d9 e1  -         jsr set_cursor_x_
1575: a9 00     -         lda #ypos
1577: 20 f1 e1  -         jsr set_cursor_y_    
157a: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
157d: 85 e0     -         sta zpRegE0
157f: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
1582: 85 e1     -         sta zpRegE1
1584: 20 3f e1  -         jsr Math.bcd_convert_word_
1587: a5 e4     -         lda zpRegE4
1589: 20 95 e2  -         jsr print_hex_
158c: a5 e3     -         lda zpRegE3
158e: 20 95 e2  -         jsr print_hex_
1591: a5 e2     -         lda zpRegE2
1593: 20 95 e2  -         jsr print_hex_
1596: 20 fb e3  -         jsr GFX.get_clock_cycle
1599: 38        -         sec 
159a: ad 15 d0  -         lda DIS00
159d: e5 fc     -         sbc zpRegFC
159f: 85 fc     -         sta zpRegFC
15a1: ad 16 d0  -         lda DIS01
15a4: e5 fd     -         sbc zpRegFD 
15a6: 85 fd     -         sta zpRegFD
15a8: ad 17 d0  -         lda DIS02 
15ab: e5 fe     -         sbc zpRegFE 
15ad: 85 fe     -         sta zpRegFE 
15af: ad 18 d0  -         lda DIS03 
15b2: e5 ff     -         sbc zpRegFF
15b4: 85 ff     -         sta zpRegFF 
15b6: ad d3 14  -         lda WORST_TIME
15b9: 85 e0     -         sta zpRegE0
15bb: ad d4 14  -         lda WORST_TIME+1
15be: 85 e1     -         sta zpRegE1
15c0: ad d5 14  -         lda WORST_TIME+2
15c3: 85 e2     -         sta zpRegE2
15c5: ad d6 14  -         lda WORST_TIME+3
15c8: 85 e3     -         sta zpRegE3
15ca: a5 fc     -         lda zpRegFC
15cc: 85 e4     -         sta zpRegE4
15ce: a5 fd     -         lda zpRegFD
15d0: 85 e5     -         sta zpRegE5
15d2: a5 fe     -         lda zpRegFE
15d4: 85 e6     -         sta zpRegE6
15d6: a5 ff     -         lda zpRegFF
15d8: 85 e5     -         sta zpRegE5
15da: 20 92 e1  -         jsr Math.compare_long
15dd: 10 14     -         bpl print_delta  // No bigger  value. Just print.
15df: a5 fc     -         lda zpRegFC
15e1: 8d d3 14  -         sta WORST_TIME 
15e4: a5 fd     -         lda zpRegFD
15e6: 8d d4 14  -         sta WORST_TIME+1 
15e9: a5 fe     -         lda zpRegFE
15eb: 8d d5 14  -         sta WORST_TIME+2 
15ee: a5 ff     -         lda zpRegFF
15f0: 8d d6 14  -         sta WORST_TIME+3 
15f3: a9 00     - print_delta:lda #xpos
15f5: 20 d9 e1  -         jsr set_cursor_x_
15f8: a9 03     -         lda #ypos
15fa: 20 f1 e1  -         jsr set_cursor_y_    
15fd: ad d6 14  -         lda addr
1600: 20 95 e2  -         jsr print_hex_
1603: ad d5 14  -         lda addr
1606: 20 95 e2  -         jsr print_hex_
1609: ad d4 14  -         lda addr
160c: 20 95 e2  -         jsr print_hex_
160f: ad d3 14  -         lda addr
1612: 20 95 e2  -         jsr print_hex_
1615: 20 0e e4  -         jsr GFX.get_millis
1618: 38        -         sec 
1619: ad 15 d0  -         lda DIS00 
161c: ed d7 14  -         sbc TS
161f: 8d d7 14  -         sta TS 
1622: ad 16 d0  -         lda DIS01 
1625: ed d8 14  -         sbc TS+1
1628: 8d d8 14  -         sta TS+1
162b: ad 17 d0  -         lda DIS02
162e: ed d9 14  -         sbc TS+2
1631: 8d d9 14  -         sta TS+2 
1634: ad 18 d0  -         lda DIS03  
1637: ed da 14  -         sbc TS+3 
163a: 8d da 14  -         sta TS+3 
163d: a9 00     -         lda #xpos
163f: 20 d9 e1  -         jsr set_cursor_x_
1642: a9 04     -         lda #ypos
1644: 20 f1 e1  -         jsr set_cursor_y_    
1647: ad da 14  -         lda addr
164a: 20 95 e2  -         jsr print_hex_
164d: ad d9 14  -         lda addr
1650: 20 95 e2  -         jsr print_hex_
1653: ad d8 14  -         lda addr
1656: 20 95 e2  -         jsr print_hex_
1659: ad d7 14  -         lda addr
165c: 20 95 e2  -         jsr print_hex_
165f: 20 21 e4  -         jsr GFX.get_frame_time
1662: a9 00     -         lda #xpos
1664: 20 d9 e1  -         jsr set_cursor_x_
1667: a9 05     -         lda #ypos
1669: 20 f1 e1  -         jsr set_cursor_y_    
166c: ad 18 d0  -         lda addr
166f: 20 95 e2  -         jsr print_hex_
1672: ad 17 d0  -         lda addr
1675: 20 95 e2  -         jsr print_hex_
1678: ad 16 d0  -         lda addr
167b: 20 95 e2  -         jsr print_hex_
167e: ad 15 d0  -         lda addr
1681: 20 95 e2  -         jsr print_hex_
1684: ad 0d dc  -         lda REG_CIA_ICR
1687: 7a        -         ply 
1688: fa        -         plx 
1689: 68        -         pla
168a: 40        -         rti
168b: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
1693: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
169b: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 16-23
16a3: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
16ab: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
16b3: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
16bb: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 16-23
16c3: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
16cb: 20 20 20 20 20 20 20 20                          - SPRITE_YPOS:.byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 00-07
16d3: 30 30 30 30 30 30 30 30                          -         .byte $30, $30, $30, $30, $30, $30, $30, $30  // Sprite 08-15
16db: 40 40 40 40 40 40 40 40                          -         .byte $40, $40, $40, $40, $40, $40, $40, $40  // Sprite 16-23
16e3: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
16eb: 1f 1f 1f 1f 1f 1f 1f 1f                          - SPRITE_COLOR:.byte $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f  // Sprite 00-07
16f3: 23 23 23 23 23 23 23 23                          -         .byte $23, $23, $23, $23, $23, $23, $23, $23  // Sprite 08-15
16fb: 2c 2c 2c 2c 2c 2c 2c 2c                          -         .byte $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2c  // Sprite 16-23
1703: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
170b: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
1713: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
171b: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 16-23
1723: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
172b: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
1733: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
173b: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 16-23
1743: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
174b: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
175b: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
176b: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
177b: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
178b: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_LO:.fill 4, 0
178f: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_HI:.fill 4, 0
1793: 00 00 00 00                                      - ALIEN_B_SPRITE_ANIMATION_LO:.fill 4, 0
1797: 00 00 00 00                                      - ALIEN_B_SPRITE_ANIMATION_HI:.fill 4, 0
179b: 00 00 00 00                                      - ALIEN_C_SPRITE_ANIMATION_LO:.fill 4, 0
179f: 00 00 00 00                                      - ALIEN_C_SPRITE_ANIMATION_HI:.fill 4, 0
17a3: 00 00 00 00                                      - ALIEN_D_SPRITE_ANIMATION_LO:.fill 4, 0
17a7: 00 00 00 00                                      - ALIEN_D_SPRITE_ANIMATION_HI:.fill 4, 0
17ab: a2 00     - initialize_sprite_definition_block:ldx #index
17ad: a9 2a     -         lda #<address
17af: 9d 4b 17  -         sta SPRITE_DATA_LO, x
17b2: a9 11     -         lda #>address
17b4: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
17b7: a2 08     -         ldx #index
17b9: a9 5a     -         lda #<address
17bb: 9d 4b 17  -         sta SPRITE_DATA_LO, x
17be: a9 11     -         lda #>address
17c0: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
17c3: a2 10     -         ldx #index
17c5: a9 8a     -         lda #<address
17c7: 9d 4b 17  -         sta SPRITE_DATA_LO, x
17ca: a9 11     -         lda #>address
17cc: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
17cf: a2 01     -         ldx #index
17d1: a9 2a     -         lda #<address
17d3: 9d 4b 17  -         sta SPRITE_DATA_LO, x
17d6: a9 11     -         lda #>address
17d8: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
17db: a2 09     -         ldx #index
17dd: a9 5a     -         lda #<address
17df: 9d 4b 17  -         sta SPRITE_DATA_LO, x
17e2: a9 11     -         lda #>address
17e4: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
17e7: a2 11     -         ldx #index
17e9: a9 8a     -         lda #<address
17eb: 9d 4b 17  -         sta SPRITE_DATA_LO, x
17ee: a9 11     -         lda #>address
17f0: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
17f3: a2 02     -         ldx #index
17f5: a9 2a     -         lda #<address
17f7: 9d 4b 17  -         sta SPRITE_DATA_LO, x
17fa: a9 11     -         lda #>address
17fc: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
17ff: a2 0a     -         ldx #index
1801: a9 5a     -         lda #<address
1803: 9d 4b 17  -         sta SPRITE_DATA_LO, x
1806: a9 11     -         lda #>address
1808: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
180b: a2 12     -         ldx #index
180d: a9 8a     -         lda #<address
180f: 9d 4b 17  -         sta SPRITE_DATA_LO, x
1812: a9 11     -         lda #>address
1814: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
1817: a2 03     -         ldx #index
1819: a9 2a     -         lda #<address
181b: 9d 4b 17  -         sta SPRITE_DATA_LO, x
181e: a9 11     -         lda #>address
1820: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
1823: a2 0b     -         ldx #index
1825: a9 5a     -         lda #<address
1827: 9d 4b 17  -         sta SPRITE_DATA_LO, x
182a: a9 11     -         lda #>address
182c: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
182f: a2 13     -         ldx #index
1831: a9 8a     -         lda #<address
1833: 9d 4b 17  -         sta SPRITE_DATA_LO, x
1836: a9 11     -         lda #>address
1838: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
183b: a2 04     -         ldx #index
183d: a9 2a     -         lda #<address
183f: 9d 4b 17  -         sta SPRITE_DATA_LO, x
1842: a9 11     -         lda #>address
1844: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
1847: a2 0c     -         ldx #index
1849: a9 5a     -         lda #<address
184b: 9d 4b 17  -         sta SPRITE_DATA_LO, x
184e: a9 11     -         lda #>address
1850: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
1853: a2 14     -         ldx #index
1855: a9 8a     -         lda #<address
1857: 9d 4b 17  -         sta SPRITE_DATA_LO, x
185a: a9 11     -         lda #>address
185c: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
185f: a2 05     -         ldx #index
1861: a9 2a     -         lda #<address
1863: 9d 4b 17  -         sta SPRITE_DATA_LO, x
1866: a9 11     -         lda #>address
1868: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
186b: a2 0d     -         ldx #index
186d: a9 5a     -         lda #<address
186f: 9d 4b 17  -         sta SPRITE_DATA_LO, x
1872: a9 11     -         lda #>address
1874: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
1877: a2 15     -         ldx #index
1879: a9 8a     -         lda #<address
187b: 9d 4b 17  -         sta SPRITE_DATA_LO, x
187e: a9 11     -         lda #>address
1880: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
1883: a2 06     -         ldx #index
1885: a9 2a     -         lda #<address
1887: 9d 4b 17  -         sta SPRITE_DATA_LO, x
188a: a9 11     -         lda #>address
188c: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
188f: a2 0e     -         ldx #index
1891: a9 5a     -         lda #<address
1893: 9d 4b 17  -         sta SPRITE_DATA_LO, x
1896: a9 11     -         lda #>address
1898: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
189b: a2 16     -         ldx #index
189d: a9 8a     -         lda #<address
189f: 9d 4b 17  -         sta SPRITE_DATA_LO, x
18a2: a9 11     -         lda #>address
18a4: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
18a7: a2 07     -         ldx #index
18a9: a9 2a     -         lda #<address
18ab: 9d 4b 17  -         sta SPRITE_DATA_LO, x
18ae: a9 11     -         lda #>address
18b0: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
18b3: a2 0f     -         ldx #index
18b5: a9 5a     -         lda #<address
18b7: 9d 4b 17  -         sta SPRITE_DATA_LO, x
18ba: a9 11     -         lda #>address
18bc: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
18bf: a2 17     -         ldx #index
18c1: a9 8a     -         lda #<address
18c3: 9d 4b 17  -         sta SPRITE_DATA_LO, x
18c6: a9 11     -         lda #>address
18c8: 9d 6b 17  -         sta SPRITE_DATA_HI, x                
18cb: a2 00     -         ldx #index
18cd: bd 8b 16  -         lda SPRITE_FLAGS, x
18d0: 05 c0     -         ora SPRITE_ENABLE_FLAG
18d2: 9d 8b 16  -         sta SPRITE_FLAGS, x
18d5: a2 01     -         ldx #index
18d7: bd 8b 16  -         lda SPRITE_FLAGS, x
18da: 05 c0     -         ora SPRITE_ENABLE_FLAG
18dc: 9d 8b 16  -         sta SPRITE_FLAGS, x
18df: a2 02     -         ldx #index
18e1: bd 8b 16  -         lda SPRITE_FLAGS, x
18e4: 05 c0     -         ora SPRITE_ENABLE_FLAG
18e6: 9d 8b 16  -         sta SPRITE_FLAGS, x
18e9: a2 03     -         ldx #index
18eb: bd 8b 16  -         lda SPRITE_FLAGS, x
18ee: 05 c0     -         ora SPRITE_ENABLE_FLAG
18f0: 9d 8b 16  -         sta SPRITE_FLAGS, x
18f3: a2 04     -         ldx #index
18f5: bd 8b 16  -         lda SPRITE_FLAGS, x
18f8: 05 c0     -         ora SPRITE_ENABLE_FLAG
18fa: 9d 8b 16  -         sta SPRITE_FLAGS, x
18fd: a2 05     -         ldx #index
18ff: bd 8b 16  -         lda SPRITE_FLAGS, x
1902: 05 c0     -         ora SPRITE_ENABLE_FLAG
1904: 9d 8b 16  -         sta SPRITE_FLAGS, x
1907: a2 06     -         ldx #index
1909: bd 8b 16  -         lda SPRITE_FLAGS, x
190c: 05 c0     -         ora SPRITE_ENABLE_FLAG
190e: 9d 8b 16  -         sta SPRITE_FLAGS, x
1911: a2 07     -         ldx #index
1913: bd 8b 16  -         lda SPRITE_FLAGS, x
1916: 05 c0     -         ora SPRITE_ENABLE_FLAG
1918: 9d 8b 16  -         sta SPRITE_FLAGS, x
191b: a2 08     -         ldx #index
191d: bd 8b 16  -         lda SPRITE_FLAGS, x
1920: 05 c0     -         ora SPRITE_ENABLE_FLAG
1922: 9d 8b 16  -         sta SPRITE_FLAGS, x
1925: a2 09     -         ldx #index
1927: bd 8b 16  -         lda SPRITE_FLAGS, x
192a: 05 c0     -         ora SPRITE_ENABLE_FLAG
192c: 9d 8b 16  -         sta SPRITE_FLAGS, x
192f: a2 0a     -         ldx #index
1931: bd 8b 16  -         lda SPRITE_FLAGS, x
1934: 05 c0     -         ora SPRITE_ENABLE_FLAG
1936: 9d 8b 16  -         sta SPRITE_FLAGS, x
1939: a2 0b     -         ldx #index
193b: bd 8b 16  -         lda SPRITE_FLAGS, x
193e: 05 c0     -         ora SPRITE_ENABLE_FLAG
1940: 9d 8b 16  -         sta SPRITE_FLAGS, x
1943: a2 0c     -         ldx #index
1945: bd 8b 16  -         lda SPRITE_FLAGS, x
1948: 05 c0     -         ora SPRITE_ENABLE_FLAG
194a: 9d 8b 16  -         sta SPRITE_FLAGS, x
194d: a2 0d     -         ldx #index
194f: bd 8b 16  -         lda SPRITE_FLAGS, x
1952: 05 c0     -         ora SPRITE_ENABLE_FLAG
1954: 9d 8b 16  -         sta SPRITE_FLAGS, x
1957: a2 0e     -         ldx #index
1959: bd 8b 16  -         lda SPRITE_FLAGS, x
195c: 05 c0     -         ora SPRITE_ENABLE_FLAG
195e: 9d 8b 16  -         sta SPRITE_FLAGS, x
1961: a2 0f     -         ldx #index
1963: bd 8b 16  -         lda SPRITE_FLAGS, x
1966: 05 c0     -         ora SPRITE_ENABLE_FLAG
1968: 9d 8b 16  -         sta SPRITE_FLAGS, x
196b: a2 10     -         ldx #index
196d: bd 8b 16  -         lda SPRITE_FLAGS, x
1970: 05 c0     -         ora SPRITE_ENABLE_FLAG
1972: 9d 8b 16  -         sta SPRITE_FLAGS, x
1975: a2 11     -         ldx #index
1977: bd 8b 16  -         lda SPRITE_FLAGS, x
197a: 05 c0     -         ora SPRITE_ENABLE_FLAG
197c: 9d 8b 16  -         sta SPRITE_FLAGS, x
197f: a2 12     -         ldx #index
1981: bd 8b 16  -         lda SPRITE_FLAGS, x
1984: 05 c0     -         ora SPRITE_ENABLE_FLAG
1986: 9d 8b 16  -         sta SPRITE_FLAGS, x
1989: a2 13     -         ldx #index
198b: bd 8b 16  -         lda SPRITE_FLAGS, x
198e: 05 c0     -         ora SPRITE_ENABLE_FLAG
1990: 9d 8b 16  -         sta SPRITE_FLAGS, x
1993: a2 14     -         ldx #index
1995: bd 8b 16  -         lda SPRITE_FLAGS, x
1998: 05 c0     -         ora SPRITE_ENABLE_FLAG
199a: 9d 8b 16  -         sta SPRITE_FLAGS, x
199d: a2 15     -         ldx #index
199f: bd 8b 16  -         lda SPRITE_FLAGS, x
19a2: 05 c0     -         ora SPRITE_ENABLE_FLAG
19a4: 9d 8b 16  -         sta SPRITE_FLAGS, x
19a7: a2 16     -         ldx #index
19a9: bd 8b 16  -         lda SPRITE_FLAGS, x
19ac: 05 c0     -         ora SPRITE_ENABLE_FLAG
19ae: 9d 8b 16  -         sta SPRITE_FLAGS, x
19b1: a2 17     -         ldx #index
19b3: bd 8b 16  -         lda SPRITE_FLAGS, x
19b6: 05 c0     -         ora SPRITE_ENABLE_FLAG
19b8: 9d 8b 16  -         sta SPRITE_FLAGS, x
19bb: a9 8b     -         lda #<data
19bd: 8d 15 d0  -         sta DIS00
19c0: a9 16     -         lda #>data
19c2: 8d 16 d0  -         sta DIS01
19c5: a9 20     -         lda #count                 // Set number of sprites
19c7: 8d 17 d0  -         sta DIS02
19ca: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
19cc: 8d 14 d0  -         sta DISCMD              //                                          
19cf: ad 13 d0  -         lda DISCR               // Load Display command register
19d2: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
19d4: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
19d7: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
19da: 30 fb     -         bmi !wait-              // No! Let's wait
19dc: 60        -         rts
19dd: a9 2a     - init_alien_animation:lda #<sprite
19df: 8d 8b 17  -         sta target+frame
19e2: a9 11     -         lda #>sprite
19e4: 8d 8f 17  -         sta target+frame+4
19e7: a9 3a     -         lda #<sprite
19e9: 8d 8c 17  -         sta target+frame
19ec: a9 11     -         lda #>sprite
19ee: 8d 90 17  -         sta target+frame+4
19f1: a9 2a     -         lda #<sprite
19f3: 8d 8d 17  -         sta target+frame
19f6: a9 11     -         lda #>sprite
19f8: 8d 91 17  -         sta target+frame+4
19fb: a9 4a     -         lda #<sprite
19fd: 8d 8e 17  -         sta target+frame
1a00: a9 11     -         lda #>sprite
1a02: 8d 92 17  -         sta target+frame+4
1a05: a9 5a     -         lda #<sprite
1a07: 8d 93 17  -         sta target+frame
1a0a: a9 11     -         lda #>sprite
1a0c: 8d 97 17  -         sta target+frame+4
1a0f: a9 6a     -         lda #<sprite
1a11: 8d 94 17  -         sta target+frame
1a14: a9 11     -         lda #>sprite
1a16: 8d 98 17  -         sta target+frame+4
1a19: a9 5a     -         lda #<sprite
1a1b: 8d 95 17  -         sta target+frame
1a1e: a9 11     -         lda #>sprite
1a20: 8d 99 17  -         sta target+frame+4
1a23: a9 7a     -         lda #<sprite
1a25: 8d 96 17  -         sta target+frame
1a28: a9 11     -         lda #>sprite
1a2a: 8d 9a 17  -         sta target+frame+4
1a2d: 60        -         rts
1a2e: a2 04     - find_next_invisible_bullet:ldx #(BULLET_COUNT-1)
1a30: bd aa 1a  -         lda ALIEN_BULLETS_STAT,x 
1a33: 30 09     -         bmi !next+ // Visible. Next.
1a35: 09 80     -         ora #BULLET_ENABLE_FLAG
1a37: 9d aa 1a  -         sta ALIEN_BULLETS_STAT,x
1a3a: 38        -         sec // Set carry flag (inicating we found a slot)
1a3b: 4c 42 1a  -         jmp !end+
1a3e: ca        -         dex
1a3f: 10 ef     -         bpl !loop-
1a41: 18        -         clc // Clear carry to indicate, we didn't found a free slot.
1a42: 60        -         rts
1a43: 20 4d 1a  - update_alien_bullets:jsr move_bullets
1a46: 20 62 1a  -         jsr check_bullets
1a49: 20 7c 1a  -         jsr draw_bullets
1a4c: 60        -         rts
1a4d: a2 05     - move_bullets:ldx #(BULLET_COUNT)
1a4f: bd aa 1a  -         lda ALIEN_BULLETS_STAT,x
1a52: 10 0a     -         bpl !next+
1a54: bd b4 1a  -         lda ALIEN_BULLETS_Y,x 
1a57: 18        -         clc 
1a58: 7d b9 1a  -         adc ALIEN_BULLETS_SPEED,x
1a5b: 9d b4 1a  -         sta ALIEN_BULLETS_Y,x
1a5e: ca        -         dex
1a5f: 10 ee     -         bpl !loop- 
1a61: 60        -         rts
1a62: a2 04     - check_bullets:ldx #(BULLET_COUNT-1)
1a64: bd aa 1a  -         lda ALIEN_BULLETS_STAT,x
1a67: 10 0f     -         bpl !next+
1a69: bd b4 1a  -         lda ALIEN_BULLETS_Y,x
1a6c: c9 aa     -         cmp #BULLET_MAX_HEIGHT    // if ypos > BULLET_MAX_HEIGHT hide bullet 
1a6e: 30 08     -         bmi !next+
1a70: bd aa 1a  - hide_bullet:lda ALIEN_BULLETS_STAT,x 
1a73: 29 7f     -         and #(~BULLET_ENABLE_FLAG)
1a75: 9d aa 1a  -         sta ALIEN_BULLETS_STAT,x
1a78: ca        -         dex
1a79: 10 e9     -         bpl !loop-
1a7b: 60        -         rts
1a7c: a9 00     - draw_bullets:lda #0
1a7e: 8d 16 d0  -         sta DIS01                   // xpos high
1a81: a9 04     -         lda #BULLET_LENGTH          // Length Low
1a83: 8d 18 d0  -         sta DIS03
1a86: a9 00     -         lda #0                      // Length High
1a88: 8d 19 d0  -         sta DIS04   
1a8b: a9 17     -         lda #BULLET_COLOR           // Color
1a8d: 8d 1a d0  -         sta DIS05
1a90: a2 04     -         ldx #(BULLET_COUNT-1)
1a92: bd aa 1a  -         lda ALIEN_BULLETS_STAT,x 
1a95: 10 0f     -         bpl !next+                  // If bit 7 is set (also negative), the
1a97: bd af 1a  -         lda ALIEN_BULLETS_X,x       // X-Pos low
1a9a: 8d 15 d0  -         sta DIS00
1a9d: bd b4 1a  -         lda ALIEN_BULLETS_Y,x 
1aa0: 8d 17 d0  -         sta DIS02                   // ypos 
1aa3: 20 cb e2  -         jsr GFX.draw_vertical_line_
1aa6: ca        -         dex 
1aa7: 10 e9     -         bpl !loop-
1aa9: 60        -         rts
1aaa: 04 04 04 04 04                                   - ALIEN_BULLETS_STAT:.fill BULLET_COUNT, $04  // Bit 0..3 length
1aaf: 00 00 00 00 00                                   - ALIEN_BULLETS_X:.fill BULLET_COUNT, $00  // xpos. If xpos > 255; stat bit 6 = 1
1ab4: 20 20 20 20 20                                   - ALIEN_BULLETS_Y:.fill BULLET_COUNT, $20  // ypos of the top
1ab9: 02 02 02 02 02                                   - ALIEN_BULLETS_SPEED:.fill BULLET_COUNT, $02

[Kernel Routines Entry Points]
e000: 4c cd e1  - get_key:jmp get_key_
e003: 4c d9 e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c f1 e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 65 e2  - print_char:jmp print_char_
e00c: 4c 2a e3  - draw_pixel:jmp GFX.draw_pixel_
e00f: 4c d5 e3  - draw_line:jmp GFX.draw_line_
e012: 4c b8 e2  - draw_hline:jmp GFX.draw_horizonal_line_ 
e015: 4c cb e2  - draw_vline:jmp GFX.draw_vertical_line_
e018: 4c f1 e2  - draw_rect:jmp GFX.draw_rect_
e01b: 4c 04 e3  - fill_rect:jmp GFX.fill_rect_
e01e: 4c 50 e3  - draw_circle:jmp GFX.draw_circle_
e021: 4c 63 e3  - fill_circle:jmp GFX.fill_circle_
e024: 4c 76 e3  - draw_triangle:jmp GFX.draw_triangle_
e027: 4c 89 e3  - fill_triangle:jmp GFX.fill_triangle_
e02a: 4c 9c e3  - draw_round_rect:jmp GFX.draw_round_rect_
e02d: 4c af e3  - fill_round_rect:jmp GFX.fill_round_rect_
e030: 4c e8 e3  - draw_char:jmp GFX.draw_char_

[Kernel Routines]
e100: 00 00 01 00 00 02 00 00 04 00 00 08              - BCD_LOOKUP_TABLE:.byte    $00, $00, $01, $00, $00, $02, $00, $00, $04, $00, $00, $08
e10c: 00 00 16 00 00 32 00 00 64 00 01 28              -         .byte    $00, $00, $16, $00, $00, $32, $00, $00, $64, $00, $01, $28
e118: 00 02 56 00 05 12 00 10 24 00 20 48              -         .byte    $00, $02, $56, $00, $05, $12, $00, $10, $24, $00, $20, $48
e124: 00 40 96 00 81 92 01 63 84 03 27 68              -         .byte    $00, $40, $96, $00, $81, $92, $01, $63, $84, $03, $27, $68
e130: 48        - byte_to_hex:pha                     // Save value to stack.
e131: 29 0f     -         and #%00001111
e133: 85 e0     -         sta zpRegE0             // store the lower nibble
e135: 68        -         pla                     // Load the original value
e136: 48        -         pha                     // and save it again
e137: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e138: 4a        -         lsr
e139: 4a        -         lsr
e13a: 4a        -         lsr
e13b: 85 e1     -         sta zpRegE1             // store the higher nibble
e13d: 68        -         pla                     // restore the accu
e13e: 60        -         rts
e13f: f8        - bcd_convert_word_:sed
e140: da        -         phx
e141: 48        -         pha
e142: a9 00     -         lda #0
e144: 85 e2     -         sta zpRegE2
e146: 85 e3     -         sta zpRegE3
e148: 85 e4     -         sta zpRegE4
e14a: a2 2d     -         ldx #$2d
e14c: 06 e0     -         asl zpRegE0 
e14e: 26 e1     -         rol zpRegE1
e150: 90 16     -         bcc htd1
e152: a5 e2     -         lda zpRegE2
e154: 18        -         clc 
e155: 7d 02 e1  -         adc BCD_LOOKUP_TABLE+2,x
e158: 85 e2     -         sta zpRegE2
e15a: a5 e3     -         lda zpRegE3
e15c: 7d 01 e1  -         adc BCD_LOOKUP_TABLE+1,x
e15f: 85 e3     -         sta zpRegE3
e161: a5 e4     -         lda zpRegE4
e163: 7d 00 e1  -         adc BCD_LOOKUP_TABLE,x
e166: 85 e4     -         sta zpRegE4
e168: ca        - htd1:   dex
e169: ca        -         dex 
e16a: ca        -         dex 
e16b: 10 df     -         bpl !loop- 
e16d: d8        -         cld
e16e: 68        -         pla
e16f: fa        -         plx 
e170: 60        -         rts
e171: a9 1f     - rand8,rand8b1-1:lda rand8b1:#31
e173: 0a        -         asl
e174: 49 35     - rand8a1-1:eor rand8a1:#53
e176: 8d 72 e1  -         sta rand8b1
e179: 6d 75 e1  -         adc rand8a1
e17c: 8d 75 e1  -         sta rand8a1
e17f: 60        -         rts
e180: 48        - set_seed:pha
e181: 29 d9     -         and #217
e183: 18        -         clc
e184: 69 0f     -         adc #<21263
e186: 8d 75 e1  -         sta rand8a1
e189: 68        -         pla
e18a: 29 26     -         and #255-217
e18c: 69 53     -         adc #>21263
e18e: 8d 72 e1  -         sta rand8b1
e191: 60        -         rts
e192: a5 e3     - compare_long:lda zpRegE3
e194: c5 e7     -         cmp zpRegE7
e196: d0 10     -         bne exit 
e198: a5 e2     -         lda zpRegE2
e19a: c5 e6     -         cmp zpRegE6
e19c: d0 0a     -         bne exit 
e19e: a5 e1     -         lda zpRegE1
e1a0: c5 e5     -         cmp zpRegE5
e1a2: d0 04     -         bne exit 
e1a4: a5 e0     -         lda zpRegE0
e1a6: c5 e4     -         cmp zpRegE4
e1a8: 60        - exit:   rts
e1a9: a5 e0     - convert565:lda zpRegE0             // red value
e1ab: 0a        -         asl                     // shift three to the left as we
e1ac: 0a        -         asl                     // need to move the lower 5 bits of red
e1ad: 0a        -         asl                     // to the bits 7-5
e1ae: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e1b0: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e1b2: 4a        -         lsr                     // lower bits of the output highbyte
e1b3: 4a        -         lsr
e1b4: 4a        -         lsr
e1b5: 29 07     -         and #%00000111          // Only the lower three bits.
e1b7: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e1b9: 85 e0     -         sta zpRegE0             // Store the final high byte
e1bb: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e1bd: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e1be: 0a        -         asl                     // it with zeros
e1bf: 0a        -         asl
e1c0: 0a        -         asl
e1c1: 0a        -         asl
e1c2: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e1c4: a5 e2     -         lda zpRegE2             // Load blue
e1c6: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e1c8: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e1ca: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e1cc: 60        -         rts
e1cd: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e1d0: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e1d2: 29 70     -         and #KEY_MOD_MASK
e1d4: aa        -         tax                     // Save modifiers
e1d5: ad 10 d0  -         lda KBD                 // Current key code to accu
e1d8: 60        -         rts                     // Return
e1d9: 48        - set_cursor_x_:pha                     // Save accu
e1da: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1dd: a9 03     -         lda #CMD_SET_CURSOR_X
e1df: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e1e2: ad 13 d0  -         lda DISCR
e1e5: 09 80     -         ora #$80
e1e7: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1ea: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1ed: 30 fb     -         bmi !wait-              // No! Let's wait
e1ef: 68        -         pla                     // Restore input parameter in accu
e1f0: 60        -         rts                     // Return
e1f1: 48        - set_cursor_y_:pha                     // Save accu
e1f2: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1f5: a9 04     -         lda #CMD_SET_CURSOR_Y
e1f7: 8d 14 d0  -         sta DISCMD
e1fa: ad 13 d0  -         lda DISCR
e1fd: 09 80     -         ora #$80
e1ff: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e202: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e205: 30 fb     -         bmi !wait-              // No! Let's wait
e207: 68        -         pla                     // Restore input parameter in accu
e208: 60        -         rts                     // Return
e209: 48        - set_fg_color_:pha                     // Save accu
e20a: 8d 15 d0  -         sta DIS00              // Save the color to the 
e20d: a9 07     -         lda #CMD_SET_FG_COLOR
e20f: 8d 14 d0  -         sta DISCMD
e212: ad 13 d0  -         lda DISCR
e215: 09 80     -         ora #$80
e217: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e21a: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e21d: 30 fb     -         bmi !wait-              // No! Let's wait
e21f: 68        -         pla                     // Restore input parameter in accu
e220: 60        -         rts                     // Return
e221: 48        - set_bg_color_:pha                     // Save accu
e222: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e225: a9 08     -         lda #CMD_SET_BG_COLOR
e227: 8d 14 d0  -         sta DISCMD
e22a: ad 13 d0  -         lda DISCR
e22d: 09 80     -         ora #$80
e22f: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e232: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e235: 30 fb     -         bmi !wait-              // No! Let's wait
e237: 68        -         pla                     // Restore input parameter in accu
e238: 60        -         rts                     // Return
e239: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e23b: 8d 14 d0  -         sta DISCMD
e23e: ad 13 d0  -         lda DISCR
e241: 09 80     -         ora #$80
e243: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e246: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e249: 30 fb     -         bmi !wait-              // No! Let's wait
e24b: ad 15 d0  -         lda DIS00
e24e: 60        -         rts                     // Return
e24f: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e251: 8d 14 d0  -         sta DISCMD
e254: ad 13 d0  -         lda DISCR
e257: 09 80     -         ora #$80
e259: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e25c: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e25f: 30 fb     -         bmi !wait-              // No! Let's wait
e261: ad 15 d0  -         lda DIS00
e264: 60        -         rts                     // Return
e265: 48        - print_char_:pha                     // Save accu
e266: 8d 15 d0  -         sta DIS00              // Save the char to the 
e269: a9 0d     -         lda #CMD_WRITE_CHAR
e26b: 8d 14 d0  -         sta DISCMD
e26e: ad 13 d0  -         lda DISCR
e271: 09 80     -         ora #$80
e273: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e276: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e279: 30 fb     -         bmi !wait-              // No! Let's wait
e27b: 68        -         pla                     // Restore input parameter in accu
e27c: 60        -         rts                     // Return
e27d: 8c 91 e2  - print_text_:sty (!end+)+1       // Save y register
e280: 8d 93 e2  -         sta (!end+)+3
e283: a0 00     -         ldy #0              // Index for the char within the string
e285: b1 e0     -         lda (zpRegE0),y     // load character
e287: f0 07     -         beq !end+
e289: 20 65 e2  -         jsr print_char_
e28c: c8        -         iny
e28d: 4c 85 e2  -         jmp !next-
e290: a0 00     -         ldy #0
e292: a9 00     -         lda #0
e294: 60        -         rts
e295: 48        - print_hex_:pha
e296: a9 00     -         lda #<hex_chars
e298: 85 e0     -         sta zpRegE0
e29a: a9 f0     -         lda #>hex_chars
e29c: 85 e1     -         sta zpRegE1
e29e: 68        -         pla
e29f: 48        -         pha
e2a0: 4a        -         lsr
e2a1: 4a        -         lsr
e2a2: 4a        -         lsr
e2a3: 4a        -         lsr
e2a4: 29 0f     -         and #$0f
e2a6: a8        -         tay
e2a7: b1 e0     -         lda (zpRegE0),y
e2a9: 20 65 e2  -         jsr print_char_
e2ac: 68        -         pla
e2ad: 48        -         pha
e2ae: 29 0f     -         and #$0f
e2b0: a8        -         tay
e2b1: b1 e0     -         lda (zpRegE0),y
e2b3: 20 65 e2  -         jsr print_char_
e2b6: 68        -         pla
e2b7: 60        -         rts
e2b8: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e2ba: 8d 14 d0  -         sta DISCMD
e2bd: ad 13 d0  -         lda DISCR
e2c0: 09 80     -         ora #$80
e2c2: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2c5: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2c8: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2ca: 60        -         rts
e2cb: a9 16     - draw_vertical_line_:lda #CMD_DRAW_VLINE
e2cd: 8d 14 d0  -         sta DISCMD
e2d0: ad 13 d0  -         lda DISCR
e2d3: 09 80     -         ora #$80
e2d5: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2d8: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2db: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2dd: 60        -         rts
e2de: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e2e0: 8d 14 d0  -         sta DISCMD
e2e3: ad 13 d0  -         lda DISCR
e2e6: 09 80     -         ora #$80
e2e8: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2eb: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e2ee: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e2f0: 60        -         rts
e2f1: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e2f3: 8d 14 d0  -         sta DISCMD
e2f6: ad 13 d0  -         lda DISCR
e2f9: 09 80     -         ora #$80
e2fb: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2fe: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e301: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e303: 60        -         rts
e304: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e306: 8d 14 d0  -         sta DISCMD
e309: ad 13 d0  -         lda DISCR
e30c: 09 80     -         ora #$80
e30e: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e311: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e314: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e316: 60        -         rts
e317: a9 1e     - draw_sprites_:lda #CMD_DrawSprites
e319: 8d 14 d0  -         sta DISCMD
e31c: ad 13 d0  -         lda DISCR
e31f: 09 80     -         ora #$80
e321: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e324: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e327: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e329: 60        -         rts
e32a: a9 20     - draw_pixel_:lda #CMD_DRAW_PIXEL
e32c: 8d 14 d0  -         sta DISCMD
e32f: ad 13 d0  -         lda DISCR
e332: 09 80     -         ora #$80
e334: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e337: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e33a: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e33c: 60        -         rts
e33d: a9 1f     - draw_bitmap_:lda #CMD_DRAW_BITMAP
e33f: 8d 14 d0  -         sta DISCMD
e342: ad 13 d0  -         lda DISCR
e345: 09 80     -         ora #$80
e347: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e34a: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e34d: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e34f: 60        -         rts
e350: a9 1c     - draw_circle_:lda #CMD_DRAW_CIRCLE
e352: 8d 14 d0  -         sta DISCMD
e355: ad 13 d0  -         lda DISCR
e358: 09 80     -         ora #$80
e35a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e35d: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e360: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e362: 60        -         rts
e363: a9 1d     - fill_circle_:lda #CMD_FILL_CIRCLE
e365: 8d 14 d0  -         sta DISCMD
e368: ad 13 d0  -         lda DISCR
e36b: 09 80     -         ora #$80
e36d: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e370: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e373: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e375: 60        -         rts
e376: a9 21     - draw_triangle_:lda #CMD_DRAW_TRIANGLE
e378: 8d 14 d0  -         sta DISCMD
e37b: ad 13 d0  -         lda DISCR
e37e: 09 80     -         ora #$80
e380: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e383: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e386: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e388: 60        -         rts
e389: a9 22     - fill_triangle_:lda #CMD_FILL_TRIANGLE
e38b: 8d 14 d0  -         sta DISCMD
e38e: ad 13 d0  -         lda DISCR
e391: 09 80     -         ora #$80
e393: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e396: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e399: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e39b: 60        -         rts
e39c: a9 23     - draw_round_rect_:lda #CMD_DRAW_ROUND_RECT
e39e: 8d 14 d0  -         sta DISCMD
e3a1: ad 13 d0  -         lda DISCR
e3a4: 09 80     -         ora #$80
e3a6: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3a9: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3ac: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3ae: 60        -         rts
e3af: a9 24     - fill_round_rect_:lda #CMD_FILL_ROUND_RECT
e3b1: 8d 14 d0  -         sta DISCMD
e3b4: ad 13 d0  -         lda DISCR
e3b7: 09 80     -         ora #$80
e3b9: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3bc: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3bf: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3c1: 60        -         rts
e3c2: a9 0e     - fill_screen_:lda #CMD_FILL_SCREEN
e3c4: 8d 14 d0  -         sta DISCMD
e3c7: ad 13 d0  -         lda DISCR
e3ca: 09 80     -         ora #$80
e3cc: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3cf: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3d2: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3d4: 60        -         rts
e3d5: a9 14     - draw_line_:lda #CMD_DRAW_LINE 
e3d7: 8d 14 d0  -         sta DISCMD
e3da: ad 13 d0  -         lda DISCR
e3dd: 09 80     -         ora #$80
e3df: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3e2: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3e5: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3e7: 60        -         rts
e3e8: a9 25     - draw_char_:lda #CMD_DRAW_CHAR
e3ea: 8d 14 d0  -         sta DISCMD
e3ed: ad 13 d0  -         lda DISCR
e3f0: 09 80     -         ora #$80
e3f2: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3f5: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e3f8: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e3fa: 60        -         rts
e3fb: a9 30     - get_clock_cycle:lda #CMD_GET_CLOCK_CYCLE
e3fd: 8d 14 d0  -         sta DISCMD
e400: ad 13 d0  -         lda DISCR
e403: 09 80     -         ora #$80
e405: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e408: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e40b: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e40d: 60        -         rts
e40e: a9 31     - get_millis:lda #CMD_GET_MILLIS
e410: 8d 14 d0  -         sta DISCMD
e413: ad 13 d0  -         lda DISCR
e416: 09 80     -         ora #$80
e418: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e41b: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e41e: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e420: 60        -         rts
e421: a9 32     - get_frame_time:lda #CMD_GET_FRAME_TIME
e423: 8d 14 d0  -         sta DISCMD
e426: ad 13 d0  -         lda DISCR
e429: 09 80     -         ora #$80
e42b: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e42e: 2c 13 d0  -         bit DISCR               // Check, if the excecution/irg flag is cleared
e431: 30 fb     -         bmi !wait_for_ready-    // No! Let's wait
e433: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 4e 45 2f 4f 53 20 76 30 2e 32 20 62 79 20 46 69  - msg_01: .text "NE/OS v0.2 by FirstKlaas 2023"
f020: 72 73 74 4b 6c 61 61 73 20 32 30 32 33          
f02d: 00        -         .byte 0
f02e: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 46 69 72  - welcome:.text "NE/OS v0.1 - FirstKlaas Experience"
f03e: 73 74 4b 6c 61 61 73 20 45 78 70 65 72 69 65 6e 
f04e: 63 65                                           
f050: 00        -         .byte 0
f051: 46 52 41 4d 45 3a                                - txt_frame:.text "FRAME:"
f057: 00        -         .byte 0
f058: 4c 45 56 45 4c                                   - txt_level:.text "LEVEL"
f05d: 00        -         .byte 0
f05e: 53 43 4f 52 45                                   - txt_score:.text "SCORE"
f063: 00        -         .byte 0
f064: 31 20 20 4c 6f 61 64 20 70 72 6f 67 72 61 6d     - txt_menue_1:.text "1  Load program"
f073: 00        -         .byte 0
f074: 32 20 20 50 6c 61 79 20 53 70 61 63 65 20 49 6e  - txt_menue_2:.text "2  Play Space Invaders"
f084: 76 61 64 65 72 73                               
f08a: 00        -         .byte 0
