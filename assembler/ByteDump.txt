******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: ad 13 d0  -         lda DISCR   // Set the auto adjust 
0806: 09 0c     -         ora #$0C    // and wrap flag
0808: 8d 13 d0  -         sta DISCR                
080b: a9 29     -         lda #color 
080d: 8d 15 d0  -         sta DIS00
0810: 20 bb e3  -         jsr fill_screen_
0813: a9 2e     -         lda #color
0815: 20 02 e2  -         jsr set_fg_color_
0818: a9 02     -         lda #xpos
081a: 20 d2 e1  -         jsr set_cursor_x_
081d: a9 01     -         lda #ypos
081f: 20 ea e1  -         jsr set_cursor_y_    
0822: a9 a0     -         lda #<addr
0824: 85 e0     -         sta zpRegE0
0826: a9 09     -         lda #>addr
0828: 85 e1     -         sta zpRegE1
082a: 20 76 e2  -         jsr print_text_
082d: a9 1f     -         lda #color
082f: 20 02 e2  -         jsr set_fg_color_
0832: a9 0a     -         lda #xpos
0834: 20 d2 e1  -         jsr set_cursor_x_
0837: a9 0a     -         lda #ypos
0839: 20 ea e1  -         jsr set_cursor_y_    
083c: a9 d6     -         lda #<addr
083e: 85 e0     -         sta zpRegE0
0840: a9 09     -         lda #>addr
0842: 85 e1     -         sta zpRegE1
0844: 20 76 e2  -         jsr print_text_
0847: a9 0a     -         lda #xpos
0849: 20 d2 e1  -         jsr set_cursor_x_
084c: a9 0c     -         lda #ypos
084e: 20 ea e1  -         jsr set_cursor_y_    
0851: a9 e7     -         lda #<addr
0853: 85 e0     -         sta zpRegE0
0855: a9 09     -         lda #>addr
0857: 85 e1     -         sta zpRegE1
0859: 20 76 e2  -         jsr print_text_
085c: a9 83     -         lda #<label
085e: 8d fa ff  -         sta $fffa 
0861: a9 08     -         lda #>label
0863: 8d fb ff  -         sta $fffb
0866: a9 83     -         lda #<label
0868: 8d fe ff  -         sta $fffe 
086b: a9 08     -         lda #>label
086d: 8d ff ff  -         sta $ffff
0870: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0872: 8d 0d dc  -         sta $dc0d
0875: ad 82 08  - endless:lda PROGRAM_ADR_CR
0878: 10 fb     -         bpl endless
087a: 4c 3f 12  -         jmp SpaceInvaders.init
087d: 4c 7d 08  -         jmp *
0880: 00        - PROGRAM_ADR_LO:.byte 0
0881: 00        - PROGRAM_ADR_HI:.byte 0
0882: 00        - PROGRAM_ADR_CR:.byte 0
0883: 48        - test_isr:pha
0884: da        -         phx
0885: 5a        -         phy
0886: a9 ee     -         lda #$ee 
0888: 8d ff d0  -         sta DEBUG
088b: ad 0d dc  -         lda REG_CIA_ICR
088e: 48        -         pha
088f: a9 00     -         lda #xlo
0891: 8d 15 d0  -         sta DIS00
0894: a9 00     -         lda #xhi 
0896: 8d 16 d0  -         sta DIS01
0899: a9 b0     -         lda #y 
089b: 8d 17 d0  -         sta DIS02
089e: a9 00     -         lda #width_lo 
08a0: 8d 18 d0  -         sta DIS03
08a3: a9 64     -         lda #width_hi
08a5: 8d 19 d0  -         sta DIS04
08a8: a9 18     -         lda #height
08aa: 8d 1a d0  -         sta DIS05
08ad: a9 04     -         lda #col 
08af: 8d 1b d0  -         sta DIS06
08b2: 20 fd e2  -         jsr fill_rect_
08b5: 68        -         pla 
08b6: a9 09     -         lda #xpos
08b8: 20 d2 e1  -         jsr set_cursor_x_
08bb: a9 17     -         lda #ypos
08bd: 20 ea e1  -         jsr set_cursor_y_    
08c0: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
08c3: 8d 30 e1  -         sta HTD_IN
08c6: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
08c9: 8d 31 e1  -         sta HTD_IN+1
08cc: 20 68 e1  -         jsr bcd_convert_word_
08cf: ad 34 e1  -         lda HTD_OUT+2
08d2: 20 8e e2  -         jsr print_hex_
08d5: ad 33 e1  -         lda HTD_OUT+1
08d8: 20 8e e2  -         jsr print_hex_
08db: ad 32 e1  -         lda HTD_OUT
08de: 20 8e e2  -         jsr print_hex_
08e1: a9 02     -         lda #xpos
08e3: 20 d2 e1  -         jsr set_cursor_x_
08e6: a9 1a     -         lda #ypos
08e8: 20 ea e1  -         jsr set_cursor_y_    
08eb: a9 c3     -         lda #<addr
08ed: 85 e0     -         sta zpRegE0
08ef: a9 09     -         lda #>addr
08f1: 85 e1     -         sta zpRegE1
08f3: 20 76 e2  -         jsr print_text_
08f6: ce 1a 09  -         dec GAME_COUNTDOWN
08f9: d0 05     -         bne exit
08fb: a9 80     -         lda #$80
08fd: 8d 82 08  -         sta PROGRAM_ADR_CR
0900: 7a        - exit:   ply 
0901: fa        -         plx 
0902: 68        -         pla 
0903: 40        -         rti
0904: a9 f0     - setup_timer:lda #$f0
0906: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
0909: a9 00     -         lda #$00
090b: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
090e: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
0910: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
0913: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
0915: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0918: 60        -         rts
0919: 00        - IRQ_DATA:.byte $00
091a: ff        - GAME_COUNTDOWN:.byte $ff
091b: 48        - kernel_isr:pha
091c: da        -         phx
091d: 5a        -         phy
091e: a9 55     -         lda #code
0920: 8d ff d0  -         sta DEBUG
0923: ad 0d dc  -         lda $dc0d            // Acknowledge the IRQ
0926: ce 1a 09  -         dec GAME_COUNTDOWN
0929: d0 4a     -         bne exit
092b: a9 80     -         lda #$80
092d: 8d 82 08  -         sta PROGRAM_ADR_CR
0930: 4c 75 09  -         jmp exit
0933: 8d 19 09  - start_isr:sta IRQ_DATA
0936: 8d ff d0  -         sta DEBUG
0939: a9 04     - test_frame_irq:lda #FRAME_INTERRUPT_FLAG
093b: 2c 19 09  -         bit IRQ_DATA
093e: f0 08     -         beq test_keyboard
0940: a9 66     -         lda #code
0942: 8d ff d0  -         sta DEBUG
0945: 4c 75 09  -         jmp exit
0948: a9 08     - test_keyboard:lda #KBD_INTERRUPT_FLAG
094a: 2c 19 09  -         bit IRQ_DATA
094d: f0 0b     -         beq test_timer_a 
094f: a9 77     -         lda #code
0951: 8d ff d0  -         sta DEBUG
0954: 20 79 09  -         jsr handle_key_event
0957: 4c 75 09  -         jmp exit
095a: a9 01     - test_timer_a:lda #TIMER_A_INTERRUPT_FLAG
095c: 2c 19 09  -         bit IRQ_DATA
095f: f0 08     -         beq test_timer_b
0961: a9 88     -         lda #code
0963: 8d ff d0  -         sta DEBUG
0966: 4c 75 09  -         jmp exit
0969: a9 02     - test_timer_b:lda #TIMER_B_INTERRUPT_FLAG
096b: 2c 19 09  -         bit IRQ_DATA
096e: f0 05     -         beq exit
0970: a9 99     -         lda #code
0972: 8d ff d0  -         sta DEBUG
0975: 7a        - exit:   ply 
0976: fa        -         plx 
0977: 68        -         pla 
0978: 40        -         rti
0979: ad 10 d0  - handle_key_event:lda KBD
097c: c9 32     -         cmp #$32    // Key 2
097e: d0 1f     -         bne exit
0980: a9 ea     -         lda #code
0982: 8d ff d0  -         sta DEBUG
0985: a9 7f     -         lda #CIA_IRQ_MASK
0987: 8d 0d dc  -         sta REG_CIA_ICR
098a: a9 20     -         lda #color 
098c: 8d 15 d0  -         sta DIS00
098f: 20 bb e3  -         jsr fill_screen_
0992: a9 3f     -         lda #color 
0994: 8d 15 d0  -         sta DIS00
0997: 20 bb e3  -         jsr fill_screen_
099a: a9 80     -         lda #$80
099c: 8d 82 08  -         sta PROGRAM_ADR_CR
099f: 60        - exit:   rts
09a0: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 46 69 72  - welcome:.text "NE/OS v0.1 - FirstKlaas Experience"
09b0: 73 74 4b 6c 61 61 73 20 45 78 70 65 72 69 65 6e 
09c0: 63 65                                           
09c2: 00        -         .byte 0
09c3: 46 52 41 4d 45 3a                                - txt_frame:.text "FRAME:"
09c9: 00        -         .byte 0
09ca: 4c 45 56 45 4c                                   - txt_level:.text "LEVEL"
09cf: 00        -         .byte 0
09d0: 53 43 4f 52 45                                   - txt_score:.text "SCORE"
09d5: 00        -         .byte 0
09d6: 5b 31 5d 20 4c 6f 61 64 20 70 72 6f 67 72 61 6d  - txt_menue_1:.text "[1] Load program"
09e6: 00        -         .byte 0
09e7: 5b 32 5d 20 50 6c 61 79 20 53 70 61 63 65 20 49  - txt_menue_2:.text "[2] Play Space Invaders"
09f7: 6e 76 61 64 65 72 73                            
09fe: 00        -         .byte 0

[Space Invaders]
1000: 04        - shot_delay:.byte $04
1001: 48        - main_isr:pha
1002: da        -         phx 
1003: 5a        -         phy 
1004: a9 29     -         lda #color 
1006: 8d 15 d0  -         sta DIS00
1009: 20 bb e3  -         jsr fill_screen_
100c: 48        -         pha
100d: a9 05     -         lda #xlo
100f: 8d 15 d0  -         sta DIS00
1012: a9 00     -         lda #xhi 
1014: 8d 16 d0  -         sta DIS01
1017: a9 14     -         lda #y 
1019: 8d 17 d0  -         sta DIS02
101c: a9 fa     -         lda #width_lo 
101e: 8d 18 d0  -         sta DIS03
1021: a9 00     -         lda #width_hi
1023: 8d 19 d0  -         sta DIS04
1026: a9 a0     -         lda #height
1028: 8d 1a d0  -         sta DIS05
102b: a9 37     -         lda #col 
102d: 8d 1b d0  -         sta DIS06
1030: 20 fd e2  -         jsr fill_rect_
1033: 68        -         pla 
1034: a5 05     -         lda ALIEN_ANIM_FRAME_LO
1036: 18        -         clc
1037: 69 40     -         adc #%01000000
1039: 85 05     -         sta ALIEN_ANIM_FRAME_LO
103b: a5 06     -         lda ALIEN_ANIM_FRAME_HI
103d: 69 00     -         adc #00
103f: 29 03     -         and #3
1041: 85 06     -         sta ALIEN_ANIM_FRAME_HI
1043: 20 7a 12  -         jsr SpaceInvaders.animate_aliens
1046: 20 10 e3  -         jsr draw_sprites_
1049: 48        -         pha
104a: a9 05     -         lda #xlo
104c: 8d 15 d0  -         sta DIS00
104f: a9 00     -         lda #xhi 
1051: 8d 16 d0  -         sta DIS01
1054: a9 b4     -         lda #y 
1056: 8d 17 d0  -         sta DIS02
1059: a9 fa     -         lda #width_lo 
105b: 8d 18 d0  -         sta DIS03
105e: a9 00     -         lda #width_hi
1060: 8d 19 d0  -         sta DIS04
1063: a9 3c     -         lda #height
1065: 8d 1a d0  -         sta DIS05
1068: a9 2a     -         lda #col 
106a: 8d 1b d0  -         sta DIS06
106d: 20 fd e2  -         jsr fill_rect_
1070: 68        -         pla 
1071: 48        -         pha
1072: a9 05     -         lda #xlo
1074: 8d 15 d0  -         sta DIS00
1077: a9 00     -         lda #xhi 
1079: 8d 16 d0  -         sta DIS01
107c: a9 14     -         lda #y 
107e: 8d 17 d0  -         sta DIS02
1081: a9 fa     -         lda #width_lo 
1083: 8d 18 d0  -         sta DIS03
1086: a9 00     -         lda #width_hi
1088: 8d 19 d0  -         sta DIS04
108b: a9 a0     -         lda #height
108d: 8d 1a d0  -         sta DIS05
1090: a9 17     -         lda #col 
1092: 8d 1b d0  -         sta DIS06
1095: 20 ea e2  -         jsr draw_rect_
1098: 68        -         pla 
1099: a9 2b     -         lda #color
109b: 20 02 e2  -         jsr set_fg_color_
109e: a9 02     -         lda #xpos
10a0: 20 d2 e1  -         jsr set_cursor_x_
10a3: a9 1a     -         lda #ypos
10a5: 20 ea e1  -         jsr set_cursor_y_    
10a8: a9 c3     -         lda #<addr
10aa: 85 e0     -         sta zpRegE0
10ac: a9 09     -         lda #>addr
10ae: 85 e1     -         sta zpRegE1
10b0: 20 76 e2  -         jsr print_text_
10b3: a9 09     -         lda #xpos
10b5: 20 d2 e1  -         jsr set_cursor_x_
10b8: a9 17     -         lda #ypos
10ba: 20 ea e1  -         jsr set_cursor_y_    
10bd: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
10c0: 8d 30 e1  -         sta HTD_IN
10c3: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
10c6: 8d 31 e1  -         sta HTD_IN+1
10c9: 20 68 e1  -         jsr bcd_convert_word_
10cc: ad 34 e1  -         lda HTD_OUT+2
10cf: 20 8e e2  -         jsr print_hex_
10d2: ad 33 e1  -         lda HTD_OUT+1
10d5: 20 8e e2  -         jsr print_hex_
10d8: ad 32 e1  -         lda HTD_OUT
10db: 20 8e e2  -         jsr print_hex_
10de: a9 02     -         lda #xpos
10e0: 20 d2 e1  -         jsr set_cursor_x_
10e3: a9 17     -         lda #ypos
10e5: 20 ea e1  -         jsr set_cursor_y_    
10e8: a9 ca     -         lda #<addr
10ea: 85 e0     -         sta zpRegE0
10ec: a9 09     -         lda #>addr
10ee: 85 e1     -         sta zpRegE1
10f0: 20 76 e2  -         jsr print_text_
10f3: a9 02     -         lda #xpos
10f5: 20 d2 e1  -         jsr set_cursor_x_
10f8: a9 18     -         lda #ypos
10fa: 20 ea e1  -         jsr set_cursor_y_    
10fd: a9 d0     -         lda #<addr
10ff: 85 e0     -         sta zpRegE0
1101: a9 09     -         lda #>addr
1103: 85 e1     -         sta zpRegE1
1105: 20 76 e2  -         jsr print_text_
1108: a9 09     -         lda #xpos
110a: 20 d2 e1  -         jsr set_cursor_x_
110d: a9 18     -         lda #ypos
110f: 20 ea e1  -         jsr set_cursor_y_    
1112: a5 02     -         lda SCORE_LO       
1114: 8d 30 e1  -         sta HTD_IN
1117: a5 03     -         lda SCORE_HI       
1119: 8d 31 e1  -         sta HTD_IN+1
111c: 20 68 e1  -         jsr bcd_convert_word_
111f: ad 34 e1  -         lda HTD_OUT+2
1122: 20 8e e2  -         jsr print_hex_
1125: ad 33 e1  -         lda HTD_OUT+1
1128: 20 8e e2  -         jsr print_hex_
112b: ad 32 e1  -         lda HTD_OUT
112e: 20 8e e2  -         jsr print_hex_
1131: ce 00 10  -         dec shot_delay      // Shot delay countdown
1134: d0 27     -         bne draw_bullets    // Still positive. No Shot
1136: 20 a5 e1  -         jsr rand8           // New delay in frames ( 0..255)
1139: 29 07     -         and #7
113b: 69 07     -         adc #7              // Increase to at least 7 frames. 
113d: 8d 00 10  -         sta shot_delay      // Store new delay
1140: 20 e4 16  -         jsr find_next_invisible_bullet
1143: 90 18     -         bcc draw_bullets    // We couln't find any free slot. So just draw.    
1145: 20 a5 e1  -         jsr rand8  // Random value to accu
1148: 29 0f     -         and #15    // One of the first sixteen aliens
114a: a8        -         tay        // Using y as alien index
114b: b9 79 13  -         lda SPRITE_XPOS,y
114e: 18        -         clc
114f: 69 08     -         adc #8
1151: 9d 65 17  -         sta ALIEN_BULLETS_X,x
1154: b9 99 13  -         lda SPRITE_YPOS,y
1157: 18        -         clc
1158: 69 04     -         adc #4
115a: 9d 6a 17  -         sta ALIEN_BULLETS_Y,x
115d: 20 f9 16  - draw_bullets:jsr update_alien_bullets
1160: ad 79 13  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
1163: c9 0a     -         cmp #10             // 10 is the minimum x position
1165: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
1167: a9 01     - left_underflow:lda #$01
1169: 8d b8 11  -         sta operation+1
116c: 4c 7b 11  -         jmp go_down 
116f: ad 80 13  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
1172: c9 ef     -         cmp #$ef            // Max xpos = 239
1174: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
1176: a9 ff     - right_overflow:lda #$ff            // By adding -1, we move left.
1178: 8d b8 11  -         sta operation+1     // Write the new speed to the code (self modified)    
117b: ad 99 13  - go_down:lda SPRITE_YPOS
117e: c9 96     -         cmp #150
1180: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
1182: a0 07     - reset_ypos:ldy #7
1184: a9 20     -         lda #$20              // Start Y position
1186: 99 99 13  -         sta SPRITE_YPOS,y 
1189: 88        -         dey
118a: 10 fa     -         bpl !loop-
118c: a0 07     -         ldy #7
118e: a9 30     -         lda #$30              // Start Y position
1190: 99 a1 13  -         sta SPRITE_YPOS+8,y 
1193: 88        -         dey
1194: 10 fa     -         bpl !loop-
1196: a0 07     -         ldy #7
1198: a9 40     -         lda #$40              // Start Y position
119a: 99 a9 13  -         sta SPRITE_YPOS+16,y 
119d: 88        -         dey
119e: 10 fa     -         bpl !loop-
11a0: 4c b1 11  -         jmp move
11a3: a0 17     - decrease:ldy #23             // Calculate position fpr 24 sprites
11a5: b9 99 13  -         lda SPRITE_YPOS,y 
11a8: 18        -         clc
11a9: 69 04     -         adc #4
11ab: 99 99 13  -         sta SPRITE_YPOS,y 
11ae: 88        -         dey
11af: 10 f4     -         bpl !loop-
11b1: a0 07     - move:   ldy #7               // Y is the sprite index. We have 8 sprites in a row 
11b3: b9 79 13  -         lda SPRITE_XPOS,y    // Load current x position of the sprite   
11b6: 18        -         clc
11b7: 69 01     - operation:adc #1               // Add the speed
11b9: 99 79 13  -         sta SPRITE_XPOS,y    // save the new xpos 
11bc: 99 81 13  -         sta SPRITE_XPOS+8,y  // Also for the second row
11bf: 99 89 13  -         sta SPRITE_XPOS+16,y // Also for the second row
11c2: 88        -         dey
11c3: 10 ee     -         bpl !loop-
11c5: ad 0d dc  - exit:   lda $dc0d            // Acknowledge the IRQ            
11c8: 7a        -         ply
11c9: fa        -         plx  
11ca: 68        -         pla
11cb: 40        -         rti
11cc: 60        - move_aliens_down:rts
11cd: 48        - dummy_isr:pha
11ce: da        -         phx
11cf: 5a        -         phy
11d0: 48        -         pha
11d1: a9 00     -         lda #xlo
11d3: 8d 15 d0  -         sta DIS00
11d6: a9 00     -         lda #xhi 
11d8: 8d 16 d0  -         sta DIS01
11db: a9 b0     -         lda #y 
11dd: 8d 17 d0  -         sta DIS02
11e0: a9 00     -         lda #width_lo 
11e2: 8d 18 d0  -         sta DIS03
11e5: a9 64     -         lda #width_hi
11e7: 8d 19 d0  -         sta DIS04
11ea: a9 18     -         lda #height
11ec: 8d 1a d0  -         sta DIS05
11ef: a9 04     -         lda #col 
11f1: 8d 1b d0  -         sta DIS06
11f4: 20 fd e2  -         jsr fill_rect_
11f7: 68        -         pla 
11f8: a9 09     -         lda #xpos
11fa: 20 d2 e1  -         jsr set_cursor_x_
11fd: a9 17     -         lda #ypos
11ff: 20 ea e1  -         jsr set_cursor_y_    
1202: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
1205: 8d 30 e1  -         sta HTD_IN
1208: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
120b: 8d 31 e1  -         sta HTD_IN+1
120e: 20 68 e1  -         jsr bcd_convert_word_
1211: ad 34 e1  -         lda HTD_OUT+2
1214: 20 8e e2  -         jsr print_hex_
1217: ad 33 e1  -         lda HTD_OUT+1
121a: 20 8e e2  -         jsr print_hex_
121d: ad 32 e1  -         lda HTD_OUT
1220: 20 8e e2  -         jsr print_hex_
1223: a9 02     -         lda #xpos
1225: 20 d2 e1  -         jsr set_cursor_x_
1228: a9 1a     -         lda #ypos
122a: 20 ea e1  -         jsr set_cursor_y_    
122d: a9 c3     -         lda #<addr
122f: 85 e0     -         sta zpRegE0
1231: a9 09     -         lda #>addr
1233: 85 e1     -         sta zpRegE1
1235: 20 76 e2  -         jsr print_text_
1238: ad 0d dc  -         lda REG_CIA_ICR
123b: 7a        -         ply 
123c: fa        -         plx 
123d: 68        -         pla 
123e: 40        -         rti
123f: a9 7f     - init:   lda #CIA_IRQ_MASK
1241: 8d 0d dc  -         sta REG_CIA_ICR
1244: a9 29     -         lda #color 
1246: 8d 15 d0  -         sta DIS00
1249: 20 bb e3  -         jsr fill_screen_
124c: 78        -         sei
124d: a9 01     -         lda #<label
124f: 8d fe ff  -         sta $fffe 
1252: a9 10     -         lda #>label
1254: 8d ff ff  -         sta $ffff
1257: a9 01     -         lda #<label
1259: 8d fa ff  -         sta $fffa 
125c: a9 10     -         lda #>label
125e: 8d fb ff  -         sta $fffb
1261: 58        -         cli
1262: 20 9b 16  -         jsr init_alien_animation
1265: 20 69 14  -         jsr initialize_sprite_definition_block
1268: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
126a: 8d 0d dc  -         sta $dc0d
126d: a9 ff     -         lda #code
126f: 8d ff d0  -         sta DEBUG
1272: 4c 72 12  -         jmp * // Loop endless instead of getting back.
1275: a9 fe     -         lda #code
1277: 8d ff d0  -         sta DEBUG
127a: a6 06     - animate_aliens:ldx ALIEN_ANIM_FRAME_HI
127c: bd 59 14  -         lda ALIEN_A_SPRITE_ANIMATION_LO,x
127f: 8d 19 14  -         sta SPRITE_DATA_LO+i    
1282: 8d 1a 14  -         sta SPRITE_DATA_LO+i    
1285: 8d 1b 14  -         sta SPRITE_DATA_LO+i    
1288: 8d 1c 14  -         sta SPRITE_DATA_LO+i    
128b: 8d 1d 14  -         sta SPRITE_DATA_LO+i    
128e: 8d 1e 14  -         sta SPRITE_DATA_LO+i    
1291: 8d 1f 14  -         sta SPRITE_DATA_LO+i    
1294: 8d 20 14  -         sta SPRITE_DATA_LO+i    
1297: bd 5d 14  -         lda ALIEN_A_SPRITE_ANIMATION_HI,x
129a: 8d 39 14  -         sta SPRITE_DATA_HI+i    
129d: 8d 3a 14  -         sta SPRITE_DATA_HI+i    
12a0: 8d 3b 14  -         sta SPRITE_DATA_HI+i    
12a3: 8d 3c 14  -         sta SPRITE_DATA_HI+i    
12a6: 8d 3d 14  -         sta SPRITE_DATA_HI+i    
12a9: 8d 3e 14  -         sta SPRITE_DATA_HI+i    
12ac: 8d 3f 14  -         sta SPRITE_DATA_HI+i    
12af: 8d 40 14  -         sta SPRITE_DATA_HI+i    
12b2: bd 61 14  -         lda ALIEN_B_SPRITE_ANIMATION_LO,x
12b5: 8d 21 14  -         sta SPRITE_DATA_LO+i    
12b8: 8d 22 14  -         sta SPRITE_DATA_LO+i    
12bb: 8d 23 14  -         sta SPRITE_DATA_LO+i    
12be: 8d 24 14  -         sta SPRITE_DATA_LO+i    
12c1: 8d 25 14  -         sta SPRITE_DATA_LO+i    
12c4: 8d 26 14  -         sta SPRITE_DATA_LO+i    
12c7: 8d 27 14  -         sta SPRITE_DATA_LO+i    
12ca: 8d 28 14  -         sta SPRITE_DATA_LO+i    
12cd: bd 65 14  -         lda ALIEN_B_SPRITE_ANIMATION_HI,x
12d0: 8d 41 14  -         sta SPRITE_DATA_HI+i    
12d3: 8d 42 14  -         sta SPRITE_DATA_HI+i    
12d6: 8d 43 14  -         sta SPRITE_DATA_HI+i    
12d9: 8d 44 14  -         sta SPRITE_DATA_HI+i    
12dc: 8d 45 14  -         sta SPRITE_DATA_HI+i    
12df: 8d 46 14  -         sta SPRITE_DATA_HI+i    
12e2: 8d 47 14  -         sta SPRITE_DATA_HI+i    
12e5: 8d 48 14  -         sta SPRITE_DATA_HI+i    
12e8: 60        -         rts
12e9: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
12eb: 07 e0     -         .byte %00000111, %11100000
12ed: 0f f0     -         .byte %00001111, %11110000
12ef: 1d b8     -         .byte %00011101, %10111000
12f1: 17 e8     -         .byte %00010111, %11101000
12f3: 17 e8     -         .byte %00010111, %11101000
12f5: 02 40     -         .byte %00000010, %01000000
12f7: 06 60     -         .byte %00000110, %01100000
12f9: 02 40     - SPACE_ALIEN_A1:.byte %00000010, %01000000
12fb: 07 e0     -         .byte %00000111, %11100000
12fd: 0f f0     -         .byte %00001111, %11110000
12ff: 1d b8     -         .byte %00011101, %10111000
1301: 17 e8     -         .byte %00010111, %11101000
1303: 07 c0     -         .byte %00000111, %11000000
1305: 02 60     -         .byte %00000010, %01100000
1307: 06 00     -         .byte %00000110, %00000000
1309: 02 40     - SPACE_ALIEN_A2:.byte %00000010, %01000000
130b: 07 e0     -         .byte %00000111, %11100000
130d: 0f f0     -         .byte %00001111, %11110000
130f: 1d b8     -         .byte %00011101, %10111000
1311: 17 e8     -         .byte %00010111, %11101000
1313: 03 e0     -         .byte %00000011, %11100000
1315: 06 40     -         .byte %00000110, %01000000
1317: 00 60     -         .byte %00000000, %01100000
1319: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
131b: 04 40     -         .byte %00000100, %01000000
131d: 03 80     -         .byte %00000011, %10000000
131f: 07 c0     -         .byte %00000111, %11000000
1321: 05 40     -         .byte %00000101, %01000000
1323: 07 c0     -         .byte %00000111, %11000000
1325: 0a a0     -         .byte %00001010, %10100000
1327: 0a a0     -         .byte %00001010, %10100000
1329: 00 00     - SPACE_ALIEN_B1:.byte %00000000, %00000000
132b: 04 40     -         .byte %00000100, %01000000
132d: 03 80     -         .byte %00000011, %10000000
132f: 07 c0     -         .byte %00000111, %11000000
1331: 05 40     -         .byte %00000101, %01000000
1333: 07 c0     -         .byte %00000111, %11000000
1335: 0a a0     -         .byte %00001010, %10100000
1337: 15 40     -         .byte %00010101, %01000000
1339: 00 00     - SPACE_ALIEN_B2:.byte %00000000, %00000000
133b: 04 40     -         .byte %00000100, %01000000
133d: 03 80     -         .byte %00000011, %10000000
133f: 07 c0     -         .byte %00000111, %11000000
1341: 05 40     -         .byte %00000101, %01000000
1343: 07 c0     -         .byte %00000111, %11000000
1345: 0a a0     -         .byte %00001010, %10100000
1347: 05 50     -         .byte %00000101, %01010000
1349: 00 00     - SPACE_ALIEN_C:.byte %00000000, %00000000
134b: 04 40     -         .byte %00000100, %01000000
134d: 0f e0     -         .byte %00001111, %11100000
134f: 19 30     -         .byte %00011001, %00110000
1351: 1f f0     -         .byte %00011111, %11110000
1353: 1f f0     -         .byte %00011111, %11110000
1355: 15 50     -         .byte %00010101, %01010000
1357: 0a a0     -         .byte %00001010, %10100000
1359: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
1361: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
1369: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 16-23
1371: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1379: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
1381: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
1389: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 16-23
1391: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1399: 20 20 20 20 20 20 20 20                          - SPRITE_YPOS:.byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 00-07
13a1: 30 30 30 30 30 30 30 30                          -         .byte $30, $30, $30, $30, $30, $30, $30, $30  // Sprite 08-15
13a9: 40 40 40 40 40 40 40 40                          -         .byte $40, $40, $40, $40, $40, $40, $40, $40  // Sprite 16-23
13b1: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
13b9: 1f 1f 1f 1f 1f 1f 1f 1f                          - SPRITE_COLOR:.byte $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f  // Sprite 00-07
13c1: 23 23 23 23 23 23 23 23                          -         .byte $23, $23, $23, $23, $23, $23, $23, $23  // Sprite 08-15
13c9: 2c 2c 2c 2c 2c 2c 2c 2c                          -         .byte $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2c  // Sprite 16-23
13d1: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
13d9: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
13e1: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
13e9: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 16-23
13f1: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
13f9: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
1401: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
1409: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 16-23
1411: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1419: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
1429: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
1439: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
1449: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
1459: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_LO:.fill 4, 0
145d: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_HI:.fill 4, 0
1461: 00 00 00 00                                      - ALIEN_B_SPRITE_ANIMATION_LO:.fill 4, 0
1465: 00 00 00 00                                      - ALIEN_B_SPRITE_ANIMATION_HI:.fill 4, 0
1469: a2 00     - initialize_sprite_definition_block:ldx #index
146b: a9 e9     -         lda #<address
146d: 9d 19 14  -         sta SPRITE_DATA_LO, x
1470: a9 12     -         lda #>address
1472: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1475: a2 08     -         ldx #index
1477: a9 19     -         lda #<address
1479: 9d 19 14  -         sta SPRITE_DATA_LO, x
147c: a9 13     -         lda #>address
147e: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1481: a2 10     -         ldx #index
1483: a9 49     -         lda #<address
1485: 9d 19 14  -         sta SPRITE_DATA_LO, x
1488: a9 13     -         lda #>address
148a: 9d 39 14  -         sta SPRITE_DATA_HI, x                
148d: a2 01     -         ldx #index
148f: a9 e9     -         lda #<address
1491: 9d 19 14  -         sta SPRITE_DATA_LO, x
1494: a9 12     -         lda #>address
1496: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1499: a2 09     -         ldx #index
149b: a9 19     -         lda #<address
149d: 9d 19 14  -         sta SPRITE_DATA_LO, x
14a0: a9 13     -         lda #>address
14a2: 9d 39 14  -         sta SPRITE_DATA_HI, x                
14a5: a2 11     -         ldx #index
14a7: a9 49     -         lda #<address
14a9: 9d 19 14  -         sta SPRITE_DATA_LO, x
14ac: a9 13     -         lda #>address
14ae: 9d 39 14  -         sta SPRITE_DATA_HI, x                
14b1: a2 02     -         ldx #index
14b3: a9 e9     -         lda #<address
14b5: 9d 19 14  -         sta SPRITE_DATA_LO, x
14b8: a9 12     -         lda #>address
14ba: 9d 39 14  -         sta SPRITE_DATA_HI, x                
14bd: a2 0a     -         ldx #index
14bf: a9 19     -         lda #<address
14c1: 9d 19 14  -         sta SPRITE_DATA_LO, x
14c4: a9 13     -         lda #>address
14c6: 9d 39 14  -         sta SPRITE_DATA_HI, x                
14c9: a2 12     -         ldx #index
14cb: a9 49     -         lda #<address
14cd: 9d 19 14  -         sta SPRITE_DATA_LO, x
14d0: a9 13     -         lda #>address
14d2: 9d 39 14  -         sta SPRITE_DATA_HI, x                
14d5: a2 03     -         ldx #index
14d7: a9 e9     -         lda #<address
14d9: 9d 19 14  -         sta SPRITE_DATA_LO, x
14dc: a9 12     -         lda #>address
14de: 9d 39 14  -         sta SPRITE_DATA_HI, x                
14e1: a2 0b     -         ldx #index
14e3: a9 19     -         lda #<address
14e5: 9d 19 14  -         sta SPRITE_DATA_LO, x
14e8: a9 13     -         lda #>address
14ea: 9d 39 14  -         sta SPRITE_DATA_HI, x                
14ed: a2 13     -         ldx #index
14ef: a9 49     -         lda #<address
14f1: 9d 19 14  -         sta SPRITE_DATA_LO, x
14f4: a9 13     -         lda #>address
14f6: 9d 39 14  -         sta SPRITE_DATA_HI, x                
14f9: a2 04     -         ldx #index
14fb: a9 e9     -         lda #<address
14fd: 9d 19 14  -         sta SPRITE_DATA_LO, x
1500: a9 12     -         lda #>address
1502: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1505: a2 0c     -         ldx #index
1507: a9 19     -         lda #<address
1509: 9d 19 14  -         sta SPRITE_DATA_LO, x
150c: a9 13     -         lda #>address
150e: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1511: a2 14     -         ldx #index
1513: a9 49     -         lda #<address
1515: 9d 19 14  -         sta SPRITE_DATA_LO, x
1518: a9 13     -         lda #>address
151a: 9d 39 14  -         sta SPRITE_DATA_HI, x                
151d: a2 05     -         ldx #index
151f: a9 e9     -         lda #<address
1521: 9d 19 14  -         sta SPRITE_DATA_LO, x
1524: a9 12     -         lda #>address
1526: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1529: a2 0d     -         ldx #index
152b: a9 19     -         lda #<address
152d: 9d 19 14  -         sta SPRITE_DATA_LO, x
1530: a9 13     -         lda #>address
1532: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1535: a2 15     -         ldx #index
1537: a9 49     -         lda #<address
1539: 9d 19 14  -         sta SPRITE_DATA_LO, x
153c: a9 13     -         lda #>address
153e: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1541: a2 06     -         ldx #index
1543: a9 e9     -         lda #<address
1545: 9d 19 14  -         sta SPRITE_DATA_LO, x
1548: a9 12     -         lda #>address
154a: 9d 39 14  -         sta SPRITE_DATA_HI, x                
154d: a2 0e     -         ldx #index
154f: a9 19     -         lda #<address
1551: 9d 19 14  -         sta SPRITE_DATA_LO, x
1554: a9 13     -         lda #>address
1556: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1559: a2 16     -         ldx #index
155b: a9 49     -         lda #<address
155d: 9d 19 14  -         sta SPRITE_DATA_LO, x
1560: a9 13     -         lda #>address
1562: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1565: a2 07     -         ldx #index
1567: a9 e9     -         lda #<address
1569: 9d 19 14  -         sta SPRITE_DATA_LO, x
156c: a9 12     -         lda #>address
156e: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1571: a2 0f     -         ldx #index
1573: a9 19     -         lda #<address
1575: 9d 19 14  -         sta SPRITE_DATA_LO, x
1578: a9 13     -         lda #>address
157a: 9d 39 14  -         sta SPRITE_DATA_HI, x                
157d: a2 17     -         ldx #index
157f: a9 49     -         lda #<address
1581: 9d 19 14  -         sta SPRITE_DATA_LO, x
1584: a9 13     -         lda #>address
1586: 9d 39 14  -         sta SPRITE_DATA_HI, x                
1589: a2 00     -         ldx #index
158b: bd 59 13  -         lda SPRITE_FLAGS, x
158e: 05 c0     -         ora SPRITE_ENABLE_FLAG
1590: 9d 59 13  -         sta SPRITE_FLAGS, x
1593: a2 01     -         ldx #index
1595: bd 59 13  -         lda SPRITE_FLAGS, x
1598: 05 c0     -         ora SPRITE_ENABLE_FLAG
159a: 9d 59 13  -         sta SPRITE_FLAGS, x
159d: a2 02     -         ldx #index
159f: bd 59 13  -         lda SPRITE_FLAGS, x
15a2: 05 c0     -         ora SPRITE_ENABLE_FLAG
15a4: 9d 59 13  -         sta SPRITE_FLAGS, x
15a7: a2 03     -         ldx #index
15a9: bd 59 13  -         lda SPRITE_FLAGS, x
15ac: 05 c0     -         ora SPRITE_ENABLE_FLAG
15ae: 9d 59 13  -         sta SPRITE_FLAGS, x
15b1: a2 04     -         ldx #index
15b3: bd 59 13  -         lda SPRITE_FLAGS, x
15b6: 05 c0     -         ora SPRITE_ENABLE_FLAG
15b8: 9d 59 13  -         sta SPRITE_FLAGS, x
15bb: a2 05     -         ldx #index
15bd: bd 59 13  -         lda SPRITE_FLAGS, x
15c0: 05 c0     -         ora SPRITE_ENABLE_FLAG
15c2: 9d 59 13  -         sta SPRITE_FLAGS, x
15c5: a2 06     -         ldx #index
15c7: bd 59 13  -         lda SPRITE_FLAGS, x
15ca: 05 c0     -         ora SPRITE_ENABLE_FLAG
15cc: 9d 59 13  -         sta SPRITE_FLAGS, x
15cf: a2 07     -         ldx #index
15d1: bd 59 13  -         lda SPRITE_FLAGS, x
15d4: 05 c0     -         ora SPRITE_ENABLE_FLAG
15d6: 9d 59 13  -         sta SPRITE_FLAGS, x
15d9: a2 08     -         ldx #index
15db: bd 59 13  -         lda SPRITE_FLAGS, x
15de: 05 c0     -         ora SPRITE_ENABLE_FLAG
15e0: 9d 59 13  -         sta SPRITE_FLAGS, x
15e3: a2 09     -         ldx #index
15e5: bd 59 13  -         lda SPRITE_FLAGS, x
15e8: 05 c0     -         ora SPRITE_ENABLE_FLAG
15ea: 9d 59 13  -         sta SPRITE_FLAGS, x
15ed: a2 0a     -         ldx #index
15ef: bd 59 13  -         lda SPRITE_FLAGS, x
15f2: 05 c0     -         ora SPRITE_ENABLE_FLAG
15f4: 9d 59 13  -         sta SPRITE_FLAGS, x
15f7: a2 0b     -         ldx #index
15f9: bd 59 13  -         lda SPRITE_FLAGS, x
15fc: 05 c0     -         ora SPRITE_ENABLE_FLAG
15fe: 9d 59 13  -         sta SPRITE_FLAGS, x
1601: a2 0c     -         ldx #index
1603: bd 59 13  -         lda SPRITE_FLAGS, x
1606: 05 c0     -         ora SPRITE_ENABLE_FLAG
1608: 9d 59 13  -         sta SPRITE_FLAGS, x
160b: a2 0d     -         ldx #index
160d: bd 59 13  -         lda SPRITE_FLAGS, x
1610: 05 c0     -         ora SPRITE_ENABLE_FLAG
1612: 9d 59 13  -         sta SPRITE_FLAGS, x
1615: a2 0e     -         ldx #index
1617: bd 59 13  -         lda SPRITE_FLAGS, x
161a: 05 c0     -         ora SPRITE_ENABLE_FLAG
161c: 9d 59 13  -         sta SPRITE_FLAGS, x
161f: a2 0f     -         ldx #index
1621: bd 59 13  -         lda SPRITE_FLAGS, x
1624: 05 c0     -         ora SPRITE_ENABLE_FLAG
1626: 9d 59 13  -         sta SPRITE_FLAGS, x
1629: a2 10     -         ldx #index
162b: bd 59 13  -         lda SPRITE_FLAGS, x
162e: 05 c0     -         ora SPRITE_ENABLE_FLAG
1630: 9d 59 13  -         sta SPRITE_FLAGS, x
1633: a2 11     -         ldx #index
1635: bd 59 13  -         lda SPRITE_FLAGS, x
1638: 05 c0     -         ora SPRITE_ENABLE_FLAG
163a: 9d 59 13  -         sta SPRITE_FLAGS, x
163d: a2 12     -         ldx #index
163f: bd 59 13  -         lda SPRITE_FLAGS, x
1642: 05 c0     -         ora SPRITE_ENABLE_FLAG
1644: 9d 59 13  -         sta SPRITE_FLAGS, x
1647: a2 13     -         ldx #index
1649: bd 59 13  -         lda SPRITE_FLAGS, x
164c: 05 c0     -         ora SPRITE_ENABLE_FLAG
164e: 9d 59 13  -         sta SPRITE_FLAGS, x
1651: a2 14     -         ldx #index
1653: bd 59 13  -         lda SPRITE_FLAGS, x
1656: 05 c0     -         ora SPRITE_ENABLE_FLAG
1658: 9d 59 13  -         sta SPRITE_FLAGS, x
165b: a2 15     -         ldx #index
165d: bd 59 13  -         lda SPRITE_FLAGS, x
1660: 05 c0     -         ora SPRITE_ENABLE_FLAG
1662: 9d 59 13  -         sta SPRITE_FLAGS, x
1665: a2 16     -         ldx #index
1667: bd 59 13  -         lda SPRITE_FLAGS, x
166a: 05 c0     -         ora SPRITE_ENABLE_FLAG
166c: 9d 59 13  -         sta SPRITE_FLAGS, x
166f: a2 17     -         ldx #index
1671: bd 59 13  -         lda SPRITE_FLAGS, x
1674: 05 c0     -         ora SPRITE_ENABLE_FLAG
1676: 9d 59 13  -         sta SPRITE_FLAGS, x
1679: a9 59     -         lda #<SPRITE_DEFINITON_BLOCK
167b: 8d 15 d0  -         sta DIS00
167e: a9 13     -         lda #>SPRITE_DEFINITON_BLOCK
1680: 8d 16 d0  -         sta DIS01
1683: a9 20     -         lda #32                 // Set number of sprites
1685: 8d 17 d0  -         sta DIS02
1688: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
168a: 8d 14 d0  -         sta DISCMD              //                                          
168d: ad 13 d0  -         lda DISCR               // Load Display command register
1690: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
1692: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
1695: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
1698: 30 fb     -         bmi !wait-              // No! Let's wait
169a: 60        -         rts
169b: a9 e9     - init_alien_animation:lda #<SPACE_ALIEN_A
169d: 8d 59 14  -         sta ALIEN_A_SPRITE_ANIMATION_LO
16a0: 8d 5b 14  -         sta ALIEN_A_SPRITE_ANIMATION_LO+2
16a3: a9 12     -         lda #>SPACE_ALIEN_A
16a5: 8d 5d 14  -         sta ALIEN_A_SPRITE_ANIMATION_HI
16a8: 8d 5f 14  -         sta ALIEN_A_SPRITE_ANIMATION_HI+2
16ab: a9 f9     -         lda #<SPACE_ALIEN_A1
16ad: 8d 5a 14  -         sta ALIEN_A_SPRITE_ANIMATION_LO+1
16b0: a9 12     -         lda #>SPACE_ALIEN_A1
16b2: 8d 5e 14  -         sta ALIEN_A_SPRITE_ANIMATION_HI+1
16b5: a9 09     -         lda #<SPACE_ALIEN_A2
16b7: 8d 5c 14  -         sta ALIEN_A_SPRITE_ANIMATION_LO+3
16ba: a9 13     -         lda #>SPACE_ALIEN_A2
16bc: 8d 60 14  -         sta ALIEN_A_SPRITE_ANIMATION_HI+3
16bf: a9 19     -         lda #<SPACE_ALIEN_B
16c1: 8d 61 14  -         sta ALIEN_B_SPRITE_ANIMATION_LO
16c4: 8d 63 14  -         sta ALIEN_B_SPRITE_ANIMATION_LO+2
16c7: a9 13     -         lda #>SPACE_ALIEN_B
16c9: 8d 65 14  -         sta ALIEN_B_SPRITE_ANIMATION_HI
16cc: 8d 67 14  -         sta ALIEN_B_SPRITE_ANIMATION_HI+2
16cf: a9 29     -         lda #<SPACE_ALIEN_B1
16d1: 8d 62 14  -         sta ALIEN_B_SPRITE_ANIMATION_LO+1
16d4: a9 13     -         lda #>SPACE_ALIEN_B1
16d6: 8d 66 14  -         sta ALIEN_B_SPRITE_ANIMATION_HI+1
16d9: a9 39     -         lda #<SPACE_ALIEN_B2
16db: 8d 64 14  -         sta ALIEN_B_SPRITE_ANIMATION_LO+3
16de: a9 13     -         lda #>SPACE_ALIEN_B2
16e0: 8d 68 14  -         sta ALIEN_B_SPRITE_ANIMATION_HI+3
16e3: 60        -         rts
16e4: a2 04     - find_next_invisible_bullet:ldx #(BULLET_COUNT-1)
16e6: bd 60 17  -         lda ALIEN_BULLETS_STAT,x 
16e9: 30 09     -         bmi !next+ // Visible. Next.
16eb: 09 80     -         ora #BULLET_ENABLE_FLAG
16ed: 9d 60 17  -         sta ALIEN_BULLETS_STAT,x
16f0: 38        -         sec // Set carry flag (inicating we found a slot)
16f1: 4c f8 16  -         jmp !end+
16f4: ca        -         dex
16f5: 10 ef     -         bpl !loop-
16f7: 18        -         clc // Clear carry to indicate, we didn't found a free slot.
16f8: 60        -         rts
16f9: 20 03 17  - update_alien_bullets:jsr move_bullets
16fc: 20 18 17  -         jsr check_bullets
16ff: 20 32 17  -         jsr draw_bullets
1702: 60        -         rts
1703: a2 05     - move_bullets:ldx #(BULLET_COUNT)
1705: bd 60 17  -         lda ALIEN_BULLETS_STAT,x
1708: 10 0a     -         bpl !next+
170a: bd 6a 17  -         lda ALIEN_BULLETS_Y,x 
170d: 18        -         clc 
170e: 7d 6f 17  -         adc ALIEN_BULLETS_SPEED,x
1711: 9d 6a 17  -         sta ALIEN_BULLETS_Y,x
1714: ca        -         dex
1715: 10 ee     -         bpl !loop- 
1717: 60        -         rts
1718: a2 04     - check_bullets:ldx #(BULLET_COUNT-1)
171a: bd 60 17  -         lda ALIEN_BULLETS_STAT,x
171d: 10 0f     -         bpl !next+
171f: bd 6a 17  -         lda ALIEN_BULLETS_Y,x
1722: c9 aa     -         cmp #BULLET_MAX_HEIGHT    // if ypos > BULLET_MAX_HEIGHT hide bullet 
1724: 30 08     -         bmi !next+
1726: bd 60 17  - hide_bullet:lda ALIEN_BULLETS_STAT,x 
1729: 29 7f     -         and #(~BULLET_ENABLE_FLAG)
172b: 9d 60 17  -         sta ALIEN_BULLETS_STAT,x
172e: ca        -         dex
172f: 10 e9     -         bpl !loop-
1731: 60        -         rts
1732: a9 00     - draw_bullets:lda #0
1734: 8d 16 d0  -         sta DIS01                   // xpos high
1737: a9 04     -         lda #BULLET_LENGTH          // Length Low
1739: 8d 18 d0  -         sta DIS03
173c: a9 00     -         lda #0                      // Length High
173e: 8d 19 d0  -         sta DIS04   
1741: a9 17     -         lda #BULLET_COLOR           // Color
1743: 8d 1a d0  -         sta DIS05
1746: a2 04     -         ldx #(BULLET_COUNT-1)
1748: bd 60 17  -         lda ALIEN_BULLETS_STAT,x 
174b: 10 0f     -         bpl !next+
174d: bd 65 17  -         lda ALIEN_BULLETS_X,x       // X-Pos low
1750: 8d 15 d0  -         sta DIS00
1753: bd 6a 17  -         lda ALIEN_BULLETS_Y,x 
1756: 8d 17 d0  -         sta DIS02                   // ypos 
1759: 20 c4 e2  -         jsr draw_vertical_line_
175c: ca        -         dex 
175d: 10 e9     -         bpl !loop-
175f: 60        -         rts
1760: 04 04 04 04 04                                   - ALIEN_BULLETS_STAT:.fill BULLET_COUNT, $04  // Bit 0..3 length
1765: 00 00 00 00 00                                   - ALIEN_BULLETS_X:.fill BULLET_COUNT, $00  // xpos. If xpos > 255; stat bit 6 = 1
176a: 20 20 20 20 20                                   - ALIEN_BULLETS_Y:.fill BULLET_COUNT, $20  // ypos of the top
176f: 02 02 02 02 02                                   - ALIEN_BULLETS_SPEED:.fill BULLET_COUNT, $02

[Kernel Routines Entry Points]
e000: 4c c6 e1  - get_key:jmp get_key_
e003: 4c d2 e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c ea e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 5e e2  - print_char:jmp print_char_

[Kernel Routines]
e100: 00 00 01 00 00 02 00 00 04 00 00 08              - BCD_LOOKUP_TABLE:.byte    $00, $00, $01, $00, $00, $02, $00, $00, $04, $00, $00, $08
e10c: 00 00 16 00 00 32 00 00 64 00 01 28              -         .byte    $00, $00, $16, $00, $00, $32, $00, $00, $64, $00, $01, $28
e118: 00 02 56 00 05 12 00 10 24 00 20 48              -         .byte    $00, $02, $56, $00, $05, $12, $00, $10, $24, $00, $20, $48
e124: 00 40 96 00 81 92 01 63 84 03 27 68              -         .byte    $00, $40, $96, $00, $81, $92, $01, $63, $84, $03, $27, $68
e130: 00 00     - HTD_IN: .byte $00, $00
e132: 00 00 00  - HTD_OUT:.byte $00, $00, $00 
e135: a5 e0     - convert565:lda zpRegE0             // red value
e137: 0a        -         asl                     // shift three to the left as we
e138: 0a        -         asl                     // need to move the lower 5 bits of red
e139: 0a        -         asl                     // to the bits 7-5
e13a: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e13c: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e13e: 4a        -         lsr                     // lower bits of the output highbyte
e13f: 4a        -         lsr
e140: 4a        -         lsr
e141: 29 07     -         and #%00000111          // Only the lower three bits.
e143: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e145: 85 e0     -         sta zpRegE0             // Store the final high byte
e147: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e149: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e14a: 0a        -         asl                     // it with zeros
e14b: 0a        -         asl
e14c: 0a        -         asl
e14d: 0a        -         asl
e14e: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e150: a5 e2     -         lda zpRegE2             // Load blue
e152: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e154: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e156: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e158: 60        -         rts
e159: 48        - byte_to_hex:pha                     // Save value to stack.
e15a: 29 0f     -         and #%00001111
e15c: 85 e0     -         sta zpRegE0             // store the lower nibble
e15e: 68        -         pla                     // Load the original value
e15f: 48        -         pha                     // and save it again
e160: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e161: 4a        -         lsr
e162: 4a        -         lsr
e163: 4a        -         lsr
e164: 85 e1     -         sta zpRegE1             // store the higher nibble
e166: 68        -         pla                     // restore the accu
e167: 60        -         rts
e168: f8        - bcd_convert_word_:sed
e169: da        -         phx
e16a: 48        -         pha
e16b: a9 00     -         lda #0
e16d: 8d 32 e1  -         sta HTD_OUT
e170: 8d 33 e1  -         sta HTD_OUT+1
e173: 8d 34 e1  -         sta HTD_OUT+2
e176: a2 2d     -         ldx #$2d
e178: 0e 30 e1  -         asl HTD_IN 
e17b: 2e 31 e1  -         rol HTD_IN+1
e17e: 90 1c     -         bcc htd1
e180: ad 32 e1  -         lda HTD_OUT
e183: 18        -         clc 
e184: 7d 02 e1  -         adc BCD_LOOKUP_TABLE+2,x
e187: 8d 32 e1  -         sta HTD_OUT
e18a: ad 33 e1  -         lda HTD_OUT+1
e18d: 7d 01 e1  -         adc BCD_LOOKUP_TABLE+1,x
e190: 8d 33 e1  -         sta HTD_OUT+1
e193: ad 34 e1  -         lda HTD_OUT+2
e196: 7d 00 e1  -         adc BCD_LOOKUP_TABLE,x
e199: 8d 34 e1  -         sta HTD_OUT+2
e19c: ca        - htd1:   dex
e19d: ca        -         dex 
e19e: ca        -         dex 
e19f: 10 d7     -         bpl !loop- 
e1a1: d8        -         cld
e1a2: 68        -         pla
e1a3: fa        -         plx 
e1a4: 60        -         rts
e1a5: a9 1f     - rand8,rand8b1-1:lda rand8b1:#31
e1a7: 0a        -         asl
e1a8: 49 35     - rand8a1-1:eor rand8a1:#53
e1aa: 8d a6 e1  -         sta rand8b1
e1ad: 6d a9 e1  -         adc rand8a1
e1b0: 8d a9 e1  -         sta rand8a1
e1b3: 60        -         rts
e1b4: 48        - set_seed:pha
e1b5: 29 d9     -         and #217
e1b7: 18        -         clc
e1b8: 69 0f     -         adc #<21263
e1ba: 8d a9 e1  -         sta rand8a1
e1bd: 68        -         pla
e1be: 29 26     -         and #255-217
e1c0: 69 53     -         adc #>21263
e1c2: 8d a6 e1  -         sta rand8b1
e1c5: 60        -         rts
e1c6: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e1c9: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e1cb: 29 70     -         and #KEY_MOD_MASK
e1cd: aa        -         tax                     // Save modifiers
e1ce: ad 10 d0  -         lda KBD                 // Current key code to accu
e1d1: 60        -         rts                     // Return
e1d2: 48        - set_cursor_x_:pha                     // Save accu
e1d3: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1d6: a9 03     -         lda #CMD_SET_CURSOR_X
e1d8: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e1db: ad 13 d0  -         lda DISCR
e1de: 09 80     -         ora #$80
e1e0: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1e3: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1e6: 30 fb     -         bmi !wait-              // No! Let's wait
e1e8: 68        -         pla                     // Restore input parameter in accu
e1e9: 60        -         rts                     // Return
e1ea: 48        - set_cursor_y_:pha                     // Save accu
e1eb: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1ee: a9 04     -         lda #CMD_SET_CURSOR_Y
e1f0: 8d 14 d0  -         sta DISCMD
e1f3: ad 13 d0  -         lda DISCR
e1f6: 09 80     -         ora #$80
e1f8: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1fb: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1fe: 30 fb     -         bmi !wait-              // No! Let's wait
e200: 68        -         pla                     // Restore input parameter in accu
e201: 60        -         rts                     // Return
e202: 48        - set_fg_color_:pha                     // Save accu
e203: 8d 15 d0  -         sta DIS00              // Save the color to the 
e206: a9 07     -         lda #CMD_SET_FG_COLOR
e208: 8d 14 d0  -         sta DISCMD
e20b: ad 13 d0  -         lda DISCR
e20e: 09 80     -         ora #$80
e210: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e213: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e216: 30 fb     -         bmi !wait-              // No! Let's wait
e218: 68        -         pla                     // Restore input parameter in accu
e219: 60        -         rts                     // Return
e21a: 48        - set_bg_color_:pha                     // Save accu
e21b: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e21e: a9 08     -         lda #CMD_SET_BG_COLOR
e220: 8d 14 d0  -         sta DISCMD
e223: ad 13 d0  -         lda DISCR
e226: 09 80     -         ora #$80
e228: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e22b: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e22e: 30 fb     -         bmi !wait-              // No! Let's wait
e230: 68        -         pla                     // Restore input parameter in accu
e231: 60        -         rts                     // Return
e232: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e234: 8d 14 d0  -         sta DISCMD
e237: ad 13 d0  -         lda DISCR
e23a: 09 80     -         ora #$80
e23c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e23f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e242: 30 fb     -         bmi !wait-              // No! Let's wait
e244: ad 15 d0  -         lda DIS00
e247: 60        -         rts                     // Return
e248: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e24a: 8d 14 d0  -         sta DISCMD
e24d: ad 13 d0  -         lda DISCR
e250: 09 80     -         ora #$80
e252: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e255: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e258: 30 fb     -         bmi !wait-              // No! Let's wait
e25a: ad 15 d0  -         lda DIS00
e25d: 60        -         rts                     // Return
e25e: 48        - print_char_:pha                     // Save accu
e25f: 8d 15 d0  -         sta DIS00              // Save the char to the 
e262: a9 0d     -         lda #CMD_WRITE_CHAR
e264: 8d 14 d0  -         sta DISCMD
e267: ad 13 d0  -         lda DISCR
e26a: 09 80     -         ora #$80
e26c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e26f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e272: 30 fb     -         bmi !wait-              // No! Let's wait
e274: 68        -         pla                     // Restore input parameter in accu
e275: 60        -         rts                     // Return
e276: 8c 8a e2  - print_text_:sty (!end+)+1       // Save y register
e279: 8d 8c e2  -         sta (!end+)+3
e27c: a0 00     -         ldy #0              // Index for the char within the string
e27e: b1 e0     -         lda (zpRegE0),y     // load character
e280: f0 07     -         beq !end+
e282: 20 5e e2  -         jsr print_char_
e285: c8        -         iny
e286: 4c 7e e2  -         jmp !next-
e289: a0 00     -         ldy #0
e28b: a9 00     -         lda #0
e28d: 60        -         rts
e28e: 48        - print_hex_:pha
e28f: a9 00     -         lda #<hex_chars
e291: 85 e0     -         sta zpRegE0
e293: a9 f0     -         lda #>hex_chars
e295: 85 e1     -         sta zpRegE1
e297: 68        -         pla
e298: 48        -         pha
e299: 4a        -         lsr
e29a: 4a        -         lsr
e29b: 4a        -         lsr
e29c: 4a        -         lsr
e29d: 29 0f     -         and #$0f
e29f: a8        -         tay
e2a0: b1 e0     -         lda (zpRegE0),y
e2a2: 20 5e e2  -         jsr print_char_
e2a5: 68        -         pla
e2a6: 48        -         pha
e2a7: 29 0f     -         and #$0f
e2a9: a8        -         tay
e2aa: b1 e0     -         lda (zpRegE0),y
e2ac: 20 5e e2  -         jsr print_char_
e2af: 68        -         pla
e2b0: 60        -         rts
e2b1: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e2b3: 8d 14 d0  -         sta DISCMD
e2b6: ad 13 d0  -         lda DISCR
e2b9: 09 80     -         ora #$80
e2bb: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2be: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2c1: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2c3: 60        -         rts
e2c4: a9 16     - draw_vertical_line_:lda #CMD_DRAW_VLINE
e2c6: 8d 14 d0  -         sta DISCMD
e2c9: ad 13 d0  -         lda DISCR
e2cc: 09 80     -         ora #$80
e2ce: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2d1: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2d4: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2d6: 60        -         rts
e2d7: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e2d9: 8d 14 d0  -         sta DISCMD
e2dc: ad 13 d0  -         lda DISCR
e2df: 09 80     -         ora #$80
e2e1: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2e4: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2e7: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2e9: 60        -         rts
e2ea: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e2ec: 8d 14 d0  -         sta DISCMD
e2ef: ad 13 d0  -         lda DISCR
e2f2: 09 80     -         ora #$80
e2f4: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2f7: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2fa: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2fc: 60        -         rts
e2fd: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e2ff: 8d 14 d0  -         sta DISCMD
e302: ad 13 d0  -         lda DISCR
e305: 09 80     -         ora #$80
e307: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e30a: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e30d: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e30f: 60        -         rts
e310: a9 1e     - draw_sprites_:lda #CMD_DRAW_SPRITES
e312: 8d 14 d0  -         sta DISCMD
e315: ad 13 d0  -         lda DISCR
e318: 09 80     -         ora #$80
e31a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e31d: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e320: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e322: 60        -         rts
e323: a9 20     - draw_pixel_:lda #CMD_DRAW_PIXEL
e325: 8d 14 d0  -         sta DISCMD
e328: ad 13 d0  -         lda DISCR
e32b: 09 80     -         ora #$80
e32d: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e330: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e333: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e335: 60        -         rts
e336: a9 1f     - draw_bitmap_:lda #CMD_DRAW_BITMAP
e338: 8d 14 d0  -         sta DISCMD
e33b: ad 13 d0  -         lda DISCR
e33e: 09 80     -         ora #$80
e340: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e343: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e346: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e348: 60        -         rts
e349: a9 1c     - draw_circle_:lda #CMD_DRAW_CIRCLE
e34b: 8d 14 d0  -         sta DISCMD
e34e: ad 13 d0  -         lda DISCR
e351: 09 80     -         ora #$80
e353: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e356: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e359: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e35b: 60        -         rts
e35c: a9 1d     - fill_circle_:lda #CMD_FILL_CIRCLE
e35e: 8d 14 d0  -         sta DISCMD
e361: ad 13 d0  -         lda DISCR
e364: 09 80     -         ora #$80
e366: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e369: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e36c: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e36e: 60        -         rts
e36f: a9 21     - draw_triangle_:lda #CMD_DRAW_TRIANGLE
e371: 8d 14 d0  -         sta DISCMD
e374: ad 13 d0  -         lda DISCR
e377: 09 80     -         ora #$80
e379: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e37c: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e37f: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e381: 60        -         rts
e382: a9 22     - fill_triangle_:lda #CMD_FILL_TRIANGLE
e384: 8d 14 d0  -         sta DISCMD
e387: ad 13 d0  -         lda DISCR
e38a: 09 80     -         ora #$80
e38c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e38f: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e392: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e394: 60        -         rts
e395: a9 23     - draw_round_rect_:lda #CMD_DRAW_ROUND_RECT
e397: 8d 14 d0  -         sta DISCMD
e39a: ad 13 d0  -         lda DISCR
e39d: 09 80     -         ora #$80
e39f: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3a2: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e3a5: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e3a7: 60        -         rts
e3a8: a9 24     - fill_round_rect_:lda #CMD_FILL_ROUND_RECT
e3aa: 8d 14 d0  -         sta DISCMD
e3ad: ad 13 d0  -         lda DISCR
e3b0: 09 80     -         ora #$80
e3b2: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3b5: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e3b8: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e3ba: 60        -         rts
e3bb: a9 0e     - fill_screen_:lda #CMD_FILL_SCREEN
e3bd: 8d 14 d0  -         sta DISCMD
e3c0: ad 13 d0  -         lda DISCR
e3c3: 09 80     -         ora #$80
e3c5: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3c8: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e3cb: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e3cd: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 57 65 6c 63 6f 6d 65 20 74 6f 20 46 69 72 73 74  - msg_01: .text "Welcome to FirstKlaas OS v0.1"
f020: 4b 6c 61 61 73 20 4f 53 20 76 30 2e 31          
