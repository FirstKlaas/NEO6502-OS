******************************* Segment: Default *******************************
[Main Program]
0800: a2 ff     - start:  ldx #$ff    // Set the stackpointer to
0802: 9a        -         txs         // highest possible position.
0803: 20 c4 11  -         jsr SpaceInvaders.init
0806: ad 13 d0  -         lda DISCR   // Set the auto adjust 
0809: 09 0c     -         ora #$0C    // and wrap flag
080b: 8d 13 d0  -         sta DISCR                
080e: a9 84     -         lda #(CIA_SET_FLAGS | FRAME_INTERRUPT_FLAG)
0810: 8d 0d dc  -         sta $dc0d
0813: a9 20     -         lda #color
0815: 20 02 e2  -         jsr set_fg_color_
0818: a9 02     -         lda #xpos
081a: 20 d2 e1  -         jsr set_cursor_x_
081d: a9 01     -         lda #ypos
081f: 20 ea e1  -         jsr set_cursor_y_    
0822: a9 45     -         lda #<addr
0824: 85 e0     -         sta zpRegE0
0826: a9 08     -         lda #>addr
0828: 85 e1     -         sta zpRegE1
082a: 20 76 e2  -         jsr print_text_
082d: 4c 2d 08  -         jmp !end-
0830: a9 f0     - setup_timer:lda #$f0
0832: 8d 05 dc  -         sta $dc05       // Set hi-byte of timer A latch
0835: a9 00     -         lda #$00
0837: 8d 04 dc  -         sta $dc04       // Set low-byte of timer A latch
083a: a9 81     -         lda #$81        // Bit 0: Timer A / Bit 7: Set bits
083c: 8d 0d dc  -         sta $dc0d       // Enable timer A interrupt
083f: a9 11     -         lda #%00010001  // Bit 4: 1 = Load values from latch
0841: 8d 0e dc  -         sta $dc0e       // Load values and start timer
0844: 60        -         rts
0845: 4e 45 2f 4f 53 20 76 30 2e 31 20 2d 20 46 69 72  - welcome:.text "NE/OS v0.1 - FirstKlaas Experience"
0855: 73 74 4b 6c 61 61 73 20 45 78 70 65 72 69 65 6e 
0865: 63 65                                           
0867: 00        -         .byte 0
0868: 46 52 41 4d 45 3a                                - txt_frame:.text "FRAME:"
086e: 00        -         .byte 0
086f: 4c 45 56 45 4c                                   - txt_level:.text "LEVEL"
0874: 00        -         .byte 0
0875: 53 43 4f 52 45                                   - txt_score:.text "SCORE"
087a: 00        -         .byte 0

[Space Invaders]
1000: 04        - shot_delay:.byte $04
1001: 48        - main_isr:pha
1002: da        -         phx 
1003: 5a        -         phy 
1004: 48        -         pha
1005: a9 05     -         lda #xlo
1007: 8d 15 d0  -         sta DIS00
100a: a9 00     -         lda #xhi 
100c: 8d 16 d0  -         sta DIS01
100f: a9 14     -         lda #y 
1011: 8d 17 d0  -         sta DIS02
1014: a9 fa     -         lda #width_lo 
1016: 8d 18 d0  -         sta DIS03
1019: a9 00     -         lda #width_hi
101b: 8d 19 d0  -         sta DIS04
101e: a9 a0     -         lda #height
1020: 8d 1a d0  -         sta DIS05
1023: a9 37     -         lda #col 
1025: 8d 1b d0  -         sta DIS06
1028: 20 fd e2  -         jsr fill_rect_
102b: 68        -         pla 
102c: a5 05     -         lda ALIEN_ANIM_FRAME_LO
102e: 18        -         clc
102f: 69 40     -         adc #%01000000
1031: 85 05     -         sta ALIEN_ANIM_FRAME_LO
1033: a5 06     -         lda ALIEN_ANIM_FRAME_HI
1035: 69 00     -         adc #00
1037: 29 03     -         and #3
1039: 85 06     -         sta ALIEN_ANIM_FRAME_HI
103b: 20 2e 14  -         jsr SpaceInvaders.animate_aliens
103e: 20 10 e3  -         jsr draw_sprites_
1041: 48        -         pha
1042: a9 05     -         lda #xlo
1044: 8d 15 d0  -         sta DIS00
1047: a9 00     -         lda #xhi 
1049: 8d 16 d0  -         sta DIS01
104c: a9 b4     -         lda #y 
104e: 8d 17 d0  -         sta DIS02
1051: a9 fa     -         lda #width_lo 
1053: 8d 18 d0  -         sta DIS03
1056: a9 00     -         lda #width_hi
1058: 8d 19 d0  -         sta DIS04
105b: a9 3c     -         lda #height
105d: 8d 1a d0  -         sta DIS05
1060: a9 2a     -         lda #col 
1062: 8d 1b d0  -         sta DIS06
1065: 20 fd e2  -         jsr fill_rect_
1068: 68        -         pla 
1069: 48        -         pha
106a: a9 05     -         lda #xlo
106c: 8d 15 d0  -         sta DIS00
106f: a9 00     -         lda #xhi 
1071: 8d 16 d0  -         sta DIS01
1074: a9 14     -         lda #y 
1076: 8d 17 d0  -         sta DIS02
1079: a9 fa     -         lda #width_lo 
107b: 8d 18 d0  -         sta DIS03
107e: a9 00     -         lda #width_hi
1080: 8d 19 d0  -         sta DIS04
1083: a9 a0     -         lda #height
1085: 8d 1a d0  -         sta DIS05
1088: a9 17     -         lda #col 
108a: 8d 1b d0  -         sta DIS06
108d: 20 ea e2  -         jsr draw_rect_
1090: 68        -         pla 
1091: a9 2b     -         lda #color
1093: 20 02 e2  -         jsr set_fg_color_
1096: a9 02     -         lda #xpos
1098: 20 d2 e1  -         jsr set_cursor_x_
109b: a9 1a     -         lda #ypos
109d: 20 ea e1  -         jsr set_cursor_y_    
10a0: a9 68     -         lda #<addr
10a2: 85 e0     -         sta zpRegE0
10a4: a9 08     -         lda #>addr
10a6: 85 e1     -         sta zpRegE1
10a8: 20 76 e2  -         jsr print_text_
10ab: a9 09     -         lda #xpos
10ad: 20 d2 e1  -         jsr set_cursor_x_
10b0: a9 17     -         lda #ypos
10b2: 20 ea e1  -         jsr set_cursor_y_    
10b5: ad fd d0  -         lda $d0fd       // Framecounter LO Byte
10b8: 8d 30 e1  -         sta HTD_IN
10bb: ad fe d0  -         lda $d0fe       // Framecounter HI Byte
10be: 8d 31 e1  -         sta HTD_IN+1
10c1: 20 68 e1  -         jsr bcd_convert_word_
10c4: ad 34 e1  -         lda HTD_OUT+2
10c7: 20 8e e2  -         jsr print_hex_
10ca: ad 33 e1  -         lda HTD_OUT+1
10cd: 20 8e e2  -         jsr print_hex_
10d0: ad 32 e1  -         lda HTD_OUT
10d3: 20 8e e2  -         jsr print_hex_
10d6: a9 02     -         lda #xpos
10d8: 20 d2 e1  -         jsr set_cursor_x_
10db: a9 17     -         lda #ypos
10dd: 20 ea e1  -         jsr set_cursor_y_    
10e0: a9 6f     -         lda #<addr
10e2: 85 e0     -         sta zpRegE0
10e4: a9 08     -         lda #>addr
10e6: 85 e1     -         sta zpRegE1
10e8: 20 76 e2  -         jsr print_text_
10eb: a9 02     -         lda #xpos
10ed: 20 d2 e1  -         jsr set_cursor_x_
10f0: a9 18     -         lda #ypos
10f2: 20 ea e1  -         jsr set_cursor_y_    
10f5: a9 75     -         lda #<addr
10f7: 85 e0     -         sta zpRegE0
10f9: a9 08     -         lda #>addr
10fb: 85 e1     -         sta zpRegE1
10fd: 20 76 e2  -         jsr print_text_
1100: a9 09     -         lda #xpos
1102: 20 d2 e1  -         jsr set_cursor_x_
1105: a9 18     -         lda #ypos
1107: 20 ea e1  -         jsr set_cursor_y_    
110a: a5 02     -         lda SCORE_LO       
110c: 8d 30 e1  -         sta HTD_IN
110f: a5 03     -         lda SCORE_HI       
1111: 8d 31 e1  -         sta HTD_IN+1
1114: 20 68 e1  -         jsr bcd_convert_word_
1117: ad 34 e1  -         lda HTD_OUT+2
111a: 20 8e e2  -         jsr print_hex_
111d: ad 33 e1  -         lda HTD_OUT+1
1120: 20 8e e2  -         jsr print_hex_
1123: ad 32 e1  -         lda HTD_OUT
1126: 20 8e e2  -         jsr print_hex_
1129: ce 00 10  -         dec shot_delay      // Shot delay countdown
112c: d0 27     -         bne draw_bullets    // Still positive. No Shot
112e: 20 a5 e1  -         jsr rand8           // New delay in frames ( 0..255)
1131: 29 07     -         and #7
1133: 69 07     -         adc #7              // Increase to at least 7 frames. 
1135: 8d 00 10  -         sta shot_delay      // Store new delay
1138: 20 bf 15  -         jsr find_next_invisible_bullet
113b: 90 18     -         bcc draw_bullets    // We couln't find any free slot. So just draw.    
113d: 20 a5 e1  -         jsr rand8  // Random value to accu
1140: 29 0f     -         and #15    // One of the first sixteen aliens
1142: a8        -         tay        // Using y as alien index
1143: b9 d7 14  -         lda SPRITE_XPOS,y
1146: 18        -         clc
1147: 69 08     -         adc #8
1149: 9d 40 16  -         sta ALIEN_BULLETS_X,x
114c: b9 f7 14  -         lda SPRITE_YPOS,y
114f: 18        -         clc
1150: 69 04     -         adc #4
1152: 9d 45 16  -         sta ALIEN_BULLETS_Y,x
1155: 20 d4 15  - draw_bullets:jsr update_alien_bullets
1158: ad d7 14  - check_left:lda SPRITE_XPOS     // Get the x position of the leftmost sprite
115b: c9 0a     -         cmp #10             // 10 is the minimum x position
115d: 10 08     -         bpl check_right     // xpos - 10 >= 0 => check right border 
115f: a9 01     - left_underflow:lda #$01
1161: 8d b0 11  -         sta operation+1
1164: 4c 73 11  -         jmp go_down 
1167: ad de 14  - check_right:lda SPRITE_XPOS+7   // get the xpos position of the rightmost sprite
116a: c9 ef     -         cmp #$ef            // Max xpos = 239
116c: 30 3b     -         bmi move            // if xpos - 239 < 0 => move
116e: a9 ff     - right_overflow:lda #$ff            // By adding -1, we move left.
1170: 8d b0 11  -         sta operation+1     // Write the new speed to the code (self modified)    
1173: ad f7 14  - go_down:lda SPRITE_YPOS
1176: c9 96     -         cmp #150
1178: 30 21     -         bmi decrease         // if SPRITE ypos < 100 decrease ypos
117a: a0 07     - reset_ypos:ldy #7
117c: a9 20     -         lda #$20              // Start Y position
117e: 99 f7 14  -         sta SPRITE_YPOS,y 
1181: 88        -         dey
1182: 10 fa     -         bpl !loop-
1184: a0 07     -         ldy #7
1186: a9 30     -         lda #$30              // Start Y position
1188: 99 ff 14  -         sta SPRITE_YPOS+8,y 
118b: 88        -         dey
118c: 10 fa     -         bpl !loop-
118e: a0 07     -         ldy #7
1190: a9 40     -         lda #$40              // Start Y position
1192: 99 07 15  -         sta SPRITE_YPOS+16,y 
1195: 88        -         dey
1196: 10 fa     -         bpl !loop-
1198: 4c a9 11  -         jmp move    
119b: a0 17     - decrease:ldy #23             // Calculate position fpr 24 sprites
119d: b9 f7 14  -         lda SPRITE_YPOS,y 
11a0: 18        -         clc
11a1: 69 04     -         adc #4
11a3: 99 f7 14  -         sta SPRITE_YPOS,y 
11a6: 88        -         dey
11a7: 10 f4     -         bpl !loop-
11a9: a0 07     - move:   ldy #7               // Y is the sprite index. We have 8 sprites in a row 
11ab: b9 d7 14  -         lda SPRITE_XPOS,y    // Load current x position of the sprite   
11ae: 18        -         clc
11af: 69 01     - operation:adc #1               // Add the speed
11b1: 99 d7 14  -         sta SPRITE_XPOS,y    // save the new xpos 
11b4: 99 df 14  -         sta SPRITE_XPOS+8,y  // Also for the second row
11b7: 99 e7 14  -         sta SPRITE_XPOS+16,y // Also for the second row
11ba: 88        -         dey
11bb: 10 ee     -         bpl !loop-
11bd: ad 0d dc  - exit:   lda $dc0d            // Acknowledge the IRQ            
11c0: 7a        -         ply
11c1: fa        -         plx  
11c2: 68        -         pla
11c3: 40        -         rti
11c4: a9 01     - init:   lda #<main_isr
11c6: 8d fe ff  -         sta $fffe 
11c9: a9 10     -         lda #>main_isr
11cb: 8d ff ff  -         sta $ffff
11ce: a9 01     -         lda #<main_isr
11d0: 8d fa ff  -         sta $fffa 
11d3: a9 10     -         lda #>main_isr
11d5: 8d fb ff  -         sta $fffb
11d8: a2 00     -         ldx #index
11da: a9 67     -         lda #<address
11dc: 9d 77 15  -         sta SPRITE_DATA_LO, x
11df: a9 14     -         lda #>address
11e1: 9d 97 15  -         sta SPRITE_DATA_HI, x                
11e4: a2 08     -         ldx #index
11e6: a9 97     -         lda #<address
11e8: 9d 77 15  -         sta SPRITE_DATA_LO, x
11eb: a9 14     -         lda #>address
11ed: 9d 97 15  -         sta SPRITE_DATA_HI, x                
11f0: a2 10     -         ldx #index
11f2: a9 a7     -         lda #<address
11f4: 9d 77 15  -         sta SPRITE_DATA_LO, x
11f7: a9 14     -         lda #>address
11f9: 9d 97 15  -         sta SPRITE_DATA_HI, x                
11fc: a2 01     -         ldx #index
11fe: a9 67     -         lda #<address
1200: 9d 77 15  -         sta SPRITE_DATA_LO, x
1203: a9 14     -         lda #>address
1205: 9d 97 15  -         sta SPRITE_DATA_HI, x                
1208: a2 09     -         ldx #index
120a: a9 97     -         lda #<address
120c: 9d 77 15  -         sta SPRITE_DATA_LO, x
120f: a9 14     -         lda #>address
1211: 9d 97 15  -         sta SPRITE_DATA_HI, x                
1214: a2 11     -         ldx #index
1216: a9 a7     -         lda #<address
1218: 9d 77 15  -         sta SPRITE_DATA_LO, x
121b: a9 14     -         lda #>address
121d: 9d 97 15  -         sta SPRITE_DATA_HI, x                
1220: a2 02     -         ldx #index
1222: a9 67     -         lda #<address
1224: 9d 77 15  -         sta SPRITE_DATA_LO, x
1227: a9 14     -         lda #>address
1229: 9d 97 15  -         sta SPRITE_DATA_HI, x                
122c: a2 0a     -         ldx #index
122e: a9 97     -         lda #<address
1230: 9d 77 15  -         sta SPRITE_DATA_LO, x
1233: a9 14     -         lda #>address
1235: 9d 97 15  -         sta SPRITE_DATA_HI, x                
1238: a2 12     -         ldx #index
123a: a9 a7     -         lda #<address
123c: 9d 77 15  -         sta SPRITE_DATA_LO, x
123f: a9 14     -         lda #>address
1241: 9d 97 15  -         sta SPRITE_DATA_HI, x                
1244: a2 03     -         ldx #index
1246: a9 67     -         lda #<address
1248: 9d 77 15  -         sta SPRITE_DATA_LO, x
124b: a9 14     -         lda #>address
124d: 9d 97 15  -         sta SPRITE_DATA_HI, x                
1250: a2 0b     -         ldx #index
1252: a9 97     -         lda #<address
1254: 9d 77 15  -         sta SPRITE_DATA_LO, x
1257: a9 14     -         lda #>address
1259: 9d 97 15  -         sta SPRITE_DATA_HI, x                
125c: a2 13     -         ldx #index
125e: a9 a7     -         lda #<address
1260: 9d 77 15  -         sta SPRITE_DATA_LO, x
1263: a9 14     -         lda #>address
1265: 9d 97 15  -         sta SPRITE_DATA_HI, x                
1268: a2 04     -         ldx #index
126a: a9 67     -         lda #<address
126c: 9d 77 15  -         sta SPRITE_DATA_LO, x
126f: a9 14     -         lda #>address
1271: 9d 97 15  -         sta SPRITE_DATA_HI, x                
1274: a2 0c     -         ldx #index
1276: a9 97     -         lda #<address
1278: 9d 77 15  -         sta SPRITE_DATA_LO, x
127b: a9 14     -         lda #>address
127d: 9d 97 15  -         sta SPRITE_DATA_HI, x                
1280: a2 14     -         ldx #index
1282: a9 a7     -         lda #<address
1284: 9d 77 15  -         sta SPRITE_DATA_LO, x
1287: a9 14     -         lda #>address
1289: 9d 97 15  -         sta SPRITE_DATA_HI, x                
128c: a2 05     -         ldx #index
128e: a9 67     -         lda #<address
1290: 9d 77 15  -         sta SPRITE_DATA_LO, x
1293: a9 14     -         lda #>address
1295: 9d 97 15  -         sta SPRITE_DATA_HI, x                
1298: a2 0d     -         ldx #index
129a: a9 97     -         lda #<address
129c: 9d 77 15  -         sta SPRITE_DATA_LO, x
129f: a9 14     -         lda #>address
12a1: 9d 97 15  -         sta SPRITE_DATA_HI, x                
12a4: a2 15     -         ldx #index
12a6: a9 a7     -         lda #<address
12a8: 9d 77 15  -         sta SPRITE_DATA_LO, x
12ab: a9 14     -         lda #>address
12ad: 9d 97 15  -         sta SPRITE_DATA_HI, x                
12b0: a2 06     -         ldx #index
12b2: a9 67     -         lda #<address
12b4: 9d 77 15  -         sta SPRITE_DATA_LO, x
12b7: a9 14     -         lda #>address
12b9: 9d 97 15  -         sta SPRITE_DATA_HI, x                
12bc: a2 0e     -         ldx #index
12be: a9 97     -         lda #<address
12c0: 9d 77 15  -         sta SPRITE_DATA_LO, x
12c3: a9 14     -         lda #>address
12c5: 9d 97 15  -         sta SPRITE_DATA_HI, x                
12c8: a2 16     -         ldx #index
12ca: a9 a7     -         lda #<address
12cc: 9d 77 15  -         sta SPRITE_DATA_LO, x
12cf: a9 14     -         lda #>address
12d1: 9d 97 15  -         sta SPRITE_DATA_HI, x                
12d4: a2 07     -         ldx #index
12d6: a9 67     -         lda #<address
12d8: 9d 77 15  -         sta SPRITE_DATA_LO, x
12db: a9 14     -         lda #>address
12dd: 9d 97 15  -         sta SPRITE_DATA_HI, x                
12e0: a2 0f     -         ldx #index
12e2: a9 97     -         lda #<address
12e4: 9d 77 15  -         sta SPRITE_DATA_LO, x
12e7: a9 14     -         lda #>address
12e9: 9d 97 15  -         sta SPRITE_DATA_HI, x                
12ec: a2 17     -         ldx #index
12ee: a9 a7     -         lda #<address
12f0: 9d 77 15  -         sta SPRITE_DATA_LO, x
12f3: a9 14     -         lda #>address
12f5: 9d 97 15  -         sta SPRITE_DATA_HI, x                
12f8: a2 00     -         ldx #index
12fa: bd b7 14  -         lda SPRITE_FLAGS, x
12fd: 05 c0     -         ora SPRITE_ENABLE_FLAG
12ff: 9d b7 14  -         sta SPRITE_FLAGS, x
1302: a2 01     -         ldx #index
1304: bd b7 14  -         lda SPRITE_FLAGS, x
1307: 05 c0     -         ora SPRITE_ENABLE_FLAG
1309: 9d b7 14  -         sta SPRITE_FLAGS, x
130c: a2 02     -         ldx #index
130e: bd b7 14  -         lda SPRITE_FLAGS, x
1311: 05 c0     -         ora SPRITE_ENABLE_FLAG
1313: 9d b7 14  -         sta SPRITE_FLAGS, x
1316: a2 03     -         ldx #index
1318: bd b7 14  -         lda SPRITE_FLAGS, x
131b: 05 c0     -         ora SPRITE_ENABLE_FLAG
131d: 9d b7 14  -         sta SPRITE_FLAGS, x
1320: a2 04     -         ldx #index
1322: bd b7 14  -         lda SPRITE_FLAGS, x
1325: 05 c0     -         ora SPRITE_ENABLE_FLAG
1327: 9d b7 14  -         sta SPRITE_FLAGS, x
132a: a2 05     -         ldx #index
132c: bd b7 14  -         lda SPRITE_FLAGS, x
132f: 05 c0     -         ora SPRITE_ENABLE_FLAG
1331: 9d b7 14  -         sta SPRITE_FLAGS, x
1334: a2 06     -         ldx #index
1336: bd b7 14  -         lda SPRITE_FLAGS, x
1339: 05 c0     -         ora SPRITE_ENABLE_FLAG
133b: 9d b7 14  -         sta SPRITE_FLAGS, x
133e: a2 07     -         ldx #index
1340: bd b7 14  -         lda SPRITE_FLAGS, x
1343: 05 c0     -         ora SPRITE_ENABLE_FLAG
1345: 9d b7 14  -         sta SPRITE_FLAGS, x
1348: a2 08     -         ldx #index
134a: bd b7 14  -         lda SPRITE_FLAGS, x
134d: 05 c0     -         ora SPRITE_ENABLE_FLAG
134f: 9d b7 14  -         sta SPRITE_FLAGS, x
1352: a2 09     -         ldx #index
1354: bd b7 14  -         lda SPRITE_FLAGS, x
1357: 05 c0     -         ora SPRITE_ENABLE_FLAG
1359: 9d b7 14  -         sta SPRITE_FLAGS, x
135c: a2 0a     -         ldx #index
135e: bd b7 14  -         lda SPRITE_FLAGS, x
1361: 05 c0     -         ora SPRITE_ENABLE_FLAG
1363: 9d b7 14  -         sta SPRITE_FLAGS, x
1366: a2 0b     -         ldx #index
1368: bd b7 14  -         lda SPRITE_FLAGS, x
136b: 05 c0     -         ora SPRITE_ENABLE_FLAG
136d: 9d b7 14  -         sta SPRITE_FLAGS, x
1370: a2 0c     -         ldx #index
1372: bd b7 14  -         lda SPRITE_FLAGS, x
1375: 05 c0     -         ora SPRITE_ENABLE_FLAG
1377: 9d b7 14  -         sta SPRITE_FLAGS, x
137a: a2 0d     -         ldx #index
137c: bd b7 14  -         lda SPRITE_FLAGS, x
137f: 05 c0     -         ora SPRITE_ENABLE_FLAG
1381: 9d b7 14  -         sta SPRITE_FLAGS, x
1384: a2 0e     -         ldx #index
1386: bd b7 14  -         lda SPRITE_FLAGS, x
1389: 05 c0     -         ora SPRITE_ENABLE_FLAG
138b: 9d b7 14  -         sta SPRITE_FLAGS, x
138e: a2 0f     -         ldx #index
1390: bd b7 14  -         lda SPRITE_FLAGS, x
1393: 05 c0     -         ora SPRITE_ENABLE_FLAG
1395: 9d b7 14  -         sta SPRITE_FLAGS, x
1398: a2 10     -         ldx #index
139a: bd b7 14  -         lda SPRITE_FLAGS, x
139d: 05 c0     -         ora SPRITE_ENABLE_FLAG
139f: 9d b7 14  -         sta SPRITE_FLAGS, x
13a2: a2 11     -         ldx #index
13a4: bd b7 14  -         lda SPRITE_FLAGS, x
13a7: 05 c0     -         ora SPRITE_ENABLE_FLAG
13a9: 9d b7 14  -         sta SPRITE_FLAGS, x
13ac: a2 12     -         ldx #index
13ae: bd b7 14  -         lda SPRITE_FLAGS, x
13b1: 05 c0     -         ora SPRITE_ENABLE_FLAG
13b3: 9d b7 14  -         sta SPRITE_FLAGS, x
13b6: a2 13     -         ldx #index
13b8: bd b7 14  -         lda SPRITE_FLAGS, x
13bb: 05 c0     -         ora SPRITE_ENABLE_FLAG
13bd: 9d b7 14  -         sta SPRITE_FLAGS, x
13c0: a2 14     -         ldx #index
13c2: bd b7 14  -         lda SPRITE_FLAGS, x
13c5: 05 c0     -         ora SPRITE_ENABLE_FLAG
13c7: 9d b7 14  -         sta SPRITE_FLAGS, x
13ca: a2 15     -         ldx #index
13cc: bd b7 14  -         lda SPRITE_FLAGS, x
13cf: 05 c0     -         ora SPRITE_ENABLE_FLAG
13d1: 9d b7 14  -         sta SPRITE_FLAGS, x
13d4: a2 16     -         ldx #index
13d6: bd b7 14  -         lda SPRITE_FLAGS, x
13d9: 05 c0     -         ora SPRITE_ENABLE_FLAG
13db: 9d b7 14  -         sta SPRITE_FLAGS, x
13de: a2 17     -         ldx #index
13e0: bd b7 14  -         lda SPRITE_FLAGS, x
13e3: 05 c0     -         ora SPRITE_ENABLE_FLAG
13e5: 9d b7 14  -         sta SPRITE_FLAGS, x
13e8: a9 b7     -         lda #<SPRITE_DEFINITON_BLOCK
13ea: 8d 15 d0  -         sta DIS00
13ed: a9 14     -         lda #>SPRITE_DEFINITON_BLOCK
13ef: 8d 16 d0  -         sta DIS01
13f2: a9 20     -         lda #32                 // Set number of sprites
13f4: 8d 17 d0  -         sta DIS02
13f7: a9 17     -         lda #CMD_SET_SDB        // Command "Set Sprite Definition Block"
13f9: 8d 14 d0  -         sta DISCMD              //                                          
13fc: ad 13 d0  -         lda DISCR               // Load Display command register
13ff: 09 80     -         ora #$80                // Set the "Command Exceution" Flag
1401: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
1404: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
1407: 30 fb     -         bmi !wait-              // No! Let's wait
1409: a9 67     -         lda #<SPACE_ALIEN_A
140b: 8d b7 15  -         sta ALIEN_A_SPRITE_ANIMATION_LO
140e: 8d b9 15  -         sta ALIEN_A_SPRITE_ANIMATION_LO+2
1411: a9 14     -         lda #>SPACE_ALIEN_A
1413: 8d bb 15  -         sta ALIEN_A_SPRITE_ANIMATION_HI
1416: 8d bd 15  -         sta ALIEN_A_SPRITE_ANIMATION_HI+2
1419: a9 77     -         lda #<SPACE_ALIEN_A1
141b: 8d b8 15  -         sta ALIEN_A_SPRITE_ANIMATION_LO+1
141e: a9 14     -         lda #>SPACE_ALIEN_A1
1420: 8d bc 15  -         sta ALIEN_A_SPRITE_ANIMATION_HI+1
1423: a9 87     -         lda #<SPACE_ALIEN_A2
1425: 8d ba 15  -         sta ALIEN_A_SPRITE_ANIMATION_LO+3
1428: a9 14     -         lda #>SPACE_ALIEN_A2
142a: 8d be 15  -         sta ALIEN_A_SPRITE_ANIMATION_HI+3
142d: 60        -         rts
142e: a6 06     - animate_aliens:ldx ALIEN_ANIM_FRAME_HI
1430: bd b7 15  -         lda ALIEN_A_SPRITE_ANIMATION_LO,x
1433: 8d 77 15  -         sta SPRITE_DATA_LO+i    
1436: 8d 78 15  -         sta SPRITE_DATA_LO+i    
1439: 8d 79 15  -         sta SPRITE_DATA_LO+i    
143c: 8d 7a 15  -         sta SPRITE_DATA_LO+i    
143f: 8d 7b 15  -         sta SPRITE_DATA_LO+i    
1442: 8d 7c 15  -         sta SPRITE_DATA_LO+i    
1445: 8d 7d 15  -         sta SPRITE_DATA_LO+i    
1448: 8d 7e 15  -         sta SPRITE_DATA_LO+i    
144b: bd bb 15  -         lda ALIEN_A_SPRITE_ANIMATION_HI,x
144e: 8d 97 15  -         sta SPRITE_DATA_HI+i    
1451: 8d 98 15  -         sta SPRITE_DATA_HI+i    
1454: 8d 99 15  -         sta SPRITE_DATA_HI+i    
1457: 8d 9a 15  -         sta SPRITE_DATA_HI+i    
145a: 8d 9b 15  -         sta SPRITE_DATA_HI+i    
145d: 8d 9c 15  -         sta SPRITE_DATA_HI+i    
1460: 8d 9d 15  -         sta SPRITE_DATA_HI+i    
1463: 8d 9e 15  -         sta SPRITE_DATA_HI+i    
1466: 60        -         rts
1467: 02 40     - SPACE_ALIEN_A:.byte %00000010, %01000000
1469: 07 e0     -         .byte %00000111, %11100000
146b: 0f f0     -         .byte %00001111, %11110000
146d: 1d b8     -         .byte %00011101, %10111000
146f: 17 e8     -         .byte %00010111, %11101000
1471: 17 e8     -         .byte %00010111, %11101000
1473: 02 40     -         .byte %00000010, %01000000
1475: 06 60     -         .byte %00000110, %01100000
1477: 02 40     - SPACE_ALIEN_A1:.byte %00000010, %01000000
1479: 07 e0     -         .byte %00000111, %11100000
147b: 0f f0     -         .byte %00001111, %11110000
147d: 1d b8     -         .byte %00011101, %10111000
147f: 17 e8     -         .byte %00010111, %11101000
1481: 07 c8     -         .byte %00000111, %11001000
1483: 02 60     -         .byte %00000010, %01100000
1485: 06 00     -         .byte %00000110, %00000000
1487: 02 40     - SPACE_ALIEN_A2:.byte %00000010, %01000000
1489: 07 e0     -         .byte %00000111, %11100000
148b: 0f f0     -         .byte %00001111, %11110000
148d: 1d b8     -         .byte %00011101, %10111000
148f: 17 e8     -         .byte %00010111, %11101000
1491: 13 e0     -         .byte %00010011, %11100000
1493: 06 40     -         .byte %00000110, %01000000
1495: 00 60     -         .byte %00000000, %01100000
1497: 00 00     - SPACE_ALIEN_B:.byte %00000000, %00000000
1499: 04 40     -         .byte %00000100, %01000000
149b: 03 80     -         .byte %00000011, %10000000
149d: 07 c0     -         .byte %00000111, %11000000
149f: 05 40     -         .byte %00000101, %01000000
14a1: 07 c0     -         .byte %00000111, %11000000
14a3: 0a a0     -         .byte %00001010, %10100000
14a5: 0a a0     -         .byte %00001010, %10100000
14a7: 00 00     - SPACE_ALIEN_C:.byte %00000000, %00000000
14a9: 04 40     -         .byte %00000100, %01000000
14ab: 0f e0     -         .byte %00001111, %11100000
14ad: 19 30     -         .byte %00011001, %00110000
14af: 1f f0     -         .byte %00011111, %11110000
14b1: 1f f0     -         .byte %00011111, %11110000
14b3: 15 50     -         .byte %00010101, %01010000
14b5: 0a a0     -         .byte %00001010, %10100000
14b7: 80 80 80 80 80 80 80 80                          - SPRITE_DEFINITON_BLOCK,SPRITE_FLAGS:.byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 00-07
14bf: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 08-15
14c7: 80 80 80 80 80 80 80 80                          -         .byte $80, $80, $80, $80, $80, $80, $80, $80  // Sprite 16-23
14cf: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
14d7: 10 20 30 40 50 60 70 80                          - SPRITE_XPOS:.byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 00-07
14df: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 08-15
14e7: 10 20 30 40 50 60 70 80                          -         .byte $10, $20, $30, $40, $50, $60, $70, $80  // Sprite 16-23
14ef: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
14f7: 20 20 20 20 20 20 20 20                          - SPRITE_YPOS:.byte $20, $20, $20, $20, $20, $20, $20, $20  // Sprite 00-07
14ff: 30 30 30 30 30 30 30 30                          -         .byte $30, $30, $30, $30, $30, $30, $30, $30  // Sprite 08-15
1507: 40 40 40 40 40 40 40 40                          -         .byte $40, $40, $40, $40, $40, $40, $40, $40  // Sprite 16-23
150f: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1517: 1f 1f 1f 1f 1f 1f 1f 1f                          - SPRITE_COLOR:.byte $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f  // Sprite 00-07
151f: 23 23 23 23 23 23 23 23                          -         .byte $23, $23, $23, $23, $23, $23, $23, $23  // Sprite 08-15
1527: 2c 2c 2c 2c 2c 2c 2c 2c                          -         .byte $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2c  // Sprite 16-23
152f: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1537: 10 10 10 10 10 10 10 10                          - SPRITE_WIDTH:.byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 00-07
153f: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 08-15
1547: 10 10 10 10 10 10 10 10                          -         .byte $10, $10, $10, $10, $10, $10, $10, $10  // Sprite 16-23
154f: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1557: 08 08 08 08 08 08 08 08                          - SPRITE_HEIGHT:.byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 00-07
155f: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 08-15
1567: 08 08 08 08 08 08 08 08                          -         .byte $08, $08, $08, $08, $08, $08, $08, $08  // Sprite 16-23
156f: 00 00 00 00 00 00 00 00                          -         .byte $00, $00, $00, $00, $00, $00, $00, $00  // Sprite 24-32
1577: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_LO:.fill 32, 0
1587: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
1597: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - SPRITE_DATA_HI:.fill 32, 0
15a7: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
15b7: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_LO:.fill 4, 0
15bb: 00 00 00 00                                      - ALIEN_A_SPRITE_ANIMATION_HI:.fill 4, 0
15bf: a2 04     - find_next_invisible_bullet:ldx #(BULLET_COUNT-1)
15c1: bd 3b 16  -         lda ALIEN_BULLETS_STAT,x 
15c4: 30 09     -         bmi !next+ // Visible. Next.
15c6: 09 80     -         ora #BULLET_ENABLE_FLAG
15c8: 9d 3b 16  -         sta ALIEN_BULLETS_STAT,x
15cb: 38        -         sec // Set carry flag (inicating we found a slot)
15cc: 4c d3 15  -         jmp !end+
15cf: ca        -         dex
15d0: 10 ef     -         bpl !loop-
15d2: 18        -         clc // Clear carry to indicate, we didn't found a free slot.
15d3: 60        -         rts
15d4: 20 de 15  - update_alien_bullets:jsr move_bullets
15d7: 20 f3 15  -         jsr check_bullets
15da: 20 0d 16  -         jsr draw_bullets
15dd: 60        -         rts
15de: a2 05     - move_bullets:ldx #(BULLET_COUNT)
15e0: bd 3b 16  -         lda ALIEN_BULLETS_STAT,x
15e3: 10 0a     -         bpl !next+
15e5: bd 45 16  -         lda ALIEN_BULLETS_Y,x 
15e8: 18        -         clc 
15e9: 7d 4a 16  -         adc ALIEN_BULLETS_SPEED,x
15ec: 9d 45 16  -         sta ALIEN_BULLETS_Y,x
15ef: ca        -         dex
15f0: 10 ee     -         bpl !loop- 
15f2: 60        -         rts
15f3: a2 04     - check_bullets:ldx #(BULLET_COUNT-1)
15f5: bd 3b 16  -         lda ALIEN_BULLETS_STAT,x
15f8: 10 0f     -         bpl !next+
15fa: bd 45 16  -         lda ALIEN_BULLETS_Y,x
15fd: c9 aa     -         cmp #BULLET_MAX_HEIGHT    // if ypos > BULLET_MAX_HEIGHT hide bullet 
15ff: 30 08     -         bmi !next+
1601: bd 3b 16  - hide_bullet:lda ALIEN_BULLETS_STAT,x 
1604: 29 7f     -         and #(~BULLET_ENABLE_FLAG)
1606: 9d 3b 16  -         sta ALIEN_BULLETS_STAT,x
1609: ca        -         dex
160a: 10 e9     -         bpl !loop-
160c: 60        -         rts
160d: a9 00     - draw_bullets:lda #0
160f: 8d 16 d0  -         sta DIS01                   // xpos high
1612: a9 04     -         lda #BULLET_LENGTH          // Length Low
1614: 8d 18 d0  -         sta DIS03
1617: a9 00     -         lda #0                      // Length High
1619: 8d 19 d0  -         sta DIS04   
161c: a9 17     -         lda #BULLET_COLOR           // Color
161e: 8d 1a d0  -         sta DIS05
1621: a2 04     -         ldx #(BULLET_COUNT-1)
1623: bd 3b 16  -         lda ALIEN_BULLETS_STAT,x 
1626: 10 0f     -         bpl !next+
1628: bd 40 16  -         lda ALIEN_BULLETS_X,x       // X-Pos low
162b: 8d 15 d0  -         sta DIS00
162e: bd 45 16  -         lda ALIEN_BULLETS_Y,x 
1631: 8d 17 d0  -         sta DIS02                   // ypos 
1634: 20 c4 e2  -         jsr draw_vertical_line_
1637: ca        -         dex 
1638: 10 e9     -         bpl !loop-
163a: 60        -         rts
163b: 04 04 04 04 04                                   - ALIEN_BULLETS_STAT:.fill BULLET_COUNT, $04  // Bit 0..3 length
1640: 00 00 00 00 00                                   - ALIEN_BULLETS_X:.fill BULLET_COUNT, $00  // xpos. If xpos > 255; stat bit 6 = 1
1645: 20 20 20 20 20                                   - ALIEN_BULLETS_Y:.fill BULLET_COUNT, $20  // ypos of the top
164a: 02 02 02 02 02                                   - ALIEN_BULLETS_SPEED:.fill BULLET_COUNT, $02

[Kernel Routines Entry Points]
e000: 4c c6 e1  - get_key:jmp get_key_
e003: 4c d2 e1  - set_cursor_x:jmp set_cursor_x_
e006: 4c ea e1  - set_cursor_y:jmp set_cursor_y_
e009: 4c 5e e2  - print_char:jmp print_char_

[Kernel Routines]
e100: 00 00 01 00 00 02 00 00 04 00 00 08              - BCD_LOOKUP_TABLE:.byte    $00, $00, $01, $00, $00, $02, $00, $00, $04, $00, $00, $08
e10c: 00 00 16 00 00 32 00 00 64 00 01 28              -         .byte    $00, $00, $16, $00, $00, $32, $00, $00, $64, $00, $01, $28
e118: 00 02 56 00 05 12 00 10 24 00 20 48              -         .byte    $00, $02, $56, $00, $05, $12, $00, $10, $24, $00, $20, $48
e124: 00 40 96 00 81 92 01 63 84 03 27 68              -         .byte    $00, $40, $96, $00, $81, $92, $01, $63, $84, $03, $27, $68
e130: 00 00     - HTD_IN: .byte $00, $00
e132: 00 00 00  - HTD_OUT:.byte $00, $00, $00 
e135: a5 e0     - convert565:lda zpRegE0             // red value
e137: 0a        -         asl                     // shift three to the left as we
e138: 0a        -         asl                     // need to move the lower 5 bits of red
e139: 0a        -         asl                     // to the bits 7-5
e13a: 85 e0     -         sta zpRegE0             // Save as the High Byte of the compressed color
e13c: a5 e1     -         lda zpRegE1             // load green. We need the bits 3-5 to be the 
e13e: 4a        -         lsr                     // lower bits of the output highbyte
e13f: 4a        -         lsr
e140: 4a        -         lsr
e141: 29 07     -         and #%00000111          // Only the lower three bits.
e143: 05 e0     -         ora zpRegE0             // combine this with the compressed red
e145: 85 e0     -         sta zpRegE0             // Store the final high byte
e147: a5 e1     -         lda zpRegE1             // Load green again. We need the lower three bits
e149: 0a        -         asl                     // Shift everything 5 bits to the left and fill
e14a: 0a        -         asl                     // it with zeros
e14b: 0a        -         asl
e14c: 0a        -         asl
e14d: 0a        -         asl
e14e: 85 e1     -         sta zpRegE1             // Store the green part in the lowbyte of the result
e150: a5 e2     -         lda zpRegE2             // Load blue
e152: 29 1f     -         and #%00011111          // Only need the 5 lower bits.
e154: 05 e1     -         ora zpRegE1             // Combine it with the green fraction
e156: 85 e1     -         sta zpRegE1             // Store the final low byte of the compressed color
e158: 60        -         rts
e159: 48        - byte_to_hex:pha                     // Save value to stack.
e15a: 29 0f     -         and #%00001111
e15c: 85 e0     -         sta zpRegE0             // store the lower nibble
e15e: 68        -         pla                     // Load the original value
e15f: 48        -         pha                     // and save it again
e160: 4a        -         lsr                     // shift the higher nibbel to the lower nibble
e161: 4a        -         lsr
e162: 4a        -         lsr
e163: 4a        -         lsr
e164: 85 e1     -         sta zpRegE1             // store the higher nibble
e166: 68        -         pla                     // restore the accu
e167: 60        -         rts
e168: f8        - bcd_convert_word_:sed
e169: da        -         phx
e16a: 48        -         pha
e16b: a9 00     -         lda #0
e16d: 8d 32 e1  -         sta HTD_OUT
e170: 8d 33 e1  -         sta HTD_OUT+1
e173: 8d 34 e1  -         sta HTD_OUT+2
e176: a2 2d     -         ldx #$2d
e178: 0e 30 e1  -         asl HTD_IN 
e17b: 2e 31 e1  -         rol HTD_IN+1
e17e: 90 1c     -         bcc htd1
e180: ad 32 e1  -         lda HTD_OUT
e183: 18        -         clc 
e184: 7d 02 e1  -         adc BCD_LOOKUP_TABLE+2,x
e187: 8d 32 e1  -         sta HTD_OUT
e18a: ad 33 e1  -         lda HTD_OUT+1
e18d: 7d 01 e1  -         adc BCD_LOOKUP_TABLE+1,x
e190: 8d 33 e1  -         sta HTD_OUT+1
e193: ad 34 e1  -         lda HTD_OUT+2
e196: 7d 00 e1  -         adc BCD_LOOKUP_TABLE,x
e199: 8d 34 e1  -         sta HTD_OUT+2
e19c: ca        - htd1:   dex
e19d: ca        -         dex 
e19e: ca        -         dex 
e19f: 10 d7     -         bpl !loop- 
e1a1: d8        -         cld
e1a2: 68        -         pla
e1a3: fa        -         plx 
e1a4: 60        -         rts
e1a5: a9 1f     - rand8,rand8b1-1:lda rand8b1:#31
e1a7: 0a        -         asl
e1a8: 49 35     - rand8a1-1:eor rand8a1:#53
e1aa: 8d a6 e1  -         sta rand8b1
e1ad: 6d a9 e1  -         adc rand8a1
e1b0: 8d a9 e1  -         sta rand8a1
e1b3: 60        -         rts
e1b4: 48        - set_seed:pha
e1b5: 29 d9     -         and #217
e1b7: 18        -         clc
e1b8: 69 0f     -         adc #<21263
e1ba: 8d a9 e1  -         sta rand8a1
e1bd: 68        -         pla
e1be: 29 26     -         and #255-217
e1c0: 69 53     -         adc #>21263
e1c2: 8d a6 e1  -         sta rand8b1
e1c5: 60        -         rts
e1c6: ad 11 d0  - get_key_:lda KBDCR               // Load the keyboard control register
e1c9: 10 fb     -         bpl get_key_            // lda affects the negative flag, 
e1cb: 29 70     -         and #KEY_MOD_MASK
e1cd: aa        -         tax                     // Save modifiers
e1ce: ad 10 d0  -         lda KBD                 // Current key code to accu
e1d1: 60        -         rts                     // Return
e1d2: 48        - set_cursor_x_:pha                     // Save accu
e1d3: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1d6: a9 03     -         lda #CMD_SET_CURSOR_X
e1d8: 8d 14 d0  -         sta DISCMD              // Write the command. Will raise the irq                                         
e1db: ad 13 d0  -         lda DISCR
e1de: 09 80     -         ora #$80
e1e0: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1e3: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1e6: 30 fb     -         bmi !wait-              // No! Let's wait
e1e8: 68        -         pla                     // Restore input parameter in accu
e1e9: 60        -         rts                     // Return
e1ea: 48        - set_cursor_y_:pha                     // Save accu
e1eb: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e1ee: a9 04     -         lda #CMD_SET_CURSOR_Y
e1f0: 8d 14 d0  -         sta DISCMD
e1f3: ad 13 d0  -         lda DISCR
e1f6: 09 80     -         ora #$80
e1f8: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e1fb: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e1fe: 30 fb     -         bmi !wait-              // No! Let's wait
e200: 68        -         pla                     // Restore input parameter in accu
e201: 60        -         rts                     // Return
e202: 48        - set_fg_color_:pha                     // Save accu
e203: 8d 15 d0  -         sta DIS00              // Save the color to the 
e206: a9 07     -         lda #CMD_SET_FG_COLOR
e208: 8d 14 d0  -         sta DISCMD
e20b: ad 13 d0  -         lda DISCR
e20e: 09 80     -         ora #$80
e210: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e213: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e216: 30 fb     -         bmi !wait-              // No! Let's wait
e218: 68        -         pla                     // Restore input parameter in accu
e219: 60        -         rts                     // Return
e21a: 48        - set_bg_color_:pha                     // Save accu
e21b: 8d 15 d0  -         sta DIS00              // Save the xpos to the 
e21e: a9 08     -         lda #CMD_SET_BG_COLOR
e220: 8d 14 d0  -         sta DISCMD
e223: ad 13 d0  -         lda DISCR
e226: 09 80     -         ora #$80
e228: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e22b: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e22e: 30 fb     -         bmi !wait-              // No! Let's wait
e230: 68        -         pla                     // Restore input parameter in accu
e231: 60        -         rts                     // Return
e232: a9 01     - get_xpos_:lda #CMD_GET_CURSOR_X
e234: 8d 14 d0  -         sta DISCMD
e237: ad 13 d0  -         lda DISCR
e23a: 09 80     -         ora #$80
e23c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e23f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e242: 30 fb     -         bmi !wait-              // No! Let's wait
e244: ad 15 d0  -         lda DIS00
e247: 60        -         rts                     // Return
e248: a9 02     - get_ypos_:lda #CMD_GET_CURSOR_Y
e24a: 8d 14 d0  -         sta DISCMD
e24d: ad 13 d0  -         lda DISCR
e250: 09 80     -         ora #$80
e252: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e255: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e258: 30 fb     -         bmi !wait-              // No! Let's wait
e25a: ad 15 d0  -         lda DIS00
e25d: 60        -         rts                     // Return
e25e: 48        - print_char_:pha                     // Save accu
e25f: 8d 15 d0  -         sta DIS00              // Save the char to the 
e262: a9 0d     -         lda #CMD_WRITE_CHAR
e264: 8d 14 d0  -         sta DISCMD
e267: ad 13 d0  -         lda DISCR
e26a: 09 80     -         ora #$80
e26c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e26f: 2c 13 d0  -         bit DISCR               // Check, if the irg flag is cleared
e272: 30 fb     -         bmi !wait-              // No! Let's wait
e274: 68        -         pla                     // Restore input parameter in accu
e275: 60        -         rts                     // Return
e276: 8c 8a e2  - print_text_:sty (!end+)+1       // Save y register
e279: 8d 8c e2  -         sta (!end+)+3
e27c: a0 00     -         ldy #0              // Index for the char within the string
e27e: b1 e0     -         lda (zpRegE0),y     // load character
e280: f0 07     -         beq !end+
e282: 20 5e e2  -         jsr print_char_
e285: c8        -         iny
e286: 4c 7e e2  -         jmp !next-
e289: a0 00     -         ldy #0
e28b: a9 00     -         lda #0
e28d: 60        -         rts
e28e: 48        - print_hex_:pha
e28f: a9 00     -         lda #<hex_chars
e291: 85 e0     -         sta zpRegE0
e293: a9 f0     -         lda #>hex_chars
e295: 85 e1     -         sta zpRegE1
e297: 68        -         pla
e298: 48        -         pha
e299: 4a        -         lsr
e29a: 4a        -         lsr
e29b: 4a        -         lsr
e29c: 4a        -         lsr
e29d: 29 0f     -         and #$0f
e29f: a8        -         tay
e2a0: b1 e0     -         lda (zpRegE0),y
e2a2: 20 5e e2  -         jsr print_char_
e2a5: 68        -         pla
e2a6: 48        -         pha
e2a7: 29 0f     -         and #$0f
e2a9: a8        -         tay
e2aa: b1 e0     -         lda (zpRegE0),y
e2ac: 20 5e e2  -         jsr print_char_
e2af: 68        -         pla
e2b0: 60        -         rts
e2b1: a9 15     - draw_horizonal_line_:lda #CMD_DRAW_HLINE
e2b3: 8d 14 d0  -         sta DISCMD
e2b6: ad 13 d0  -         lda DISCR
e2b9: 09 80     -         ora #$80
e2bb: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2be: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2c1: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2c3: 60        -         rts
e2c4: a9 16     - draw_vertical_line_:lda #CMD_DRAW_VLINE
e2c6: 8d 14 d0  -         sta DISCMD
e2c9: ad 13 d0  -         lda DISCR
e2cc: 09 80     -         ora #$80
e2ce: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2d1: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2d4: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2d6: 60        -         rts
e2d7: a9 0f     - clear_screen_:lda #CMD_CLEAR_SCREEN
e2d9: 8d 14 d0  -         sta DISCMD
e2dc: ad 13 d0  -         lda DISCR
e2df: 09 80     -         ora #$80
e2e1: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2e4: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2e7: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2e9: 60        -         rts
e2ea: a9 1a     - draw_rect_:lda #CMD_DRAW_RECT
e2ec: 8d 14 d0  -         sta DISCMD
e2ef: ad 13 d0  -         lda DISCR
e2f2: 09 80     -         ora #$80
e2f4: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e2f7: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e2fa: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e2fc: 60        -         rts
e2fd: a9 1b     - fill_rect_:lda #CMD_FILL_RECT
e2ff: 8d 14 d0  -         sta DISCMD
e302: ad 13 d0  -         lda DISCR
e305: 09 80     -         ora #$80
e307: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e30a: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e30d: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e30f: 60        -         rts
e310: a9 1e     - draw_sprites_:lda #CMD_DRAW_SPRITES
e312: 8d 14 d0  -         sta DISCMD
e315: ad 13 d0  -         lda DISCR
e318: 09 80     -         ora #$80
e31a: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e31d: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e320: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e322: 60        -         rts
e323: a9 20     - draw_pixel_:lda #CMD_DRAW_PIXEL
e325: 8d 14 d0  -         sta DISCMD
e328: ad 13 d0  -         lda DISCR
e32b: 09 80     -         ora #$80
e32d: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e330: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e333: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e335: 60        -         rts
e336: a9 1f     - draw_bitmap_:lda #CMD_DRAW_BITMAP
e338: 8d 14 d0  -         sta DISCMD
e33b: ad 13 d0  -         lda DISCR
e33e: 09 80     -         ora #$80
e340: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e343: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e346: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e348: 60        -         rts
e349: a9 1c     - draw_circle_:lda #CMD_DRAW_CIRCLE
e34b: 8d 14 d0  -         sta DISCMD
e34e: ad 13 d0  -         lda DISCR
e351: 09 80     -         ora #$80
e353: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e356: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e359: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e35b: 60        -         rts
e35c: a9 1d     - fill_circle_:lda #CMD_FILL_CIRCLE
e35e: 8d 14 d0  -         sta DISCMD
e361: ad 13 d0  -         lda DISCR
e364: 09 80     -         ora #$80
e366: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e369: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e36c: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e36e: 60        -         rts
e36f: a9 21     - draw_triangle_:lda #CMD_DRAW_TRIANGLE
e371: 8d 14 d0  -         sta DISCMD
e374: ad 13 d0  -         lda DISCR
e377: 09 80     -         ora #$80
e379: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e37c: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e37f: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e381: 60        -         rts
e382: a9 22     - fill_triangle_:lda #CMD_FILL_TRIANGLE
e384: 8d 14 d0  -         sta DISCMD
e387: ad 13 d0  -         lda DISCR
e38a: 09 80     -         ora #$80
e38c: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e38f: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e392: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e394: 60        -         rts
e395: a9 23     - draw_round_rect_:lda #CMD_DRAW_ROUND_RECT
e397: 8d 14 d0  -         sta DISCMD
e39a: ad 13 d0  -         lda DISCR
e39d: 09 80     -         ora #$80
e39f: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3a2: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e3a5: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e3a7: 60        -         rts
e3a8: a9 24     - fill_round_rect_:lda #CMD_FILL_ROUND_RECT
e3aa: 8d 14 d0  -         sta DISCMD
e3ad: ad 13 d0  -         lda DISCR
e3b0: 09 80     -         ora #$80
e3b2: 8d 13 d0  -         sta DISCR               // Raise the IRQ flag
e3b5: 2c 13 d0  - wait_for_ready:bit DISCR               // Check, if the excecution/irg flag is cleared
e3b8: 30 fb     -         bmi wait_for_ready      // No! Let's wait
e3ba: 60        -         rts

[Kernel Data]
f000: 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46  - hex_chars:.text "0123456789ABCDEF"
f010: 57 65 6c 63 6f 6d 65 20 74 6f 20 46 69 72 73 74  - msg_01: .text "Welcome to FirstKlaas OS v0.1"
f020: 4b 6c 61 61 73 20 4f 53 20 76 30 2e 31          
